!function n(a,o,l){function h(e,t){if(!o[e]){if(!a[e]){var i="function"==typeof require&&require;if(!t&&i)return i(e,!0);if(u)return u(e,!0);var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}var s=o[e]={exports:{}};a[e][0].call(s.exports,function(t){return h(a[e][1][t]||t)},s,s.exports,n,a,o,l)}return o[e].exports}for(var u="function"==typeof require&&require,t=0;t<l.length;t++)h(l[t]);return h}({1:[function(t,e,i){"use strict";var r=n(t("./controllers/QuizzController")),s=(n(t("./controllers/SoundController")),n(t("./controllers/ResultsController")));function n(t){return t&&t.__esModule?t:{default:t}}window.onload=function(){document.querySelector(".quizz")&&new r.default,document.querySelector(".results")&&new s.default}},{"./controllers/QuizzController":2,"./controllers/ResultsController":3,"./controllers/SoundController":4}],2:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var r=function(){function r(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(t,e,i){return e&&r(t.prototype,e),i&&r(t,i),t}}(),h=t("../vendor/TweenMax");var s=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.$={quizz:document.querySelector(".quizz")},this._eventListeners(),this._currentTime()}return r(t,[{key:"_eventListeners",value:function(){for(var e=this,i=this._getAnswers(),t=function(t){i[t].addEventListener("mouseenter",function(){e._handleEnterAnswer(t)}),i[t].addEventListener("mouseleave",function(){e._handleLeaveAnswer(t)}),i[t].addEventListener("click",function(){e._handleClickAnswer(t)}),i[t].addEventListener("click",function(){e._updateTime(t)})},r=0;r<i.length;r++)t(r)}},{key:"_currentTime",value:function(){var t=document.querySelector(".quizz__timebar__time"),e=t.innerHTML.substr(0,2),i=40*(e-7);console.log(i),t.style.left=i+"px",console.log(e)}},{key:"_handleEnterAnswer",value:function(t){h.TweenMax.to(this._getIllustrations()[t],.2,{scale:1,opacity:1,ease:Power1.easeOut})}},{key:"_handleLeaveAnswer",value:function(t){h.TweenMax.to(this._getIllustrations()[t],.2,{scale:0,opacity:0,ease:Power1.easeOut})}},{key:"_handleClickAnswer",value:function(t){var e=this.$.quizz.querySelector(".quizz__questions__title"),i=this.$.quizz.querySelector(".quizz__questions__desc"),r=this._getAnswers();"/resultats"==r[t].getAttribute("next")&&window.location.replace("/resultats"),(new h.TimelineMax).to(e,.2,{y:"100%",ease:Power1.easeOut}).to(i,.2,{opacity:0,ease:Power1.easeOut}).staggerTo(r,.5,{x:"100%",opacity:0,ease:Power1.easeOut},.2),this._getData(t)}},{key:"_updateTime",value:function(){var t=document.querySelector(".quizz__timebar__time"),e=t.innerHTML.substr(0,2),i=27*(e-7);console.log(i),t.style.left=i+"px",console.log(e)}},{key:"_getAnswers",value:function(){return this.$.quizz.querySelectorAll(".ref-answer")}},{key:"_getIllustrations",value:function(){return this.$.quizz.querySelectorAll(".ref-illustration")}},{key:"_getData",value:function(v){var T=this;this.isRequesting=!0;var x=new XMLHttpRequest;x.onreadystatechange=function(){if(4==x.readyState&&200==x.status){var t=document.querySelector(".ref-energy"),e=document.querySelector(".ref-hunger"),i=document.querySelector(".ref-bladder"),r=T._getAnswers()[v].getAttribute("delta-energy"),s=T._getAnswers()[v].getAttribute("delta-hunger"),n=T._getAnswers()[v].getAttribute("delta-bladder"),a=T._getAnswers()[v].getAttribute("delta-liters"),o=JSON.parse(x.responseText),l=T._getAnswers()[v].getAttribute("next"),h=parseInt(o.energy)+parseInt(r),u=parseInt(o.hunger)+parseInt(s),_=parseInt(o.bladder)+parseInt(n),c=parseInt(o.liters)+parseInt(a),f=document.querySelector(".taxo-hygiene"),p=document.querySelector(".taxo-transport"),d=document.querySelector(".taxo-technology"),m=document.querySelector(".taxo-drinkEat"),g=document.querySelector(".taxo-activities"),y={hygiene:o.termsHygiene,transport:o.termsTransport,technology:o.termsTechnology,drinkEat:o.termsDrinkEat,activities:o.termsActivities};f&&(y.hygiene=y.hygiene+parseInt(a)),p&&(y.transport=y.transport+parseInt(a)),d&&(y.technology=y.technology+parseInt(a)),m&&(y.drinkEat=y.drinkEat+parseInt(a)),g&&(y.activities=y.activities+parseInt(a)),h=(h=100<h?100:h)<0?0:h,u=(u=100<u?100:u)<0?0:u,_=(_=100<_?100:_)<0?0:_,t.setAttribute("energy",h),e.setAttribute("hunger",u),i.setAttribute("bladder",_),T._postData(l,h,u,_,c,y),T._updateFills(h,u,_)}},x.open("GET","/wp-content/themes/watertheme/api/get-data.php",!0),x.send()}},{key:"_postData",value:function(t,e,i,r,s,n){var a=this;this.isRequesting=!0;var o="/wp-content/themes/watertheme/api/post-data.php?\n      next="+t+"&\n      liters="+s+"&\n      energy="+e+"&\n      hunger="+i+"&\n      bladder="+r+"&\n      termsHygiene="+n.hygiene+"&\n      termsTransport="+n.transport+"&\n      termsTechnology="+n.technology+"&\n      termsDrinkEat="+n.drinkEat+"&\n      termsActivities="+n.activities+"\n    ",l=new XMLHttpRequest;l.onreadystatechange=function(){4==l.readyState&&200==l.status&&a._domAjaxRequest()},l.open("POST",o,!0),l.send()}},{key:"_domAjaxRequest",value:function(){var e=this;this.isRequesting=!0;var i=new XMLHttpRequest;i.onreadystatechange=function(){if(4==i.readyState&&200==i.status){var t=document.createElement("div");t.innerHTML=i.responseText;e._pushText(t,[".quizz__time",".quizz__questions__title",".quizz__questions__desc",[".quizz__questions__list__item"],[".quizz__illus__images"]]),e._pushAttributes(t,["next"])}},i.open("GET","/quizz",!0),i.send()}},{key:"_pushText",value:function(t,e){for(var i=0;i<e.length;i++)if(e[i].constructor===Array)for(var r=document.querySelectorAll(e[i]),s=t.querySelectorAll(e[i]),n=0;n<r.length;n++)r[n].innerHTML=s[n].innerHTML;else document.querySelector(e[i]).innerHTML=t.querySelector(e[i]).innerHTML;var a=this.$.quizz.querySelector(".quizz__questions__title"),o=this.$.quizz.querySelector(".quizz__questions__desc"),l=this._getAnswers();(new h.TimelineMax).fromTo(a,.2,{y:"-100%"},{y:"0%",ease:Power1.easeOut}).to(o,.2,{opacity:1,ease:Power1.easeOut}).staggerFromTo(l,.5,{x:"-100%",opacity:0},{x:"0%",opacity:1,ease:Power1.easeOut},.2)}},{key:"_pushAttributes",value:function(t,e){for(var i=this._getAnswers(),r=t.querySelectorAll(".ref-answer"),s=0;s<e.length;s++)for(var n=0;n<i.length;n++)i[n].setAttribute(e[s],r[n].getAttribute(e[s]))}},{key:"_updateFills",value:function(t,e,i){var r=document.querySelector(".ref-energy-fill"),s=document.querySelector(".ref-hunger-fill"),n=document.querySelector(".ref-bladder-fill");r.style.transform="scaleX("+t/100+")",s.style.transform="scaleX("+e/100+")",n.style.transform="scaleX("+i/100+")"}}]),t}();i.default=s},{"../vendor/TweenMax":5}],3:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var n=t("../vendor/TweenMax");i.default=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.isRequesting=!0;var s=new XMLHttpRequest;s.onreadystatechange=function(){if(4==s.readyState&&200==s.status){for(var t=JSON.parse(s.responseText),i=[t.termsHygiene,t.termsTransport,t.termsTechnology,t.termsDrinkEat,t.termsActivities],r=0,e=0;e<i.length;e++)r=i[e]<r?r:i[e];!function(){for(var t=document.querySelectorAll(".results__graph_bar__fill"),e=0;e<t.length;e++)n.TweenMax.to(t[e],.8,{scaleY:i[e]/r,ease:Power1.easeOut})}()}},s.open("GET","/wp-content/themes/watertheme/api/get-data.php",!0),s.send()}},{"../vendor/TweenMax":5}],4:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var r=function(){function r(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(t,e,i){return e&&r(t.prototype,e),i&&r(t,i),t}}();t("../vendor/TweenMax");var s=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.$={quizz:document.querySelector(".quizz")},this._soundCreate()}return r(t,[{key:"_soundCreate",value:function(){new Audio("../.../sounds/BO_WYD.mp3").play()}}]),t}();i.default=s},{"../vendor/TweenMax":5}],5:[function(t,st,e){(function(t){"use strict";var re="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},se=void 0!==st&&st.exports&&void 0!==t?t:window;(se._gsQueue||(se._gsQueue=[])).push(function(){var b,x,w,P,g,i,y,O,v,T,f,p,m,t,e,l,h,r;se._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(r,u,y){var m=function(t){var e,i=[],r=t.length;for(e=0;e!==r;i.push(t[e++]));return i},g=function(t,e,i){var r,s,n=t.cycle;for(r in n)s=n[r],t[r]="function"==typeof s?s(i,e[i]):s[i%s.length];delete t.cycle},v=function t(e,i,r){y.call(this,e,i,r),this._cycle=0,this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._repeat&&this._uncache(!0),this.render=t.prototype.render},T=1e-10,x=y._internals,w=x.isSelector,b=x.isArray,t=v.prototype=y.to({},.1,{}),P=[];v.version="2.0.2",t.constructor=v,t.kill()._gc=!1,v.killTweensOf=v.killDelayedCallsTo=y.killTweensOf,v.getTweensOf=y.getTweensOf,v.lagSmoothing=y.lagSmoothing,v.ticker=y.ticker,v.render=y.render,t.invalidate=function(){return this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._yoyoEase=null,this._uncache(!0),y.prototype.invalidate.call(this)},t.updateTo=function(t,e){var i,r=this.ratio,s=this.vars.immediateRender||t.immediateRender;for(i in e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay)),t)this.vars[i]=t[i];if(this._initted||s)if(e)this._initted=!1,s&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&y._onPluginEvent("_onDisable",this),.998<this._time/this._duration){var n=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(n,!0,!1)}else if(this._initted=!1,this._init(),0<this._time||s)for(var a,o=1/(1-r),l=this._firstPT;l;)a=l.s+l.c,l.c*=o,l.s=a-l.c,l=l._next;return this},t.render=function(t,e,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var r,s,n,a,o,l,h,u,_,c=this._dirty?this.totalDuration():this._totalDuration,f=this._time,p=this._totalTime,d=this._cycle,m=this._duration,g=this._rawPrevTime;if(c-1e-7<=t&&0<=t?(this._totalTime=c,this._cycle=this._repeat,this._yoyo&&0!=(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=m,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(r=!0,s="onComplete",i=i||this._timeline.autoRemoveChildren),0===m&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(g<0||t<=0&&-1e-7<=t||g===T&&"isPause"!==this.data)&&g!==t&&(i=!0,T<g&&(s="onReverseComplete")),this._rawPrevTime=u=!e||t||g===t?t:T)):t<1e-7?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==p||0===m&&0<g)&&(s="onReverseComplete",r=this._reversed),t<0&&(this._active=!1,0===m&&(this._initted||!this.vars.lazy||i)&&(0<=g&&(i=!0),this._rawPrevTime=u=!e||t||g===t?t:T)),this._initted||(i=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(a=m+this._repeatDelay,this._cycle=this._totalTime/a>>0,0!==this._cycle&&this._cycle===this._totalTime/a&&p<=t&&this._cycle--,this._time=this._totalTime-this._cycle*a,this._yoyo&&0!=(1&this._cycle)&&(this._time=m-this._time,(_=this._yoyoEase||this.vars.yoyoEase)&&(this._yoyoEase||(!0!==_||this._initted?this._yoyoEase=_=!0===_?this._ease:_ instanceof Ease?_:Ease.map[_]:(_=this.vars.ease,this._yoyoEase=_=_?_ instanceof Ease?_:"function"==typeof _?new Ease(_,this.vars.easeParams):Ease.map[_]||y.defaultEase:y.defaultEase)),this.ratio=_?1-_.getRatio((m-this._time)/m):0)),this._time>m?this._time=m:this._time<0&&(this._time=0)),this._easeType&&!_?(o=this._time/m,(1===(l=this._easeType)||3===l&&.5<=o)&&(o=1-o),3===l&&(o*=2),1===(h=this._easePower)?o*=o:2===h?o*=o*o:3===h?o*=o*o*o:4===h&&(o*=o*o*o*o),1===l?this.ratio=1-o:2===l?this.ratio=o:this._time/m<.5?this.ratio=o/2:this.ratio=1-o/2):_||(this.ratio=this._ease.getRatio(this._time/m))),f!==this._time||i||d!==this._cycle){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=f,this._totalTime=p,this._rawPrevTime=g,this._cycle=d,x.lazyTweens.push(this),void(this._lazy=[t,e]);!this._time||r||_?r&&this._ease._calcEnd&&!_&&(this.ratio=this._ease.getRatio(0===this._time?0:1)):this.ratio=this._ease.getRatio(this._time/m)}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==f&&0<=t&&(this._active=!0),0===p&&(2===this._initted&&0<t&&this._init(),this._startAt&&(0<=t?this._startAt.render(t,!0,i):s||(s="_dummyGS")),this.vars.onStart&&(0===this._totalTime&&0!==m||e||this._callback("onStart"))),n=this._firstPT;n;)n.f?n.t[n.p](n.c*this.ratio+n.s):n.t[n.p]=n.c*this.ratio+n.s,n=n._next;this._onUpdate&&(t<0&&this._startAt&&this._startTime&&this._startAt.render(t,!0,i),e||(this._totalTime!==p||s)&&this._callback("onUpdate")),this._cycle!==d&&(e||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),s&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,!0,i),r&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[s]&&this._callback(s),0===m&&this._rawPrevTime===T&&u!==T&&(this._rawPrevTime=0)))}else p!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},v.to=function(t,e,i){return new v(t,e,i)},v.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new v(t,e,i)},v.fromTo=function(t,e,i,r){return r.startAt=i,r.immediateRender=0!=r.immediateRender&&0!=i.immediateRender,new v(t,e,r)},v.staggerTo=v.allTo=function(t,e,i,r,s,n,a){r=r||0;var o,l,h,u,_=0,c=[],f=function(){i.onComplete&&i.onComplete.apply(i.onCompleteScope||this,arguments),s.apply(a||i.callbackScope||this,n||P)},p=i.cycle,d=i.startAt&&i.startAt.cycle;for(b(t)||("string"==typeof t&&(t=y.selector(t)||t),w(t)&&(t=m(t))),t=t||[],r<0&&((t=m(t)).reverse(),r*=-1),o=t.length-1,h=0;h<=o;h++){for(u in l={},i)l[u]=i[u];if(p&&(g(l,t,h),null!=l.duration&&(e=l.duration,delete l.duration)),d){for(u in d=l.startAt={},i.startAt)d[u]=i.startAt[u];g(l.startAt,t,h)}l.delay=_+(l.delay||0),h===o&&s&&(l.onComplete=f),c[h]=new v(t[h],e,l),_+=r}return c},v.staggerFrom=v.allFrom=function(t,e,i,r,s,n,a){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,v.staggerTo(t,e,i,r,s,n,a)},v.staggerFromTo=v.allFromTo=function(t,e,i,r,s,n,a,o){return r.startAt=i,r.immediateRender=0!=r.immediateRender&&0!=i.immediateRender,v.staggerTo(t,e,r,s,n,a,o)},v.delayedCall=function(t,e,i,r,s){return new v(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:r,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,useFrames:s,overwrite:0})},v.set=function(t,e){return new v(t,0,e)},v.isTweening=function(t){return 0<y.getTweensOf(t,!0).length};var e=function t(e,i){for(var r=[],s=0,n=e._first;n;)n instanceof y?r[s++]=n:(i&&(r[s++]=n),s=(r=r.concat(t(n,i))).length),n=n._next;return r},_=v.getAllTweens=function(t){return e(r._rootTimeline,t).concat(e(r._rootFramesTimeline,t))};v.killAll=function(t,e,i,r){null==e&&(e=!0),null==i&&(i=!0);var s,n,a,o=_(0!=r),l=o.length,h=e&&i&&r;for(a=0;a<l;a++)n=o[a],(h||n instanceof u||(s=n.target===n.vars.onComplete)&&i||e&&!s)&&(t?n.totalTime(n._reversed?0:n.totalDuration()):n._enabled(!1,!1))},v.killChildTweensOf=function(t,e){if(null!=t){var i,r,s,n,a,o=x.tweenLookup;if("string"==typeof t&&(t=y.selector(t)||t),w(t)&&(t=m(t)),b(t))for(n=t.length;-1<--n;)v.killChildTweensOf(t[n],e);else{for(s in i=[],o)for(r=o[s].target.parentNode;r;)r===t&&(i=i.concat(o[s].tweens)),r=r.parentNode;for(a=i.length,n=0;n<a;n++)e&&i[n].totalTime(i[n].totalDuration()),i[n]._enabled(!1,!1)}}};var s=function(t,e,i,r){e=!1!==e,i=!1!==i;for(var s,n,a=_(r=!1!==r),o=e&&i&&r,l=a.length;-1<--l;)n=a[l],(o||n instanceof u||(s=n.target===n.vars.onComplete)&&i||e&&!s)&&n.paused(t)};return v.pauseAll=function(t,e,i){s(!0,t,e,i)},v.resumeAll=function(t,e,i){s(!1,t,e,i)},v.globalTimeScale=function(t){var e=r._rootTimeline,i=y.ticker.time;return arguments.length?(t=t||T,e._startTime=i-(i-e._startTime)*e._timeScale/t,e=r._rootFramesTimeline,i=y.ticker.frame,e._startTime=i-(i-e._startTime)*e._timeScale/t,e._timeScale=r._rootTimeline._timeScale=t,t):e._timeScale},t.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},t.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},t.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},t.duration=function(t){return arguments.length?r.prototype.duration.call(this,t):this._duration},t.totalDuration=function(t){return arguments.length?-1===this._repeat?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},t.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},t.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},t.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},v},!0),se._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(u,_,c){var f=function(t){_.call(this,t),this._labels={},this.autoRemoveChildren=!0===this.vars.autoRemoveChildren,this.smoothChildTiming=!0===this.vars.smoothChildTiming,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var e,i,r=this.vars;for(i in r)e=r[i],m(e)&&-1!==e.join("").indexOf("{self}")&&(r[i]=this._swapSelfInParams(e));m(r.tweens)&&this.add(r.tweens,0,r.align,r.stagger)},d=1e-10,t=c._internals,e=f._internals={},p=t.isSelector,m=t.isArray,g=t.lazyTweens,y=t.lazyRender,a=se._gsDefine.globals,v=function(t){var e,i={};for(e in t)i[e]=t[e];return i},T=function(t,e,i){var r,s,n=t.cycle;for(r in n)s=n[r],t[r]="function"==typeof s?s(i,e[i]):s[i%s.length];delete t.cycle},n=e.pauseCallback=function(){},x=function(t){var e,i=[],r=t.length;for(e=0;e!==r;i.push(t[e++]));return i},i=f.prototype=new _;return f.version="2.0.2",i.constructor=f,i.kill()._gc=i._forcingPlayhead=i._hasPause=!1,i.to=function(t,e,i,r){var s=i.repeat&&a.TweenMax||c;return e?this.add(new s(t,e,i),r):this.set(t,i,r)},i.from=function(t,e,i,r){return this.add((i.repeat&&a.TweenMax||c).from(t,e,i),r)},i.fromTo=function(t,e,i,r,s){var n=r.repeat&&a.TweenMax||c;return e?this.add(n.fromTo(t,e,i,r),s):this.set(t,r,s)},i.staggerTo=function(t,e,i,r,s,n,a,o){var l,h,u=new f({onComplete:n,onCompleteParams:a,callbackScope:o,smoothChildTiming:this.smoothChildTiming}),_=i.cycle;for("string"==typeof t&&(t=c.selector(t)||t),p(t=t||[])&&(t=x(t)),(r=r||0)<0&&((t=x(t)).reverse(),r*=-1),h=0;h<t.length;h++)(l=v(i)).startAt&&(l.startAt=v(l.startAt),l.startAt.cycle&&T(l.startAt,t,h)),_&&(T(l,t,h),null!=l.duration&&(e=l.duration,delete l.duration)),u.to(t[h],e,l,h*r);return this.add(u,s)},i.staggerFrom=function(t,e,i,r,s,n,a,o){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,r,s,n,a,o)},i.staggerFromTo=function(t,e,i,r,s,n,a,o,l){return r.startAt=i,r.immediateRender=0!=r.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,r,s,n,a,o,l)},i.call=function(t,e,i,r){return this.add(c.delayedCall(0,t,e,i),r)},i.set=function(t,e,i){return i=this._parseTimeOrLabel(i,0,!0),null==e.immediateRender&&(e.immediateRender=i===this._time&&!this._paused),this.add(new c(t,0,e),i)},f.exportRoot=function(t,e){null==(t=t||{}).smoothChildTiming&&(t.smoothChildTiming=!0);var i,r,s,n,a=new f(t),o=a._timeline;for(null==e&&(e=!0),o._remove(a,!0),a._startTime=0,a._rawPrevTime=a._time=a._totalTime=o._time,s=o._first;s;)n=s._next,e&&s instanceof c&&s.target===s.vars.onComplete||((r=s._startTime-s._delay)<0&&(i=1),a.add(s,r)),s=n;return o.add(a,0),i&&a.totalDuration(),a},i.add=function(t,e,i,r){var s,n,a,o,l,h;if("number"!=typeof e&&(e=this._parseTimeOrLabel(e,0,!0,t)),!(t instanceof u)){if(t instanceof Array||t&&t.push&&m(t)){for(i=i||"normal",r=r||0,s=e,n=t.length,a=0;a<n;a++)m(o=t[a])&&(o=new f({tweens:o})),this.add(o,s),"string"!=typeof o&&"function"!=typeof o&&("sequence"===i?s=o._startTime+o.totalDuration()/o._timeScale:"start"===i&&(o._startTime-=o.delay())),s+=r;return this._uncache(!0)}if("string"==typeof t)return this.addLabel(t,e);if("function"!=typeof t)throw"Cannot add "+t+" into the timeline; it is not a tween, timeline, function, or string.";t=c.delayedCall(0,t)}if(_.prototype.add.call(this,t,e),t._time&&(s=Math.max(0,Math.min(t.totalDuration(),(this.rawTime()-t._startTime)*t._timeScale)),1e-5<Math.abs(s-t._totalTime)&&t.render(s,!1,!1)),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(h=(l=this).rawTime()>t._startTime;l._timeline;)h&&l._timeline.smoothChildTiming?l.totalTime(l._totalTime,!0):l._gc&&l._enabled(!0,!1),l=l._timeline;return this},i.remove=function(t){if(t instanceof u){this._remove(t,!1);var e=t._timeline=t.vars.useFrames?u._rootFramesTimeline:u._rootTimeline;return t._startTime=(t._paused?t._pauseTime:e._time)-(t._reversed?t.totalDuration()-t._totalTime:t._totalTime)/t._timeScale,this}if(t instanceof Array||t&&t.push&&m(t)){for(var i=t.length;-1<--i;)this.remove(t[i]);return this}return"string"==typeof t?this.removeLabel(t):this.kill(null,t)},i._remove=function(t,e){return _.prototype._remove.call(this,t,e),this._last?this._time>this.duration()&&(this._time=this._duration,this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},i.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},i.insert=i.insertMultiple=function(t,e,i,r){return this.add(t,e||0,i,r)},i.appendMultiple=function(t,e,i,r){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,r)},i.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},i.addPause=function(t,e,i,r){var s=c.delayedCall(0,n,i,r||this);return s.vars.onComplete=s.vars.onReverseComplete=e,s.data="isPause",this._hasPause=!0,this.add(s,t)},i.removeLabel=function(t){return delete this._labels[t],this},i.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},i._parseTimeOrLabel=function(t,e,i,r){var s,n;if(r instanceof u&&r.timeline===this)this.remove(r);else if(r&&(r instanceof Array||r.push&&m(r)))for(n=r.length;-1<--n;)r[n]instanceof u&&r[n].timeline===this&&this.remove(r[n]);if(s="number"!=typeof t||e?99999999999<this.duration()?this.recent().endTime(!1):this._duration:0,"string"==typeof e)return this._parseTimeOrLabel(e,i&&"number"==typeof t&&null==this._labels[e]?t-s:0,i);if(e=e||0,"string"!=typeof t||!isNaN(t)&&null==this._labels[t])null==t&&(t=s);else{if(-1===(n=t.indexOf("=")))return null==this._labels[t]?i?this._labels[t]=s+e:e:this._labels[t]+e;e=parseInt(t.charAt(n-1)+"1",10)*Number(t.substr(n+1)),t=1<n?this._parseTimeOrLabel(t.substr(0,n-1),0,i):s}return Number(t)+e},i.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),!1!==e)},i.stop=function(){return this.paused(!0)},i.gotoAndPlay=function(t,e){return this.play(t,e)},i.gotoAndStop=function(t,e){return this.pause(t,e)},i.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var r,s,n,a,o,l,h,u=this._time,_=this._dirty?this.totalDuration():this._totalDuration,c=this._startTime,f=this._timeScale,p=this._paused;if(u!==this._time&&(t+=this._time-u),_-1e-7<=t&&0<=t)this._totalTime=this._time=_,this._reversed||this._hasPausedChild()||(s=!0,a="onComplete",o=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&-1e-7<=t||this._rawPrevTime<0||this._rawPrevTime===d)&&this._rawPrevTime!==t&&this._first&&(o=!0,this._rawPrevTime>d&&(a="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:d,t=_+1e-4;else if(t<1e-7)if(this._totalTime=this._time=0,(0!==u||0===this._duration&&this._rawPrevTime!==d&&(0<this._rawPrevTime||t<0&&0<=this._rawPrevTime))&&(a="onReverseComplete",s=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(o=s=!0,a="onReverseComplete"):0<=this._rawPrevTime&&this._first&&(o=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:d,0===t&&s)for(r=this._first;r&&0===r._startTime;)r._duration||(s=!1),r=r._next;t=0,this._initted||(o=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!e){if(u<=t)for(r=this._first;r&&r._startTime<=t&&!l;)r._duration||"isPause"!==r.data||r.ratio||0===r._startTime&&0===this._rawPrevTime||(l=r),r=r._next;else for(r=this._last;r&&r._startTime>=t&&!l;)r._duration||"isPause"===r.data&&0<r._rawPrevTime&&(l=r),r=r._prev;l&&(this._time=t=l._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=t}if(this._time!==u&&this._first||i||o||l){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==u&&0<t&&(this._active=!0),0===u&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),u<=(h=this._time))for(r=this._first;r&&(n=r._next,h===this._time&&(!this._paused||p));)(r._active||r._startTime<=h&&!r._paused&&!r._gc)&&(l===r&&this.pause(),r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=n;else for(r=this._last;r&&(n=r._prev,h===this._time&&(!this._paused||p));){if(r._active||r._startTime<=u&&!r._paused&&!r._gc){if(l===r){for(l=r._prev;l&&l.endTime()>this._time;)l.render(l._reversed?l.totalDuration()-(t-l._startTime)*l._timeScale:(t-l._startTime)*l._timeScale,e,i),l=l._prev;l=null,this.pause()}r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)}r=n}this._onUpdate&&(e||(g.length&&y(),this._callback("onUpdate"))),a&&(this._gc||c!==this._startTime&&f===this._timeScale||(0===this._time||_>=this.totalDuration())&&(s&&(g.length&&y(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[a]&&this._callback(a)))}},i._hasPausedChild=function(){for(var t=this._first;t;){if(t._paused||t instanceof f&&t._hasPausedChild())return!0;t=t._next}return!1},i.getChildren=function(t,e,i,r){r=r||-9999999999;for(var s=[],n=this._first,a=0;n;)n._startTime<r||(n instanceof c?!1!==e&&(s[a++]=n):(!1!==i&&(s[a++]=n),!1!==t&&(a=(s=s.concat(n.getChildren(!0,e,i))).length))),n=n._next;return s},i.getTweensOf=function(t,e){var i,r,s=this._gc,n=[],a=0;for(s&&this._enabled(!0,!0),r=(i=c.getTweensOf(t)).length;-1<--r;)(i[r].timeline===this||e&&this._contains(i[r]))&&(n[a++]=i[r]);return s&&this._enabled(!1,!0),n},i.recent=function(){return this._recent},i._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},i.shiftChildren=function(t,e,i){i=i||0;for(var r,s=this._first,n=this._labels;s;)s._startTime>=i&&(s._startTime+=t),s=s._next;if(e)for(r in n)n[r]>=i&&(n[r]+=t);return this._uncache(!0)},i._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),r=i.length,s=!1;-1<--r;)i[r]._kill(t,e)&&(s=!0);return s},i.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;-1<--i;)e[i]._enabled(!1,!1);return!1!==t&&(this._labels={}),this._uncache(!0)},i.invalidate=function(){for(var t=this._first;t;)t.invalidate(),t=t._next;return u.prototype.invalidate.call(this)},i._enabled=function(t,e){if(t===this._gc)for(var i=this._first;i;)i._enabled(t,!0),i=i._next;return _.prototype._enabled.call(this,t,e)},i.totalTime=function(t,e,i){this._forcingPlayhead=!0;var r=u.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,r},i.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},i.totalDuration=function(t){if(arguments.length)return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this;if(this._dirty){for(var e,i,r=0,s=this._last,n=999999999999;s;)e=s._prev,s._dirty&&s.totalDuration(),s._startTime>n&&this._sortChildren&&!s._paused&&!this._calculatingDuration?(this._calculatingDuration=1,this.add(s,s._startTime-s._delay),this._calculatingDuration=0):n=s._startTime,s._startTime<0&&!s._paused&&(r-=s._startTime,this._timeline.smoothChildTiming&&(this._startTime+=s._startTime/this._timeScale,this._time-=s._startTime,this._totalTime-=s._startTime,this._rawPrevTime-=s._startTime),this.shiftChildren(-s._startTime,!1,-9999999999),n=0),r<(i=s._startTime+s._totalDuration/s._timeScale)&&(r=i),s=e;this._duration=this._totalDuration=r,this._dirty=!1}return this._totalDuration},i.paused=function(t){if(!t)for(var e=this._first,i=this._time;e;)e._startTime===i&&"isPause"===e.data&&(e._rawPrevTime=0),e=e._next;return u.prototype.paused.apply(this,arguments)},i.usesFrames=function(){for(var t=this._timeline;t._timeline;)t=t._timeline;return t===u._rootFramesTimeline},i.rawTime=function(t){return t&&(this._paused||this._repeat&&0<this.time()&&this.totalProgress()<1)?this._totalTime%(this._duration+this._repeatDelay):this._paused?this._totalTime:(this._timeline.rawTime(t)-this._startTime)*this._timeScale},f},!0),se._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(e,o,t){var i=function(t){e.call(this,t),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=!0===this.vars.yoyo,this._dirty=!0},S=1e-10,r=o._internals,k=r.lazyTweens,A=r.lazyRender,l=se._gsDefine.globals,h=new t(null,null,1,0),s=i.prototype=new e;return s.constructor=i,s.kill()._gc=!1,i.version="2.0.2",s.invalidate=function(){return this._yoyo=!0===this.vars.yoyo,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),e.prototype.invalidate.call(this)},s.addCallback=function(t,e,i,r){return this.add(o.delayedCall(0,t,i,r),e)},s.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),r=i.length,s=this._parseTimeOrLabel(e);-1<--r;)i[r]._startTime===s&&i[r]._enabled(!1,!1);return this},s.removePause=function(t){return this.removeCallback(e._internals.pauseCallback,t)},s.tweenTo=function(t,e){e=e||{};var i,r,s,n={ease:h,useFrames:this.usesFrames(),immediateRender:!1,lazy:!1},a=e.repeat&&l.TweenMax||o;for(r in e)n[r]=e[r];return n.time=this._parseTimeOrLabel(t),i=Math.abs(Number(n.time)-this._time)/this._timeScale||.001,s=new a(this,i,n),n.onStart=function(){s.target.paused(!0),s.vars.time===s.target.time()||i!==s.duration()||s.isFromTo||s.duration(Math.abs(s.vars.time-s.target.time())/s.target._timeScale).render(s.time(),!0,!0),e.onStart&&e.onStart.apply(e.onStartScope||e.callbackScope||s,e.onStartParams||[])},s},s.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=!1!==i.immediateRender;var r=this.tweenTo(e,i);return r.isFromTo=1,r.duration(Math.abs(r.vars.time-t)/this._timeScale||.001)},s.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var r,s,n,a,o,l,h,u,_=this._time,c=this._dirty?this.totalDuration():this._totalDuration,f=this._duration,p=this._totalTime,d=this._startTime,m=this._timeScale,g=this._rawPrevTime,y=this._paused,v=this._cycle;if(_!==this._time&&(t+=this._time-_),c-1e-7<=t&&0<=t)this._locked||(this._totalTime=c,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(s=!0,a="onComplete",o=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&-1e-7<=t||g<0||g===S)&&g!==t&&this._first&&(o=!0,S<g&&(a="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:S,this._yoyo&&0!=(1&this._cycle)?this._time=t=0:t=(this._time=f)+1e-4;else if(t<1e-7)if(this._locked||(this._totalTime=this._cycle=0),((this._time=0)!==_||0===f&&g!==S&&(0<g||t<0&&0<=g)&&!this._locked)&&(a="onReverseComplete",s=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(o=s=!0,a="onReverseComplete"):0<=g&&this._first&&(o=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=f||!e||t||this._rawPrevTime===t?t:S,0===t&&s)for(r=this._first;r&&0===r._startTime;)r._duration||(s=!1),r=r._next;t=0,this._initted||(o=!0)}else if(0===f&&g<0&&(o=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(l=f+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&p<=t&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!=(1&this._cycle)&&(this._time=f-this._time),this._time>f?t=(this._time=f)+1e-4:this._time<0?this._time=t=0:t=this._time)),this._hasPause&&!this._forcingPlayhead&&!e){if(_<=(t=this._time)||this._repeat&&v!==this._cycle)for(r=this._first;r&&r._startTime<=t&&!h;)r._duration||"isPause"!==r.data||r.ratio||0===r._startTime&&0===this._rawPrevTime||(h=r),r=r._next;else for(r=this._last;r&&r._startTime>=t&&!h;)r._duration||"isPause"===r.data&&0<r._rawPrevTime&&(h=r),r=r._prev;h&&h._startTime<f&&(this._time=t=h._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==v&&!this._locked){var T=this._yoyo&&0!=(1&v),x=T===(this._yoyo&&0!=(1&this._cycle)),w=this._totalTime,b=this._cycle,P=this._rawPrevTime,O=this._time;if(this._totalTime=v*f,this._cycle<v?T=!T:this._totalTime+=f,this._time=_,this._rawPrevTime=0===f?g-1e-4:g,this._cycle=v,this._locked=!0,_=T?0:f,this.render(_,e,0===f),e||this._gc||this.vars.onRepeat&&(this._cycle=b,this._locked=!1,this._callback("onRepeat")),_!==this._time)return;if(x&&(this._cycle=v,this._locked=!0,_=T?f+1e-4:-1e-4,this.render(_,!0,!1)),this._locked=!1,this._paused&&!y)return;this._time=O,this._totalTime=w,this._cycle=b,this._rawPrevTime=P}if(this._time!==_&&this._first||i||o||h){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==p&&0<t&&(this._active=!0),0===p&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),_<=(u=this._time))for(r=this._first;r&&(n=r._next,u===this._time&&(!this._paused||y));)(r._active||r._startTime<=this._time&&!r._paused&&!r._gc)&&(h===r&&this.pause(),r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=n;else for(r=this._last;r&&(n=r._prev,u===this._time&&(!this._paused||y));){if(r._active||r._startTime<=_&&!r._paused&&!r._gc){if(h===r){for(h=r._prev;h&&h.endTime()>this._time;)h.render(h._reversed?h.totalDuration()-(t-h._startTime)*h._timeScale:(t-h._startTime)*h._timeScale,e,i),h=h._prev;h=null,this.pause()}r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)}r=n}this._onUpdate&&(e||(k.length&&A(),this._callback("onUpdate"))),a&&(this._locked||this._gc||d!==this._startTime&&m===this._timeScale||(0===this._time||c>=this.totalDuration())&&(s&&(k.length&&A(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[a]&&this._callback(a)))}else p!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},s.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var r,s,n=[],a=this.getChildren(t,e,i),o=0,l=a.length;for(r=0;r<l;r++)(s=a[r]).isActive()&&(n[o++]=s);return n},s.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),r=i.length;for(e=0;e<r;e++)if(i[e].time>t)return i[e].name;return null},s.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;-1<--i;)if(e[i].time<t)return e[i].name;return null},s.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},s.invalidate=function(){return this._locked=!1,e.prototype.invalidate.call(this)},s.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()||0},s.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()||0},s.totalDuration=function(t){return arguments.length?-1!==this._repeat&&t?this.timeScale(this.totalDuration()/t):this:(this._dirty&&(e.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},s.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},s.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},s.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},s.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},s.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},i},!0),b=180/Math.PI,x=[],w=[],P=[],g={},i=se._gsDefine.globals,y=function(t,e,i,r){i===r&&(i=r-(r-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=r,this.da=r-t,this.ca=i-t,this.ba=e-t},O=function(t,e,i,r){var s={a:t},n={},a={},o={c:r},l=(t+e)/2,h=(e+i)/2,u=(i+r)/2,_=(l+h)/2,c=(h+u)/2,f=(c-_)/8;return s.b=l+(t-l)/4,n.b=_+f,s.c=n.a=(s.b+n.b)/2,n.c=a.a=(_+c)/2,a.b=c-f,o.b=u+(r-u)/4,a.c=o.a=(a.b+o.b)/2,[s,n,a,o]},v=function(t,e,i,r,s){var n,a,o,l,h,u,_,c,f,p,d,m,g,y=t.length-1,v=0,T=t[0].a;for(n=0;n<y;n++)a=(h=t[v]).a,o=h.d,l=t[v+1].d,c=s?(d=x[n],g=((m=w[n])+d)*e*.25/(r?.5:P[n]||.5),o-((u=o-(o-a)*(r?.5*e:0!==d?g/d:0))+(((_=o+(l-o)*(r?.5*e:0!==m?g/m:0))-u)*(3*d/(d+m)+.5)/4||0))):o-((u=o-(o-a)*e*.5)+(_=o+(l-o)*e*.5))/2,u+=c,_+=c,h.c=f=u,h.b=0!==n?T:T=h.a+.6*(h.c-h.a),h.da=o-a,h.ca=f-a,h.ba=T-a,i?(p=O(a,T,f,o),t.splice(v,1,p[0],p[1],p[2],p[3]),v+=4):v++,T=_;(h=t[v]).b=T,h.c=T+.4*(h.d-T),h.da=h.d-h.a,h.ca=h.c-h.a,h.ba=T-h.a,i&&(p=O(h.a,T,h.c,h.d),t.splice(v,1,p[0],p[1],p[2],p[3]))},T=function(t,e,i,r){var s,n,a,o,l,h,u=[];if(r)for(n=(t=[r].concat(t)).length;-1<--n;)"string"==typeof(h=t[n][e])&&"="===h.charAt(1)&&(t[n][e]=r[e]+Number(h.charAt(0)+h.substr(2)));if((s=t.length-2)<0)return u[0]=new y(t[0][e],0,0,t[0][e]),u;for(n=0;n<s;n++)a=t[n][e],o=t[n+1][e],u[n]=new y(a,0,0,o),i&&(l=t[n+2][e],x[n]=(x[n]||0)+(o-a)*(o-a),w[n]=(w[n]||0)+(l-o)*(l-o));return u[n]=new y(t[n][e],0,0,t[n+1][e]),u},f=function(t,e,i,r,s,n){var a,o,l,h,u,_,c,f,p={},d=[],m=n||t[0];for(o in s="string"==typeof s?","+s+",":",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",null==e&&(e=1),t[0])d.push(o);if(1<t.length){for(f=t[t.length-1],c=!0,a=d.length;-1<--a;)if(o=d[a],.05<Math.abs(m[o]-f[o])){c=!1;break}c&&(t=t.concat(),n&&t.unshift(n),t.push(t[1]),n=t[t.length-3])}for(x.length=w.length=P.length=0,a=d.length;-1<--a;)o=d[a],g[o]=-1!==s.indexOf(","+o+","),p[o]=T(t,o,g[o],n);for(a=x.length;-1<--a;)x[a]=Math.sqrt(x[a]),w[a]=Math.sqrt(w[a]);if(!r){for(a=d.length;-1<--a;)if(g[o])for(_=(l=p[d[a]]).length-1,h=0;h<_;h++)u=l[h+1].da/w[h]+l[h].da/x[h]||0,P[h]=(P[h]||0)+u*u;for(a=P.length;-1<--a;)P[a]=Math.sqrt(P[a])}for(a=d.length,h=i?4:1;-1<--a;)l=p[o=d[a]],v(l,e,i,r,g[o]),c&&(l.splice(0,h),l.splice(l.length-h,h));return p},p=function(t,e,i){for(var r,s,n,a,o,l,h,u,_,c,f,p=1/i,d=t.length;-1<--d;)for(n=(c=t[d]).a,a=c.d-n,o=c.c-n,l=c.b-n,r=s=0,u=1;u<=i;u++)r=s-(s=((h=p*u)*h*a+3*(_=1-h)*(h*o+_*l))*h),e[f=d*i+u-1]=(e[f]||0)+r*r},m=se._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.8",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._mod={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var r,s,n,a,o,l=e.values||[],h={},u=l[0],_=e.autoRotate||i.vars.orientToBezier;for(r in this._autoRotate=_?_ instanceof Array?_:[["x","y","rotation",!0===_?0:Number(_)||0]]:null,u)this._props.push(r);for(n=this._props.length;-1<--n;)r=this._props[n],this._overwriteProps.push(r),s=this._func[r]="function"==typeof t[r],h[r]=s?t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]():parseFloat(t[r]),o||h[r]!==l[0][r]&&(o=h);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?f(l,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,o):function(t,e,i){var r,s,n,a,o,l,h,u,_,c,f,p={},d="cubic"===(e=e||"soft")?3:2,m="soft"===e,g=[];if(m&&i&&(t=[i].concat(t)),null==t||t.length<d+1)throw"invalid Bezier data";for(_ in t[0])g.push(_);for(l=g.length;-1<--l;){for(p[_=g[l]]=o=[],c=0,u=t.length,h=0;h<u;h++)r=null==i?t[h][_]:"string"==typeof(f=t[h][_])&&"="===f.charAt(1)?i[_]+Number(f.charAt(0)+f.substr(2)):Number(f),m&&1<h&&h<u-1&&(o[c++]=(r+o[c-2])/2),o[c++]=r;for(u=c-d+1,h=c=0;h<u;h+=d)r=o[h],s=o[h+1],n=o[h+2],a=2===d?0:o[h+3],o[c++]=f=3===d?new y(r,s,n,a):new y(r,(2*s+r)/3,(2*s+n)/3,n);o.length=c}return p}(l,e.type,h),this._segCount=this._beziers[r].length,this._timeRes){var c=function(t,e){var i,r,s,n,a=[],o=[],l=0,h=0,u=(e=e>>0||6)-1,_=[],c=[];for(i in t)p(t[i],a,e);for(s=a.length,r=0;r<s;r++)l+=Math.sqrt(a[r]),c[n=r%e]=l,n===u&&(h+=l,_[n=r/e>>0]=c,o[n]=h,l=0,c=[]);return{length:h,lengths:o,segments:_}}(this._beziers,this._timeRes);this._length=c.length,this._lengths=c.lengths,this._segments=c.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(_=this._autoRotate)for(this._initialRotations=[],_[0]instanceof Array||(this._autoRotate=_=[_]),n=_.length;-1<--n;){for(a=0;a<3;a++)r=_[n][a],this._func[r]="function"==typeof t[r]&&t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)];r=_[n][2],this._initialRotations[n]=(this._func[r]?this._func[r].call(this._target):this._target[r])||0,this._overwriteProps.push(r)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(t){var e,i,r,s,n,a,o,l,h,u,_=this._segCount,c=this._func,f=this._target,p=t!==this._startRatio;if(this._timeRes){if(h=this._lengths,u=this._curSeg,t*=this._length,r=this._li,t>this._l2&&r<_-1){for(l=_-1;r<l&&(this._l2=h[++r])<=t;);this._l1=h[r-1],this._li=r,this._curSeg=u=this._segments[r],this._s2=u[this._s1=this._si=0]}else if(t<this._l1&&0<r){for(;0<r&&(this._l1=h[--r])>=t;);0===r&&t<this._l1?this._l1=0:r++,this._l2=h[r],this._li=r,this._curSeg=u=this._segments[r],this._s1=u[(this._si=u.length-1)-1]||0,this._s2=u[this._si]}if(e=r,t-=this._l1,r=this._si,t>this._s2&&r<u.length-1){for(l=u.length-1;r<l&&(this._s2=u[++r])<=t;);this._s1=u[r-1],this._si=r}else if(t<this._s1&&0<r){for(;0<r&&(this._s1=u[--r])>=t;);0===r&&t<this._s1?this._s1=0:r++,this._s2=u[r],this._si=r}a=(r+(t-this._s1)/(this._s2-this._s1))*this._prec||0}else a=(t-(e=t<0?0:1<=t?_-1:_*t>>0)*(1/_))*_;for(i=1-a,r=this._props.length;-1<--r;)s=this._props[r],o=(a*a*(n=this._beziers[s][e]).da+3*i*(a*n.ca+i*n.ba))*a+n.a,this._mod[s]&&(o=this._mod[s](o,f)),c[s]?f[s](o):f[s]=o;if(this._autoRotate){var d,m,g,y,v,T,x,w=this._autoRotate;for(r=w.length;-1<--r;)s=w[r][2],T=w[r][3]||0,x=!0===w[r][4]?1:b,n=this._beziers[w[r][0]],d=this._beziers[w[r][1]],n&&d&&(n=n[e],d=d[e],m=n.a+(n.b-n.a)*a,m+=((y=n.b+(n.c-n.b)*a)-m)*a,y+=(n.c+(n.d-n.c)*a-y)*a,g=d.a+(d.b-d.a)*a,g+=((v=d.b+(d.c-d.b)*a)-g)*a,v+=(d.c+(d.d-d.c)*a-v)*a,o=p?Math.atan2(v-g,y-m)*x+T:this._initialRotations[r],this._mod[s]&&(o=this._mod[s](o,f)),c[s]?f[s](o):f[s]=o)}}}),t=m.prototype,m.bezierThrough=f,m.cubicToQuadratic=O,m._autoCSS=!0,m.quadraticToCubic=function(t,e,i){return new y(t,(2*e+t)/3,(2*e+i)/3,i)},m._cssRegister=function(){var t=i.CSSPlugin;if(t){var e=t._internals,f=e._parseToProxy,p=e._setPluginRatio,d=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,i,r,s,n){e instanceof Array&&(e={values:e}),n=new m;var a,o,l,h=e.values,u=h.length-1,_=[],c={};if(u<0)return s;for(a=0;a<=u;a++)l=f(t,h[a],r,s,n,u!==a),_[a]=l.end;for(o in e)c[o]=e[o];return c.values=_,(s=new d(t,"bezier",0,0,l.pt,2)).data=l,s.plugin=n,s.setRatio=p,0===c.autoRotate&&(c.autoRotate=!0),!c.autoRotate||c.autoRotate instanceof Array||(a=!0===c.autoRotate?0:Number(c.autoRotate),c.autoRotate=null!=l.end.left?[["left","top","rotation",a,!1]]:null!=l.end.x&&[["x","y","rotation",a,!1]]),c.autoRotate&&(r._transform||r._enableTransforms(!1),l.autoRotate=r._target._gsTransform,l.proxy.rotation=l.autoRotate.rotation||0,r._overwriteProps.push("rotation")),n._onInitTween(l.proxy,c,r._tween),s}})}},t._mod=function(t){for(var e,i=this._overwriteProps,r=i.length;-1<--r;)(e=t[i[r]])&&"function"==typeof e&&(this._mod[i[r]]=e)},t._kill=function(t){var e,i,r=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=r.length;-1<--i;)r[i]===e&&r.splice(i,1);if(r=this._autoRotate)for(i=r.length;-1<--i;)t[r[i][2]]&&r.splice(i,1);return this._super._kill.call(this,t)},se._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(n,N){var p,P,S,d,B=function t(){n.call(this,"css"),this._overwriteProps.length=0,this.setRatio=t.prototype.setRatio},h=se._gsDefine.globals,m={},t=B.prototype=new n("css");(t.constructor=B).version="2.0.2",B.API=2,B.defaultTransformPerspective=0,B.defaultSkewType="compensated",B.defaultSmoothOrigin=!0,B.suffixMap={top:t="px",right:t,bottom:t,left:t,width:t,height:t,fontSize:t,padding:t,margin:t,perspective:t,lineHeight:""};var k,g,y,Y,v,O,A,R,e,i,C=/(?:\-|\.|\b)(\d|\.|e\-)+/g,M=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,T=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,u=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,D=/(?:\d|\-|\+|=|#|\.)*/g,z=/opacity *= *([^)]*)/i,x=/opacity:([^;]*)/i,a=/alpha\(opacity *=.+?\)/i,w=/^(rgb|hsl)/,o=/([A-Z])/g,l=/-([a-z])/gi,b=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,_=function(t,e){return e.toUpperCase()},f=/(?:Left|Right|Width)/i,c=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,F=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,E=/,(?=[^\)]*(?:\(|$))/gi,q=/[\s,\(]/i,j=Math.PI/180,U=180/Math.PI,I={},r={style:{}},L=se.document||{createElement:function(){return r}},X=function(t,e){return L.createElementNS?L.createElementNS(e||"http://www.w3.org/1999/xhtml",t):L.createElement(t)},V=X("div"),H=X("img"),s=B._internals={_specialProps:m},G=(se.navigator||{}).userAgent||"",W=(e=G.indexOf("Android"),i=X("a"),y=-1!==G.indexOf("Safari")&&-1===G.indexOf("Chrome")&&(-1===e||3<parseFloat(G.substr(e+8,2))),v=y&&parseFloat(G.substr(G.indexOf("Version/")+8,2))<6,Y=-1!==G.indexOf("Firefox"),(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(G)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(G))&&(O=parseFloat(RegExp.$1)),!!i&&(i.style.cssText="top:1px;opacity:.55;",/^0.55/.test(i.style.opacity))),$=function(t){return z.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},Z=function(t){se.console&&console.log(t)},Q="",J="",K=function(t,e){var i,r,s=(e=e||V).style;if(void 0!==s[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],r=5;-1<--r&&void 0===s[i[r]+t];);return 0<=r?(Q="-"+(J=3===r?"ms":i[r]).toLowerCase()+"-",J+t):null},tt=("undefined"!=typeof window?window:L.defaultView||{getComputedStyle:function(){}}).getComputedStyle,et=B.getStyle=function(t,e,i,r,s){var n;return W||"opacity"!==e?(!r&&t.style[e]?n=t.style[e]:(i=i||tt(t))?n=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(o,"-$1").toLowerCase()):t.currentStyle&&(n=t.currentStyle[e]),null==s||n&&"none"!==n&&"auto"!==n&&"auto auto"!==n?n:s):$(t)},it=s.convertToPixels=function(t,e,i,r,s){if("px"===r||!r&&"lineHeight"!==e)return i;if("auto"===r||!i)return 0;var n,a,o,l=f.test(e),h=t,u=V.style,_=i<0,c=1===i;if(_&&(i=-i),c&&(i*=100),"lineHeight"!==e||r)if("%"===r&&-1!==e.indexOf("border"))n=i/100*(l?t.clientWidth:t.clientHeight);else{if(u.cssText="border:0 solid red;position:"+et(t,"position")+";line-height:0;","%"!==r&&h.appendChild&&"v"!==r.charAt(0)&&"rem"!==r)u[l?"borderLeftWidth":"borderTopWidth"]=i+r;else{if(h=t.parentNode||L.body,-1!==et(h,"display").indexOf("flex")&&(u.position="absolute"),a=h._gsCache,o=N.ticker.frame,a&&l&&a.time===o)return a.width*i/100;u[l?"width":"height"]=i+r}h.appendChild(V),n=parseFloat(V[l?"offsetWidth":"offsetHeight"]),h.removeChild(V),l&&"%"===r&&!1!==B.cacheWidths&&((a=h._gsCache=h._gsCache||{}).time=o,a.width=n/i*100),0!==n||s||(n=it(t,e,i,r,!0))}else a=tt(t).lineHeight,t.style.lineHeight=i,n=parseFloat(tt(t).lineHeight),t.style.lineHeight=a;return c&&(n/=100),_?-n:n},rt=s.calculateOffset=function(t,e,i){if("absolute"!==et(t,"position",i))return 0;var r="left"===e?"Left":"Top",s=et(t,"margin"+r,i);return t["offset"+r]-(it(t,e,parseFloat(s),s.replace(D,""))||0)},st=function(t,e){var i,r,s,n={};if(e=e||tt(t,null))if(i=e.length)for(;-1<--i;)-1!==(s=e[i]).indexOf("-transform")&&Et!==s||(n[s.replace(l,_)]=e.getPropertyValue(s));else for(i in e)-1!==i.indexOf("Transform")&&Ft!==i||(n[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===n[i]&&(n[i.replace(l,_)]=e[i]);return W||(n.opacity=$(t)),r=Wt(t,e,!1),n.rotation=r.rotation,n.skewX=r.skewX,n.scaleX=r.scaleX,n.scaleY=r.scaleY,n.x=r.x,n.y=r.y,It&&(n.z=r.z,n.rotationX=r.rotationX,n.rotationY=r.rotationY,n.scaleZ=r.scaleZ),n.filters&&delete n.filters,n},nt=function(t,e,i,r,s){var n,a,o,l={},h=t.style;for(a in i)"cssText"!==a&&"length"!==a&&isNaN(a)&&(e[a]!==(n=i[a])||s&&s[a])&&-1===a.indexOf("Origin")&&("number"!=typeof n&&"string"!=typeof n||(l[a]="auto"!==n||"left"!==a&&"top"!==a?""!==n&&"auto"!==n&&"none"!==n||"string"!=typeof e[a]||""===e[a].replace(u,"")?n:0:rt(t,a),void 0!==h[a]&&(o=new Tt(h,a,h[a],o))));if(r)for(a in r)"className"!==a&&(l[a]=r[a]);return{difs:l,firstMPT:o}},at={width:["Left","Right"],height:["Top","Bottom"]},ot=["marginLeft","marginRight","marginTop","marginBottom"],lt=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||tt(t))[e]||0;if(t.getCTM&&Vt(t))return t.getBBox()[e]||0;var r=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),s=at[e],n=s.length;for(i=i||tt(t,null);-1<--n;)r-=parseFloat(et(t,"padding"+s[n],i,!0))||0,r-=parseFloat(et(t,"border"+s[n]+"Width",i,!0))||0;return r},ht=function t(e,i){if("contain"===e||"auto"===e||"auto auto"===e)return e+" ";null!=e&&""!==e||(e="0 0");var r,s=e.split(" "),n=-1!==e.indexOf("left")?"0%":-1!==e.indexOf("right")?"100%":s[0],a=-1!==e.indexOf("top")?"0%":-1!==e.indexOf("bottom")?"100%":s[1];if(3<s.length&&!i){for(s=e.split(", ").join(",").split(","),e=[],r=0;r<s.length;r++)e.push(t(s[r]));return e.join(",")}return null==a?a="center"===n?"50%":"0":"center"===a&&(a="50%"),("center"===n||isNaN(parseFloat(n))&&-1===(n+"").indexOf("="))&&(n="50%"),e=n+" "+a+(2<s.length?" "+s[2]:""),i&&(i.oxp=-1!==n.indexOf("%"),i.oyp=-1!==a.indexOf("%"),i.oxr="="===n.charAt(1),i.oyr="="===a.charAt(1),i.ox=parseFloat(n.replace(u,"")),i.oy=parseFloat(a.replace(u,"")),i.v=e),i||e},ut=function(t,e){return"function"==typeof t&&(t=t(R,A)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},_t=function(t,e){"function"==typeof t&&(t=t(R,A));var i="string"==typeof t&&"="===t.charAt(1);return"string"==typeof t&&"v"===t.charAt(t.length-2)&&(t=(i?t.substr(0,2):0)+window["inner"+("vh"===t.substr(-2)?"Height":"Width")]*(parseFloat(i?t.substr(2):t)/100)),null==t?e:i?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ct=function(t,e,i,r){var s,n,a,o,l;return"function"==typeof t&&(t=t(R,A)),(o=null==t?e:"number"==typeof t?t:(s=360,n=t.split("_"),a=((l="="===t.charAt(1))?parseInt(t.charAt(0)+"1",10)*parseFloat(n[0].substr(2)):parseFloat(n[0]))*(-1===t.indexOf("rad")?1:U)-(l?0:e),n.length&&(r&&(r[i]=e+a),-1!==t.indexOf("short")&&(a%=s)!==a%180&&(a=a<0?a+s:a-s),-1!==t.indexOf("_cw")&&a<0?a=(a+3599999999640)%s-(a/s|0)*s:-1!==t.indexOf("ccw")&&0<a&&(a=(a-3599999999640)%s-(a/s|0)*s)),e+a))<1e-6&&-1e-6<o&&(o=0),o},ft={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},pt=function(t,e,i){return 255*(6*(t=t<0?t+1:1<t?t-1:t)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},dt=B.parseColor=function(t,e){var i,r,s,n,a,o,l,h,u,_,c;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ft[t])i=ft[t];else if("#"===t.charAt(0))4===t.length&&(t="#"+(r=t.charAt(1))+r+(s=t.charAt(2))+s+(n=t.charAt(3))+n),i=[(t=parseInt(t.substr(1),16))>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=c=t.match(C),e){if(-1!==t.indexOf("="))return t.match(M)}else a=Number(i[0])%360/360,o=Number(i[1])/100,r=2*(l=Number(i[2])/100)-(s=l<=.5?l*(o+1):l+o-l*o),3<i.length&&(i[3]=Number(i[3])),i[0]=pt(a+1/3,r,s),i[1]=pt(a,r,s),i[2]=pt(a-1/3,r,s);else i=t.match(C)||ft.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),3<i.length&&(i[3]=Number(i[3]))}else i=ft.black;return e&&!c&&(r=i[0]/255,s=i[1]/255,n=i[2]/255,l=((h=Math.max(r,s,n))+(u=Math.min(r,s,n)))/2,h===u?a=o=0:(_=h-u,o=.5<l?_/(2-h-u):_/(h+u),a=h===r?(s-n)/_+(s<n?6:0):h===s?(n-r)/_+2:(r-s)/_+4,a*=60),i[0]=a+.5|0,i[1]=100*o+.5|0,i[2]=100*l+.5|0),i},mt=function(t,e){var i,r,s,n=t.match(gt)||[],a=0,o="";if(!n.length)return t;for(i=0;i<n.length;i++)r=n[i],a+=(s=t.substr(a,t.indexOf(r,a)-a)).length+r.length,3===(r=dt(r,e)).length&&r.push(1),o+=s+(e?"hsla("+r[0]+","+r[1]+"%,"+r[2]+"%,"+r[3]:"rgba("+r.join(","))+")";return o+t.substr(a)},gt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(t in ft)gt+="|"+t+"\\b";gt=new RegExp(gt+")","gi"),B.colorStringFilter=function(t){var e,i=t[0]+" "+t[1];gt.test(i)&&(e=-1!==i.indexOf("hsl(")||-1!==i.indexOf("hsla("),t[0]=mt(t[0],e),t[1]=mt(t[1],e)),gt.lastIndex=0},N.defaultStringFilter||(N.defaultStringFilter=B.colorStringFilter);var yt=function(t,e,n,a){if(null==t)return function(t){return t};var o,l=e?(t.match(gt)||[""])[0]:"",h=t.split(l).join("").match(T)||[],u=t.substr(0,t.indexOf(h[0])),_=")"===t.charAt(t.length-1)?")":"",c=-1!==t.indexOf(" ")?" ":",",f=h.length,p=0<f?h[0].replace(C,""):"";return f?o=e?function(t){var e,i,r,s;if("number"==typeof t)t+=p;else if(a&&E.test(t)){for(s=t.replace(E,"|").split("|"),r=0;r<s.length;r++)s[r]=o(s[r]);return s.join(",")}if(e=(t.match(gt)||[l])[0],r=(i=t.split(e).join("").match(T)||[]).length,f>r--)for(;++r<f;)i[r]=n?i[(r-1)/2|0]:h[r];return u+i.join(c)+c+e+_+(-1!==t.indexOf("inset")?" inset":"")}:function(t){var e,i,r;if("number"==typeof t)t+=p;else if(a&&E.test(t)){for(i=t.replace(E,"|").split("|"),r=0;r<i.length;r++)i[r]=o(i[r]);return i.join(",")}if(r=(e=t.match(T)||[]).length,f>r--)for(;++r<f;)e[r]=n?e[(r-1)/2|0]:h[r];return u+e.join(c)+_}:function(t){return t}},vt=function(h){return h=h.split(","),function(t,e,i,r,s,n,a){var o,l=(e+"").split(" ");for(a={},o=0;o<4;o++)a[h[o]]=l[o]=l[o]||l[(o-1)/2>>0];return r.parse(t,a,s,n)}},Tt=(s._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,r,s,n,a=this.data,o=a.proxy,l=a.firstMPT;l;)e=o[l.v],l.r?e=l.r(e):e<1e-6&&-1e-6<e&&(e=0),l.t[l.p]=e,l=l._next;if(a.autoRotate&&(a.autoRotate.rotation=a.mod?a.mod.call(this._tween,o.rotation,this.t,this._tween):o.rotation),1===t||0===t)for(l=a.firstMPT,n=1===t?"e":"b";l;){if((i=l.t).type){if(1===i.type){for(s=i.xs0+i.s+i.xs1,r=1;r<i.l;r++)s+=i["xn"+r]+i["xs"+(r+1)];i[n]=s}}else i[n]=i.s+i.xs0;l=l._next}},function(t,e,i,r,s){this.t=t,this.p=e,this.v=i,this.r=s,r&&((r._prev=this)._next=r)}),xt=(s._parseToProxy=function(t,e,i,r,s,n){var a,o,l,h,u,_=r,c={},f={},p=i._transform,d=I;for(i._transform=null,I=e,r=u=i.parse(t,e,r,s),I=d,n&&(i._transform=p,_&&(_._prev=null,_._prev&&(_._prev._next=null)));r&&r!==_;){if(r.type<=1&&(f[o=r.p]=r.s+r.c,c[o]=r.s,n||(h=new Tt(r,"s",o,h,r.r),r.c=0),1===r.type))for(a=r.l;0<--a;)l="xn"+a,f[o=r.p+"_"+l]=r.data[l],c[o]=r[l],n||(h=new Tt(r,l,o,h,r.rxp[l]));r=r._next}return{proxy:c,end:f,firstMPT:h,pt:u}},s.CSSPropTween=function(t,e,i,r,s,n,a,o,l,h,u){this.t=t,this.p=e,this.s=i,this.c=r,this.n=a||e,t instanceof xt||d.push(this.n),this.r=o?"function"==typeof o?o:Math.round:o,this.type=n||0,l&&(this.pr=l,p=!0),this.b=void 0===h?i:h,this.e=void 0===u?i+r:u,s&&((this._next=s)._prev=this)}),wt=function(t,e,i,r,s,n){var a=new xt(t,e,i,r-i,s,-1,n);return a.b=i,a.e=a.xs0=r,a},bt=B.parseComplex=function(t,e,i,r,s,n,a,o,l,h){i=i||n||"","function"==typeof r&&(r=r(R,A)),a=new xt(t,e,0,0,a,h?2:1,null,!1,o,i,r),r+="",s&&gt.test(r+i)&&(B.colorStringFilter(r=[i,r]),i=r[0],r=r[1]);var u,_,c,f,p,d,m,g,y,v,T,x,w,b=i.split(", ").join(",").split(" "),P=r.split(", ").join(",").split(" "),O=b.length,S=!1!==k;for(-1===r.indexOf(",")&&-1===i.indexOf(",")||(P=-1!==(r+i).indexOf("rgb")||-1!==(r+i).indexOf("hsl")?(b=b.join(" ").replace(E,", ").split(" "),P.join(" ").replace(E,", ").split(" ")):(b=b.join(" ").split(",").join(", ").split(" "),P.join(" ").split(",").join(", ").split(" ")),O=b.length),O!==P.length&&(O=(b=(n||"").split(" ")).length),a.plugin=l,a.setRatio=h,u=gt.lastIndex=0;u<O;u++)if(f=b[u],p=P[u]+"",(g=parseFloat(f))||0===g)a.appendXtra("",g,ut(p,g),p.replace(M,""),!(!S||-1===p.indexOf("px"))&&Math.round,!0);else if(s&&gt.test(f))x=")"+((x=p.indexOf(")")+1)?p.substr(x):""),w=-1!==p.indexOf("hsl")&&W,v=p,f=dt(f,w),p=dt(p,w),(y=6<f.length+p.length)&&!W&&0===p[3]?(a["xs"+a.l]+=a.l?" transparent":"transparent",a.e=a.e.split(P[u]).join("transparent")):(W||(y=!1),w?a.appendXtra(v.substr(0,v.indexOf("hsl"))+(y?"hsla(":"hsl("),f[0],ut(p[0],f[0]),",",!1,!0).appendXtra("",f[1],ut(p[1],f[1]),"%,",!1).appendXtra("",f[2],ut(p[2],f[2]),y?"%,":"%"+x,!1):a.appendXtra(v.substr(0,v.indexOf("rgb"))+(y?"rgba(":"rgb("),f[0],p[0]-f[0],",",Math.round,!0).appendXtra("",f[1],p[1]-f[1],",",Math.round).appendXtra("",f[2],p[2]-f[2],y?",":x,Math.round),y&&(f=f.length<4?1:f[3],a.appendXtra("",f,(p.length<4?1:p[3])-f,x,!1))),gt.lastIndex=0;else if(d=f.match(C)){if(!(m=p.match(M))||m.length!==d.length)return a;for(_=c=0;_<d.length;_++)T=d[_],v=f.indexOf(T,c),a.appendXtra(f.substr(c,v-c),Number(T),ut(m[_],T),"",!(!S||"px"!==f.substr(v+T.length,2))&&Math.round,0===_),c=v+T.length;a["xs"+a.l]+=f.substr(c)}else a["xs"+a.l]+=a.l||a["xs"+a.l]?" "+p:p;if(-1!==r.indexOf("=")&&a.data){for(x=a.xs0+a.data.s,u=1;u<a.l;u++)x+=a["xs"+u]+a.data["xn"+u];a.e=x+a["xs"+u]}return a.l||(a.type=-1,a.xs0=a.e),a.xfirst||a},Pt=9;for((t=xt.prototype).l=t.pr=0;0<--Pt;)t["xn"+Pt]=0,t["xs"+Pt]="";t.xs0="",t._next=t._prev=t.xfirst=t.data=t.plugin=t.setRatio=t.rxp=null,t.appendXtra=function(t,e,i,r,s,n){var a=this,o=a.l;return a["xs"+o]+=n&&(o||a["xs"+o])?" "+t:t||"",i||0===o||a.plugin?(a.l++,a.type=a.setRatio?2:1,a["xs"+a.l]=r||"",0<o?(a.data["xn"+o]=e+i,a.rxp["xn"+o]=s,a["xn"+o]=e,a.plugin||(a.xfirst=new xt(a,"xn"+o,e,i,a.xfirst||a,0,a.n,s,a.pr),a.xfirst.xs0=0)):(a.data={s:e+i},a.rxp={},a.s=e,a.c=i,a.r=s),a):(a["xs"+o]+=e+(r||""),a)};var Ot=function(t,e){e=e||{},this.p=e.prefix&&K(t)||t,m[t]=m[this.p]=this,this.format=e.formatter||yt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},St=s._registerComplexSpecialProp=function(t,e,i){"object"!==(void 0===e?"undefined":re(e))&&(e={parser:i});var r,s=t.split(","),n=e.defaultValue;for(i=i||[n],r=0;r<s.length;r++)e.prefix=0===r&&e.prefix,e.defaultValue=i[r]||n,new Ot(s[r],e)},kt=s._registerPluginProp=function(t){if(!m[t]){var l=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";St(t,{parser:function(t,e,i,r,s,n,a){var o=h.com.greensock.plugins[l];return o?(o._cssRegister(),m[i].parse(t,e,i,r,s,n,a)):(Z("Error: "+l+" js file not loaded."),s)}})}};(t=Ot.prototype).parseComplex=function(t,e,i,r,s,n){var a,o,l,h,u,_,c=this.keyword;if(this.multi&&(E.test(i)||E.test(e)?(o=e.replace(E,"|").split("|"),l=i.replace(E,"|").split("|")):c&&(o=[e],l=[i])),l){for(h=l.length>o.length?l.length:o.length,a=0;a<h;a++)e=o[a]=o[a]||this.dflt,i=l[a]=l[a]||this.dflt,c&&(u=e.indexOf(c))!==(_=i.indexOf(c))&&(-1===_?o[a]=o[a].split(c).join(""):-1===u&&(o[a]+=" "+c));e=o.join(", "),i=l.join(", ")}return bt(t,this.p,e,i,this.clrs,this.dflt,r,this.pr,s,n)},t.parse=function(t,e,i,r,s,n,a){return this.parseComplex(t.style,this.format(et(t,this.p,S,!1,this.dflt)),this.format(e),s,n)},B.registerSpecialProp=function(t,l,h){St(t,{parser:function(t,e,i,r,s,n,a){var o=new xt(t,i,0,0,s,2,i,!1,h);return o.plugin=n,o.setRatio=l(t,e,r._tween,i),o},priority:h})},B.useSVGTransformAttr=!0;var At,Rt,Ct,Mt,Dt,zt="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Ft=K("transform"),Et=Q+"transform",qt=K("transformOrigin"),It=null!==K("perspective"),Lt=s.Transform=function(){this.perspective=parseFloat(B.defaultTransformPerspective)||0,this.force3D=!(!1===B.defaultForce3D||!It)&&(B.defaultForce3D||"auto")},Xt=se.SVGElement,Nt=function(t,e,i){var r,s=L.createElementNS("http://www.w3.org/2000/svg",t),n=/([a-z])([A-Z])/g;for(r in i)s.setAttributeNS(null,r.replace(n,"$1-$2").toLowerCase(),i[r]);return e.appendChild(s),s},Bt=L.documentElement||{},Yt=(Dt=O||/Android/i.test(G)&&!se.chrome,L.createElementNS&&!Dt&&(Rt=Nt("svg",Bt),Mt=(Ct=Nt("rect",Rt,{width:100,height:50,x:100})).getBoundingClientRect().width,Ct.style[qt]="50% 50%",Ct.style[Ft]="scaleX(0.5)",Dt=Mt===Ct.getBoundingClientRect().width&&!(Y&&It),Bt.removeChild(Rt)),Dt),jt=function(t,e,i,r,s,n){var a,o,l,h,u,_,c,f,p,d,m,g,y,v,T=t._gsTransform,x=Gt(t,!0);T&&(y=T.xOrigin,v=T.yOrigin),(!r||(a=r.split(" ")).length<2)&&(0===(c=t.getBBox()).x&&0===c.y&&c.width+c.height===0&&(c={x:parseFloat(t.hasAttribute("x")?t.getAttribute("x"):t.hasAttribute("cx")?t.getAttribute("cx"):0)||0,y:parseFloat(t.hasAttribute("y")?t.getAttribute("y"):t.hasAttribute("cy")?t.getAttribute("cy"):0)||0,width:0,height:0}),a=[(-1!==(e=ht(e).split(" "))[0].indexOf("%")?parseFloat(e[0])/100*c.width:parseFloat(e[0]))+c.x,(-1!==e[1].indexOf("%")?parseFloat(e[1])/100*c.height:parseFloat(e[1]))+c.y]),i.xOrigin=h=parseFloat(a[0]),i.yOrigin=u=parseFloat(a[1]),r&&x!==Ht&&(_=x[0],c=x[1],f=x[2],p=x[3],d=x[4],m=x[5],(g=_*p-c*f)&&(o=h*(p/g)+u*(-f/g)+(f*m-p*d)/g,l=h*(-c/g)+u*(_/g)-(_*m-c*d)/g,h=i.xOrigin=a[0]=o,u=i.yOrigin=a[1]=l)),T&&(n&&(i.xOffset=T.xOffset,i.yOffset=T.yOffset,T=i),s||!1!==s&&!1!==B.defaultSmoothOrigin?(o=h-y,l=u-v,T.xOffset+=o*x[0]+l*x[2]-o,T.yOffset+=o*x[1]+l*x[3]-l):T.xOffset=T.yOffset=0),n||t.setAttribute("data-svg-origin",a.join(" "))},Ut=function(e){try{return e.getBBox()}catch(t){return function t(e){var i,r=X("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),s=this.parentNode,n=this.nextSibling,a=this.style.cssText;if(Bt.appendChild(r),r.appendChild(this),this.style.display="block",e)try{i=this.getBBox(),this._originalGetBBox=this.getBBox,this.getBBox=t}catch(t){}else this._originalGetBBox&&(i=this._originalGetBBox());return n?s.insertBefore(this,n):s.appendChild(this),Bt.removeChild(r),this.style.cssText=a,i}.call(e,!0)}},Vt=function(t){return!(!Xt||!t.getCTM||t.parentNode&&!t.ownerSVGElement||!Ut(t))},Ht=[1,0,0,1,0,0],Gt=function(t,e){var i,r,s,n,a,o,l=t._gsTransform||new Lt,h=t.style;if(Ft?r=et(t,Et,null,!0):t.currentStyle&&(r=(r=t.currentStyle.filter.match(c))&&4===r.length?[r[0].substr(4),Number(r[2].substr(4)),Number(r[1].substr(4)),r[3].substr(4),l.x||0,l.y||0].join(","):""),i=!r||"none"===r||"matrix(1, 0, 0, 1, 0, 0)"===r,!Ft||!(o=!tt(t)||"none"===tt(t).display)&&t.parentNode||(o&&(n=h.display,h.display="block"),t.parentNode||(a=1,Bt.appendChild(t)),i=!(r=et(t,Et,null,!0))||"none"===r||"matrix(1, 0, 0, 1, 0, 0)"===r,n?h.display=n:o&&Jt(h,"display"),a&&Bt.removeChild(t)),(l.svg||t.getCTM&&Vt(t))&&(i&&-1!==(h[Ft]+"").indexOf("matrix")&&(r=h[Ft],i=0),s=t.getAttribute("transform"),i&&s&&(r="matrix("+(s=t.transform.baseVal.consolidate().matrix).a+","+s.b+","+s.c+","+s.d+","+s.e+","+s.f+")",i=0)),i)return Ht;for(s=(r||"").match(C)||[],Pt=s.length;-1<--Pt;)n=Number(s[Pt]),s[Pt]=(a=n-(n|=0))?(1e5*a+(a<0?-.5:.5)|0)/1e5+n:n;return e&&6<s.length?[s[0],s[1],s[4],s[5],s[12],s[13]]:s},Wt=s.getTransform=function(t,e,i,r){if(t._gsTransform&&i&&!r)return t._gsTransform;var s,n,a,o,l,h,u=i&&t._gsTransform||new Lt,_=u.scaleX<0,c=It&&(parseFloat(et(t,qt,e,!1,"0 0 0").split(" ")[2])||u.zOrigin)||0,f=parseFloat(B.defaultTransformPerspective)||0;if(u.svg=!(!t.getCTM||!Vt(t)),u.svg&&(jt(t,et(t,qt,e,!1,"50% 50%")+"",u,t.getAttribute("data-svg-origin")),At=B.useSVGTransformAttr||Yt),(s=Gt(t))!==Ht){if(16===s.length){var p,d,m,g,y,v=s[0],T=s[1],x=s[2],w=s[3],b=s[4],P=s[5],O=s[6],S=s[7],k=s[8],A=s[9],R=s[10],C=s[12],M=s[13],D=s[14],z=s[11],F=Math.atan2(O,R);u.zOrigin&&(C=k*(D=-u.zOrigin)-s[12],M=A*D-s[13],D=R*D+u.zOrigin-s[14]),u.rotationX=F*U,F&&(p=b*(g=Math.cos(-F))+k*(y=Math.sin(-F)),d=P*g+A*y,m=O*g+R*y,k=b*-y+k*g,A=P*-y+A*g,R=O*-y+R*g,z=S*-y+z*g,b=p,P=d,O=m),F=Math.atan2(-x,R),u.rotationY=F*U,F&&(d=T*(g=Math.cos(-F))-A*(y=Math.sin(-F)),m=x*g-R*y,A=T*y+A*g,R=x*y+R*g,z=w*y+z*g,v=p=v*g-k*y,T=d,x=m),F=Math.atan2(T,v),u.rotation=F*U,F&&(p=v*(g=Math.cos(F))+T*(y=Math.sin(F)),d=b*g+P*y,m=k*g+A*y,T=T*g-v*y,P=P*g-b*y,A=A*g-k*y,v=p,b=d,k=m),u.rotationX&&359.9<Math.abs(u.rotationX)+Math.abs(u.rotation)&&(u.rotationX=u.rotation=0,u.rotationY=180-u.rotationY),F=Math.atan2(b,P),u.scaleX=(1e5*Math.sqrt(v*v+T*T+x*x)+.5|0)/1e5,u.scaleY=(1e5*Math.sqrt(P*P+O*O)+.5|0)/1e5,u.scaleZ=(1e5*Math.sqrt(k*k+A*A+R*R)+.5|0)/1e5,v/=u.scaleX,b/=u.scaleY,T/=u.scaleX,P/=u.scaleY,2e-5<Math.abs(F)?(u.skewX=F*U,b=0,"simple"!==u.skewType&&(u.scaleY*=1/Math.cos(F))):u.skewX=0,u.perspective=z?1/(z<0?-z:z):0,u.x=C,u.y=M,u.z=D,u.svg&&(u.x-=u.xOrigin-(u.xOrigin*v-u.yOrigin*b),u.y-=u.yOrigin-(u.yOrigin*T-u.xOrigin*P))}else if(!It||r||!s.length||u.x!==s[4]||u.y!==s[5]||!u.rotationX&&!u.rotationY){var E=6<=s.length,q=E?s[0]:1,I=s[1]||0,L=s[2]||0,X=E?s[3]:1;u.x=s[4]||0,u.y=s[5]||0,a=Math.sqrt(q*q+I*I),o=Math.sqrt(X*X+L*L),l=q||I?Math.atan2(I,q)*U:u.rotation||0,h=L||X?Math.atan2(L,X)*U+l:u.skewX||0,u.scaleX=a,u.scaleY=o,u.rotation=l,u.skewX=h,It&&(u.rotationX=u.rotationY=u.z=0,u.perspective=f,u.scaleZ=1),u.svg&&(u.x-=u.xOrigin-(u.xOrigin*q+u.yOrigin*L),u.y-=u.yOrigin-(u.xOrigin*I+u.yOrigin*X))}for(n in 90<Math.abs(u.skewX)&&Math.abs(u.skewX)<270&&(_?(u.scaleX*=-1,u.skewX+=u.rotation<=0?180:-180,u.rotation+=u.rotation<=0?180:-180):(u.scaleY*=-1,u.skewX+=u.skewX<=0?180:-180)),u.zOrigin=c,u)u[n]<2e-5&&-2e-5<u[n]&&(u[n]=0)}return i&&(t._gsTransform=u).svg&&(At&&t.style[Ft]?N.delayedCall(.001,function(){Jt(t.style,Ft)}):!At&&t.getAttribute("transform")&&N.delayedCall(.001,function(){t.removeAttribute("transform")})),u},$t=function(t){var e,i,r=this.data,s=-r.rotation*j,n=s+r.skewX*j,a=1e5,o=(Math.cos(s)*r.scaleX*a|0)/a,l=(Math.sin(s)*r.scaleX*a|0)/a,h=(Math.sin(n)*-r.scaleY*a|0)/a,u=(Math.cos(n)*r.scaleY*a|0)/a,_=this.t.style,c=this.t.currentStyle;if(c){i=l,l=-h,h=-i,e=c.filter,_.filter="";var f,p,d=this.t.offsetWidth,m=this.t.offsetHeight,g="absolute"!==c.position,y="progid:DXImageTransform.Microsoft.Matrix(M11="+o+", M12="+l+", M21="+h+", M22="+u,v=r.x+d*r.xPercent/100,T=r.y+m*r.yPercent/100;if(null!=r.ox&&(v+=(f=(r.oxp?d*r.ox*.01:r.ox)-d/2)-(f*o+(p=(r.oyp?m*r.oy*.01:r.oy)-m/2)*l),T+=p-(f*h+p*u)),y+=g?", Dx="+((f=d/2)-(f*o+(p=m/2)*l)+v)+", Dy="+(p-(f*h+p*u)+T)+")":", sizingMethod='auto expand')",-1!==e.indexOf("DXImageTransform.Microsoft.Matrix(")?_.filter=e.replace(F,y):_.filter=y+" "+e,0!==t&&1!==t||1===o&&0===l&&0===h&&1===u&&(g&&-1===y.indexOf("Dx=0, Dy=0")||z.test(e)&&100!==parseFloat(RegExp.$1)||-1===e.indexOf(e.indexOf("Alpha"))&&_.removeAttribute("filter")),!g){var x,w,b,P=O<8?1:-1;for(f=r.ieOffsetX||0,p=r.ieOffsetY||0,r.ieOffsetX=Math.round((d-((o<0?-o:o)*d+(l<0?-l:l)*m))/2+v),r.ieOffsetY=Math.round((m-((u<0?-u:u)*m+(h<0?-h:h)*d))/2+T),Pt=0;Pt<4;Pt++)b=(i=-1!==(x=c[w=ot[Pt]]).indexOf("px")?parseFloat(x):it(this.t,w,parseFloat(x),x.replace(D,""))||0)!==r[w]?Pt<2?-r.ieOffsetX:-r.ieOffsetY:Pt<2?f-r.ieOffsetX:p-r.ieOffsetY,_[w]=(r[w]=Math.round(i-b*(0===Pt||2===Pt?1:P)))+"px"}}},Zt=s.set3DTransformRatio=s.setTransformRatio=function(t){var e,i,r,s,n,a,o,l,h,u,_,c,f,p,d,m,g,y,v,T,x,w,b,P=this.data,O=this.t.style,S=P.rotation,k=P.rotationX,A=P.rotationY,R=P.scaleX,C=P.scaleY,M=P.scaleZ,D=P.x,z=P.y,F=P.z,E=P.svg,q=P.perspective,I=P.force3D,L=P.skewY,X=P.skewX;if(L&&(X+=L,S+=L),!((1!==t&&0!==t||"auto"!==I||this.tween._totalTime!==this.tween._totalDuration&&this.tween._totalTime)&&I||F||q||A||k||1!==M)||At&&E||!It)S||X||E?(S*=j,w=X*j,b=1e5,i=Math.cos(S)*R,n=Math.sin(S)*R,r=Math.sin(S-w)*-C,a=Math.cos(S-w)*C,w&&"simple"===P.skewType&&(e=Math.tan(w-L*j),r*=e=Math.sqrt(1+e*e),a*=e,L&&(e=Math.tan(L*j),i*=e=Math.sqrt(1+e*e),n*=e)),E&&(D+=P.xOrigin-(P.xOrigin*i+P.yOrigin*r)+P.xOffset,z+=P.yOrigin-(P.xOrigin*n+P.yOrigin*a)+P.yOffset,At&&(P.xPercent||P.yPercent)&&(d=this.t.getBBox(),D+=.01*P.xPercent*d.width,z+=.01*P.yPercent*d.height),D<(d=1e-6)&&-d<D&&(D=0),z<d&&-d<z&&(z=0)),v=(i*b|0)/b+","+(n*b|0)/b+","+(r*b|0)/b+","+(a*b|0)/b+","+D+","+z+")",E&&At?this.t.setAttribute("transform","matrix("+v):O[Ft]=(P.xPercent||P.yPercent?"translate("+P.xPercent+"%,"+P.yPercent+"%) matrix(":"matrix(")+v):O[Ft]=(P.xPercent||P.yPercent?"translate("+P.xPercent+"%,"+P.yPercent+"%) matrix(":"matrix(")+R+",0,0,"+C+","+D+","+z+")";else{if(Y&&(R<(d=1e-4)&&-d<R&&(R=M=2e-5),C<d&&-d<C&&(C=M=2e-5),!q||P.z||P.rotationX||P.rotationY||(q=0)),S||X)S*=j,m=i=Math.cos(S),g=n=Math.sin(S),X&&(S-=X*j,m=Math.cos(S),g=Math.sin(S),"simple"===P.skewType&&(e=Math.tan((X-L)*j),m*=e=Math.sqrt(1+e*e),g*=e,P.skewY&&(e=Math.tan(L*j),i*=e=Math.sqrt(1+e*e),n*=e))),r=-g,a=m;else{if(!(A||k||1!==M||q||E))return void(O[Ft]=(P.xPercent||P.yPercent?"translate("+P.xPercent+"%,"+P.yPercent+"%) translate3d(":"translate3d(")+D+"px,"+z+"px,"+F+"px)"+(1!==R||1!==C?" scale("+R+","+C+")":""));i=a=1,r=n=0}u=1,s=o=l=h=_=c=0,f=q?-1/q:0,p=P.zOrigin,d=1e-6,T=",",x="0",(S=A*j)&&(m=Math.cos(S),_=f*(l=-(g=Math.sin(S))),s=i*g,o=n*g,f*=u=m,i*=m,n*=m),(S=k*j)&&(e=r*(m=Math.cos(S))+s*(g=Math.sin(S)),y=a*m+o*g,h=u*g,c=f*g,s=r*-g+s*m,o=a*-g+o*m,u*=m,f*=m,r=e,a=y),1!==M&&(s*=M,o*=M,u*=M,f*=M),1!==C&&(r*=C,a*=C,h*=C,c*=C),1!==R&&(i*=R,n*=R,l*=R,_*=R),(p||E)&&(p&&(D+=s*-p,z+=o*-p,F+=u*-p+p),E&&(D+=P.xOrigin-(P.xOrigin*i+P.yOrigin*r)+P.xOffset,z+=P.yOrigin-(P.xOrigin*n+P.yOrigin*a)+P.yOffset),D<d&&-d<D&&(D=x),z<d&&-d<z&&(z=x),F<d&&-d<F&&(F=0)),v=P.xPercent||P.yPercent?"translate("+P.xPercent+"%,"+P.yPercent+"%) matrix3d(":"matrix3d(",v+=(i<d&&-d<i?x:i)+T+(n<d&&-d<n?x:n)+T+(l<d&&-d<l?x:l),v+=T+(_<d&&-d<_?x:_)+T+(r<d&&-d<r?x:r)+T+(a<d&&-d<a?x:a),k||A||1!==M?(v+=T+(h<d&&-d<h?x:h)+T+(c<d&&-d<c?x:c)+T+(s<d&&-d<s?x:s),v+=T+(o<d&&-d<o?x:o)+T+(u<d&&-d<u?x:u)+T+(f<d&&-d<f?x:f)+T):v+=",0,0,0,0,1,0,",v+=D+T+z+T+F+T+(q?1+-F/q:1)+")",O[Ft]=v}};(t=Lt.prototype).x=t.y=t.z=t.skewX=t.skewY=t.rotation=t.rotationX=t.rotationY=t.zOrigin=t.xPercent=t.yPercent=t.xOffset=t.yOffset=0,t.scaleX=t.scaleY=t.scaleZ=1,St("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,i,r,s,n,a){if(r._lastParsedTransform===a)return s;var o,l=(r._lastParsedTransform=a).scale&&"function"==typeof a.scale?a.scale:0;"function"==typeof a[i]&&(o=a[i],a[i]=e),l&&(a.scale=l(R,t));var h,u,_,c,f,p,d,m,g,y=t._gsTransform,v=t.style,T=zt.length,x=a,w={},b="transformOrigin",P=Wt(t,S,!0,x.parseTransform),O=x.transform&&("function"==typeof x.transform?x.transform(R,A):x.transform);if(P.skewType=x.skewType||P.skewType||B.defaultSkewType,r._transform=P,"rotationZ"in x&&(x.rotation=x.rotationZ),O&&"string"==typeof O&&Ft)(u=V.style)[Ft]=O,u.display="block",u.position="absolute",-1!==O.indexOf("%")&&(u.width=et(t,"width"),u.height=et(t,"height")),L.body.appendChild(V),h=Wt(V,null,!1),"simple"===P.skewType&&(h.scaleY*=Math.cos(h.skewX*j)),P.svg&&(p=P.xOrigin,d=P.yOrigin,h.x-=P.xOffset,h.y-=P.yOffset,(x.transformOrigin||x.svgOrigin)&&(O={},jt(t,ht(x.transformOrigin),O,x.svgOrigin,x.smoothOrigin,!0),p=O.xOrigin,d=O.yOrigin,h.x-=O.xOffset-P.xOffset,h.y-=O.yOffset-P.yOffset),(p||d)&&(m=Gt(V,!0),h.x-=p-(p*m[0]+d*m[2]),h.y-=d-(p*m[1]+d*m[3]))),L.body.removeChild(V),h.perspective||(h.perspective=P.perspective),null!=x.xPercent&&(h.xPercent=_t(x.xPercent,P.xPercent)),null!=x.yPercent&&(h.yPercent=_t(x.yPercent,P.yPercent));else if("object"===(void 0===x?"undefined":re(x))){if(h={scaleX:_t(null!=x.scaleX?x.scaleX:x.scale,P.scaleX),scaleY:_t(null!=x.scaleY?x.scaleY:x.scale,P.scaleY),scaleZ:_t(x.scaleZ,P.scaleZ),x:_t(x.x,P.x),y:_t(x.y,P.y),z:_t(x.z,P.z),xPercent:_t(x.xPercent,P.xPercent),yPercent:_t(x.yPercent,P.yPercent),perspective:_t(x.transformPerspective,P.perspective)},null!=(f=x.directionalRotation))if("object"===(void 0===f?"undefined":re(f)))for(u in f)x[u]=f[u];else x.rotation=f;"string"==typeof x.x&&-1!==x.x.indexOf("%")&&(h.x=0,h.xPercent=_t(x.x,P.xPercent)),"string"==typeof x.y&&-1!==x.y.indexOf("%")&&(h.y=0,h.yPercent=_t(x.y,P.yPercent)),h.rotation=ct("rotation"in x?x.rotation:"shortRotation"in x?x.shortRotation+"_short":P.rotation,P.rotation,"rotation",w),It&&(h.rotationX=ct("rotationX"in x?x.rotationX:"shortRotationX"in x?x.shortRotationX+"_short":P.rotationX||0,P.rotationX,"rotationX",w),h.rotationY=ct("rotationY"in x?x.rotationY:"shortRotationY"in x?x.shortRotationY+"_short":P.rotationY||0,P.rotationY,"rotationY",w)),h.skewX=ct(x.skewX,P.skewX),h.skewY=ct(x.skewY,P.skewY)}for(It&&null!=x.force3D&&(P.force3D=x.force3D,c=!0),(_=P.force3D||P.z||P.rotationX||P.rotationY||h.z||h.rotationX||h.rotationY||h.perspective)||null==x.scale||(h.scaleZ=1);-1<--T;)(1e-6<(O=h[g=zt[T]]-P[g])||O<-1e-6||null!=x[g]||null!=I[g])&&(c=!0,s=new xt(P,g,P[g],O,s),g in w&&(s.e=w[g]),s.xs0=0,s.plugin=n,r._overwriteProps.push(s.n));return O=x.transformOrigin,P.svg&&(O||x.svgOrigin)&&(p=P.xOffset,d=P.yOffset,jt(t,ht(O),h,x.svgOrigin,x.smoothOrigin),s=wt(P,"xOrigin",(y?P:h).xOrigin,h.xOrigin,s,b),s=wt(P,"yOrigin",(y?P:h).yOrigin,h.yOrigin,s,b),p===P.xOffset&&d===P.yOffset||(s=wt(P,"xOffset",y?p:P.xOffset,P.xOffset,s,b),s=wt(P,"yOffset",y?d:P.yOffset,P.yOffset,s,b)),O="0px 0px"),(O||It&&_&&P.zOrigin)&&(Ft?(c=!0,g=qt,O=(O||et(t,g,S,!1,"50% 50%"))+"",(s=new xt(v,g,0,0,s,-1,b)).b=v[g],s.plugin=n,s.xs0=s.e=It?(u=P.zOrigin,O=O.split(" "),P.zOrigin=(2<O.length&&(0===u||"0px"!==O[2])?parseFloat(O[2]):u)||0,s.xs0=s.e=O[0]+" "+(O[1]||"50%")+" 0px",(s=new xt(P,"zOrigin",0,0,s,-1,s.n)).b=u,P.zOrigin):O):ht(O+"",P)),c&&(r._transformType=P.svg&&At||!_&&3!==this._transformType?2:3),o&&(a[i]=o),l&&(a.scale=l),s},prefix:!0}),St("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),St("borderRadius",{defaultValue:"0px",parser:function(t,e,i,r,s,n){e=this.format(e);var a,o,l,h,u,_,c,f,p,d,m,g,y,v,T,x,w=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],b=t.style;for(p=parseFloat(t.offsetWidth),d=parseFloat(t.offsetHeight),a=e.split(" "),o=0;o<w.length;o++)this.p.indexOf("border")&&(w[o]=K(w[o])),-1!==(u=h=et(t,w[o],S,!1,"0px")).indexOf(" ")&&(u=(h=u.split(" "))[0],h=h[1]),_=l=a[o],c=parseFloat(u),g=u.substr((c+"").length),""===(m=(y="="===_.charAt(1))?(f=parseInt(_.charAt(0)+"1",10),_=_.substr(2),f*=parseFloat(_),_.substr((f+"").length-(f<0?1:0))||""):(f=parseFloat(_),_.substr((f+"").length)))&&(m=P[i]||g),m!==g&&(v=it(t,"borderLeft",c,g),T=it(t,"borderTop",c,g),h="%"===m?(u=v/p*100+"%",T/d*100+"%"):"em"===m?(u=v/(x=it(t,"borderLeft",1,"em"))+"em",T/x+"em"):(u=v+"px",T+"px"),y&&(_=parseFloat(u)+f+m,l=parseFloat(h)+f+m)),s=bt(b,w[o],u+" "+h,_+" "+l,!1,"0px",s);return s},prefix:!0,formatter:yt("0px 0px 0px 0px",!1,!0)}),St("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,i,r,s,n){return bt(t.style,i,this.format(et(t,i,S,!1,"0px 0px")),this.format(e),!1,"0px",s)},prefix:!0,formatter:yt("0px 0px",!1,!0)}),St("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,r,s,n){var a,o,l,h,u,_,c="background-position",f=S||tt(t,null),p=this.format((f?O?f.getPropertyValue(c+"-x")+" "+f.getPropertyValue(c+"-y"):f.getPropertyValue(c):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),d=this.format(e);if(-1!==p.indexOf("%")!=(-1!==d.indexOf("%"))&&d.split(",").length<2&&(_=et(t,"backgroundImage").replace(b,""))&&"none"!==_){for(a=p.split(" "),o=d.split(" "),H.setAttribute("src",_),l=2;-1<--l;)(h=-1!==(p=a[l]).indexOf("%"))!==(-1!==o[l].indexOf("%"))&&(u=0===l?t.offsetWidth-H.width:t.offsetHeight-H.height,a[l]=h?parseFloat(p)/100*u+"px":parseFloat(p)/u*100+"%");p=a.join(" ")}return this.parseComplex(t.style,p,d,s,n)},formatter:ht}),St("backgroundSize",{defaultValue:"0 0",formatter:function(t){return"co"===(t+="").substr(0,2)?t:ht(-1===t.indexOf(" ")?t+" "+t:t)}}),St("perspective",{defaultValue:"0px",prefix:!0}),St("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),St("transformStyle",{prefix:!0}),St("backfaceVisibility",{prefix:!0}),St("userSelect",{prefix:!0}),St("margin",{parser:vt("marginTop,marginRight,marginBottom,marginLeft")}),St("padding",{parser:vt("paddingTop,paddingRight,paddingBottom,paddingLeft")}),St("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,r,s,n){var a,o,l;return e=O<9?(o=t.currentStyle,l=O<8?" ":",",a="rect("+o.clipTop+l+o.clipRight+l+o.clipBottom+l+o.clipLeft+")",this.format(e).split(",").join(l)):(a=this.format(et(t,this.p,S,!1,this.dflt)),this.format(e)),this.parseComplex(t.style,a,e,s,n)}}),St("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),St("autoRound,strictUnits",{parser:function(t,e,i,r,s){return s}}),St("border",{defaultValue:"0px solid #000",parser:function(t,e,i,r,s,n){var a=et(t,"borderTopWidth",S,!1,"0px"),o=this.format(e).split(" "),l=o[0].replace(D,"");return"px"!==l&&(a=parseFloat(a)/it(t,"borderTopWidth",1,l)+l),this.parseComplex(t.style,this.format(a+" "+et(t,"borderTopStyle",S,!1,"solid")+" "+et(t,"borderTopColor",S,!1,"#000")),o.join(" "),s,n)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(gt)||["#000"])[0]}}),St("borderWidth",{parser:vt("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),St("float,cssFloat,styleFloat",{parser:function(t,e,i,r,s,n){var a=t.style,o="cssFloat"in a?"cssFloat":"styleFloat";return new xt(a,o,0,0,s,-1,i,!1,0,a[o],e)}});var Qt=function(t){var e,i=this.t,r=i.filter||et(this.data,"filter")||"",s=this.s+this.c*t|0;100===s&&(e=-1===r.indexOf("atrix(")&&-1===r.indexOf("radient(")&&-1===r.indexOf("oader(")?(i.removeAttribute("filter"),!et(this.data,"filter")):(i.filter=r.replace(a,""),!0)),e||(this.xn1&&(i.filter=r=r||"alpha(opacity="+s+")"),-1===r.indexOf("pacity")?0===s&&this.xn1||(i.filter=r+" alpha(opacity="+s+")"):i.filter=r.replace(z,"opacity="+s))};St("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,r,s,n){var a=parseFloat(et(t,"opacity",S,!1,"1")),o=t.style,l="autoAlpha"===i;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),l&&1===a&&"hidden"===et(t,"visibility",S)&&0!==e&&(a=0),W?s=new xt(o,"opacity",a,e-a,s):((s=new xt(o,"opacity",100*a,100*(e-a),s)).xn1=l?1:0,o.zoom=1,s.type=2,s.b="alpha(opacity="+s.s+")",s.e="alpha(opacity="+(s.s+s.c)+")",s.data=t,s.plugin=n,s.setRatio=Qt),l&&((s=new xt(o,"visibility",0,0,s,-1,null,!1,0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit")).xs0="inherit",r._overwriteProps.push(s.n),r._overwriteProps.push(i)),s}});var Jt=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(o,"-$1").toLowerCase())):t.removeAttribute(e))},Kt=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Jt(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};St("className",{parser:function(t,e,i,r,s,n,a){var o,l,h,u,_,c=t.getAttribute("class")||"",f=t.style.cssText;if((s=r._classNamePT=new xt(t,i,0,0,s,2)).setRatio=Kt,s.pr=-11,p=!0,s.b=c,l=st(t,S),h=t._gsClassPT){for(u={},_=h.data;_;)u[_.p]=1,_=_._next;h.setRatio(1)}return(t._gsClassPT=s).e="="!==e.charAt(1)?e:c.replace(new RegExp("(?:\\s|^)"+e.substr(2)+"(?![\\w-])"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),t.setAttribute("class",s.e),o=nt(t,l,st(t),a,u),t.setAttribute("class",c),s.data=o.firstMPT,t.style.cssText=f,s=s.xfirst=r.parse(t,o.difs,s,n)}});var te=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,r,s,n,a=this.t.style,o=m.transform.parse;if("all"===this.e)s=!(a.cssText="");else for(r=(e=this.e.split(" ").join("").split(",")).length;-1<--r;)i=e[r],m[i]&&(m[i].parse===o?s=!0:i="transformOrigin"===i?qt:m[i].p),Jt(a,i);s&&(Jt(a,Ft),(n=this.t._gsTransform)&&(n.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(St("clearProps",{parser:function(t,e,i,r,s){return(s=new xt(t,i,0,0,s,2)).setRatio=te,s.e=e,s.pr=-10,s.data=r._tween,p=!0,s}}),t="bezier,throwProps,physicsProps,physics2D".split(","),Pt=t.length;Pt--;)kt(t[Pt]);(t=B.prototype)._firstPT=t._lastParsedTransform=t._transform=null,t._onInitTween=function(t,e,i,r){if(!t.nodeType)return!1;this._target=A=t,this._tween=i,this._vars=e,R=r,k=e.autoRound,p=!1,P=e.suffixMap||B.suffixMap,S=tt(t,""),d=this._overwriteProps;var s,n,a,o,l,h,u,_,c,f=t.style;if(g&&""===f.zIndex&&("auto"!==(s=et(t,"zIndex",S))&&""!==s||this._addLazySet(f,"zIndex",0)),"string"==typeof e&&(o=f.cssText,s=st(t,S),f.cssText=o+";"+e,s=nt(t,s,st(t)).difs,!W&&x.test(e)&&(s.opacity=parseFloat(RegExp.$1)),e=s,f.cssText=o),e.className?this._firstPT=n=m.className.parse(t,e.className,"className",this,null,null,e):this._firstPT=n=this.parse(t,e,null),this._transformType){for(c=3===this._transformType,Ft?y&&(g=!0,""===f.zIndex&&("auto"!==(u=et(t,"zIndex",S))&&""!==u||this._addLazySet(f,"zIndex",0)),v&&this._addLazySet(f,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(c?"visible":"hidden"))):f.zoom=1,a=n;a&&a._next;)a=a._next;_=new xt(t,"transform",0,0,null,2),this._linkCSSP(_,null,a),_.setRatio=Ft?Zt:$t,_.data=this._transform||Wt(t,S,!0),_.tween=i,_.pr=-1,d.pop()}if(p){for(;n;){for(h=n._next,a=o;a&&a.pr>n.pr;)a=a._next;(n._prev=a?a._prev:l)?n._prev._next=n:o=n,(n._next=a)?a._prev=n:l=n,n=h}this._firstPT=o}return!0},t.parse=function(t,e,i,r){var s,n,a,o,l,h,u,_,c,f,p=t.style;for(s in e){if("function"==typeof(h=e[s])&&(h=h(R,A)),n=m[s])i=n.parse(t,h,s,this,i,r,e);else{if("--"===s.substr(0,2)){this._tween._propLookup[s]=this._addTween.call(this._tween,t.style,"setProperty",tt(t).getPropertyValue(s)+"",h+"",s,!1,s);continue}l=et(t,s,S)+"",c="string"==typeof h,"color"===s||"fill"===s||"stroke"===s||-1!==s.indexOf("Color")||c&&w.test(h)?(c||(h=(3<(h=dt(h)).length?"rgba(":"rgb(")+h.join(",")+")"),i=bt(p,s,l,h,!0,"transparent",i,0,r)):c&&q.test(h)?i=bt(p,s,l,h,!0,null,i,0,r):(u=(a=parseFloat(l))||0===a?l.substr((a+"").length):"",""!==l&&"auto"!==l||(u="width"===s||"height"===s?(a=lt(t,s,S),"px"):"left"===s||"top"===s?(a=rt(t,s,S),"px"):(a="opacity"!==s?0:1,"")),""===(_=(f=c&&"="===h.charAt(1))?(o=parseInt(h.charAt(0)+"1",10),h=h.substr(2),o*=parseFloat(h),h.replace(D,"")):(o=parseFloat(h),c?h.replace(D,""):""))&&(_=s in P?P[s]:u),h=o||0===o?(f?o+a:o)+_:e[s],u!==_&&(""===_&&"lineHeight"!==s||(o||0===o)&&a&&(a=it(t,s,a,u),"%"===_?(a/=it(t,s,100,"%")/100,!0!==e.strictUnits&&(l=a+"%")):"em"===_||"rem"===_||"vw"===_||"vh"===_?a/=it(t,s,1,_):"px"!==_&&(o=it(t,s,o,_),_="px"),f&&(o||0===o)&&(h=o+a+_))),f&&(o+=a),!a&&0!==a||!o&&0!==o?void 0!==p[s]&&(h||h+""!="NaN"&&null!=h)?(i=new xt(p,s,o||a||0,0,i,-1,s,!1,0,l,h)).xs0="none"!==h||"display"!==s&&-1===s.indexOf("Style")?h:l:Z("invalid "+s+" tween value: "+e[s]):(i=new xt(p,s,a,o-a,i,0,s,!1!==k&&("px"===_||"zIndex"===s),0,l,h)).xs0=_)}r&&i&&!i.plugin&&(i.plugin=r)}return i},t.setRatio=function(t){var e,i,r,s=this._firstPT;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||-1e-6===this._tween._rawPrevTime)for(;s;){if(e=s.c*t+s.s,s.r?e=s.r(e):e<1e-6&&-1e-6<e&&(e=0),s.type)if(1===s.type)if(2===(r=s.l))s.t[s.p]=s.xs0+e+s.xs1+s.xn1+s.xs2;else if(3===r)s.t[s.p]=s.xs0+e+s.xs1+s.xn1+s.xs2+s.xn2+s.xs3;else if(4===r)s.t[s.p]=s.xs0+e+s.xs1+s.xn1+s.xs2+s.xn2+s.xs3+s.xn3+s.xs4;else if(5===r)s.t[s.p]=s.xs0+e+s.xs1+s.xn1+s.xs2+s.xn2+s.xs3+s.xn3+s.xs4+s.xn4+s.xs5;else{for(i=s.xs0+e+s.xs1,r=1;r<s.l;r++)i+=s["xn"+r]+s["xs"+(r+1)];s.t[s.p]=i}else-1===s.type?s.t[s.p]=s.xs0:s.setRatio&&s.setRatio(t);else s.t[s.p]=e+s.xs0;s=s._next}else for(;s;)2!==s.type?s.t[s.p]=s.b:s.setRatio(t),s=s._next;else for(;s;){if(2!==s.type)if(s.r&&-1!==s.type)if(e=s.r(s.s+s.c),s.type){if(1===s.type){for(r=s.l,i=s.xs0+e+s.xs1,r=1;r<s.l;r++)i+=s["xn"+r]+s["xs"+(r+1)];s.t[s.p]=i}}else s.t[s.p]=e+s.xs0;else s.t[s.p]=s.e;else s.setRatio(t);s=s._next}},t._enableTransforms=function(t){this._transform=this._transform||Wt(this._target,S,!0),this._transformType=this._transform.svg&&At||!t&&3!==this._transformType?2:3};var ee=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};t._addLazySet=function(t,e,i){var r=this._firstPT=new xt(t,e,0,0,this._firstPT,2);r.e=i,r.setRatio=ee,r.data=this},t._linkCSSP=function(t,e,i,r){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,r=!0),i?i._next=t:r||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},t._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&(e.r=t[e.p]),e=e._next},t._kill=function(t){var e,i,r,s=t;if(t.autoAlpha||t.alpha){for(i in s={},t)s[i]=t[i];s.opacity=1,s.autoAlpha&&(s.visibility=1)}for(t.className&&(e=this._classNamePT)&&((r=e.xfirst)&&r._prev?this._linkCSSP(r._prev,e._next,r._prev._prev):r===this._firstPT&&(this._firstPT=e._next),e._next&&this._linkCSSP(e._next,e._next._next,r._prev),this._classNamePT=null),e=this._firstPT;e;)e.plugin&&e.plugin!==i&&e.plugin._kill&&(e.plugin._kill(t),i=e.plugin),e=e._next;return n.prototype._kill.call(this,s)};var ie=function t(e,i,r){var s,n,a,o;if(e.slice)for(n=e.length;-1<--n;)t(e[n],i,r);else for(n=(s=e.childNodes).length;-1<--n;)o=(a=s[n]).type,a.style&&(i.push(st(a)),r&&r.push(a)),1!==o&&9!==o&&11!==o||!a.childNodes.length||t(a,i,r)};return B.cascadeTo=function(t,e,i){var r,s,n,a,o=N.to(t,e,i),l=[o],h=[],u=[],_=[],c=N._internals.reservedProps;for(t=o._targets||o.target,ie(t,h,_),o.render(e,!0,!0),ie(t,u),o.render(0,!0,!0),o._enabled(!0),r=_.length;-1<--r;)if((s=nt(_[r],h[r],u[r])).firstMPT){for(n in s=s.difs,i)c[n]&&(s[n]=i[n]);for(n in a={},s)a[n]=h[r][n];l.push(N.fromTo(_[r],e,a,s))}return l},n.activate([B]),B},!0),e=se._gsDefine.plugin({propName:"roundProps",version:"1.7.0",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}),l=function(e){var i=e<1?Math.pow(10,(e+"").length-2):1;return function(t){return(Math.round(t/e)*e*i|0)/i}},h=function(t,e){for(;t;)t.f||t.blob||(t.m=e||Math.round),t=t._next},(r=e.prototype)._onInitAllProps=function(){var t,e,i,r,s=this._tween,n=s.vars.roundProps,a={},o=s._propLookup.roundProps;if("object"!==(void 0===n?"undefined":re(n))||n.push)for("string"==typeof n&&(n=n.split(",")),i=n.length;-1<--i;)a[n[i]]=Math.round;else for(r in n)a[r]=l(n[r]);for(r in a)for(t=s._firstPT;t;)e=t._next,t.pg?t.t._mod(a):t.n===r&&(2===t.f&&t.t?h(t.t._firstPT,a[r]):(this._add(t.t,r,t.s,t.c,a[r]),e&&(e._prev=t._prev),t._prev?t._prev._next=e:s._firstPT===t&&(s._firstPT=e),t._next=t._prev=null,s._propLookup[r]=o)),t=e;return!1},r._add=function(t,e,i,r,s){this._addTween(t,e,i,i+r,e,s||Math.round),this._overwriteProps.push(e)},se._gsDefine.plugin({propName:"attr",API:2,version:"0.6.1",init:function(t,e,i,r){var s,n;if("function"!=typeof t.setAttribute)return!1;for(s in e)"function"==typeof(n=e[s])&&(n=n(r,t)),this._addTween(t,"setAttribute",t.getAttribute(s)+"",n+"",s,!1,s),this._overwriteProps.push(s);return!0}}),se._gsDefine.plugin({propName:"directionalRotation",version:"0.3.1",API:2,init:function(t,e,i,r){"object"!==(void 0===e?"undefined":re(e))&&(e={rotation:e}),this.finals={};var s,n,a,o,l,h,u=!0===e.useRadians?2*Math.PI:360;for(s in e)"useRadians"!==s&&("function"==typeof(o=e[s])&&(o=o(r,t)),n=(h=(o+"").split("_"))[0],a=parseFloat("function"!=typeof t[s]?t[s]:t[s.indexOf("set")||"function"!=typeof t["get"+s.substr(3)]?s:"get"+s.substr(3)]()),l=(o=this.finals[s]="string"==typeof n&&"="===n.charAt(1)?a+parseInt(n.charAt(0)+"1",10)*Number(n.substr(2)):Number(n)||0)-a,h.length&&(-1!==(n=h.join("_")).indexOf("short")&&(l%=u)!==l%(u/2)&&(l=l<0?l+u:l-u),-1!==n.indexOf("_cw")&&l<0?l=(l+9999999999*u)%u-(l/u|0)*u:-1!==n.indexOf("ccw")&&0<l&&(l=(l-9999999999*u)%u-(l/u|0)*u)),(1e-6<l||l<-1e-6)&&(this._addTween(t,s,a,a+l,s),this._overwriteProps.push(s)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}})._autoCSS=!0,se._gsDefine("easing.Back",["easing.Ease"],function(m){var i,r,e,t,s=se.GreenSockGlobals||se,n=s.com.greensock,a=2*Math.PI,o=Math.PI/2,l=n._class,h=function(t,e){var i=l("easing."+t,function(){},!0),r=i.prototype=new m;return r.constructor=i,r.getRatio=e,i},u=m.register||function(){},_=function(t,e,i,r,s){var n=l("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new r},!0);return u(n,t),n},g=function(t,e,i){this.t=t,this.v=e,i&&(((this.next=i).prev=this).c=i.v-e,this.gap=i.t-t)},c=function(t,e){var i=l("easing."+t,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),r=i.prototype=new m;return r.constructor=i,r.getRatio=e,r.config=function(t){return new i(t)},i},f=_("Back",c("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),c("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),c("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),p=l("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:1<t&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=!0===i},!0),d=p.prototype=new m;return d.constructor=p,d.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1===t?0:1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},p.ease=new p(.7,.7),d.config=p.config=function(t,e,i){return new p(t,e,i)},(d=(i=l("easing.SteppedEase",function(t,e){t=t||1,this._p1=1/t,this._p2=t+(e?0:1),this._p3=e?1:0},!0)).prototype=new m).constructor=i,d.getRatio=function(t){return t<0?t=0:1<=t&&(t=.999999999),((this._p2*t|0)+this._p3)*this._p1},d.config=i.config=function(t,e){return new i(t,e)},(d=(r=l("easing.ExpoScaleEase",function(t,e,i){this._p1=Math.log(e/t),this._p2=e-t,this._p3=t,this._ease=i},!0)).prototype=new m).constructor=r,d.getRatio=function(t){return this._ease&&(t=this._ease.getRatio(t)),(this._p3*Math.exp(this._p1*t)-this._p3)/this._p2},d.config=r.config=function(t,e,i){return new r(t,e,i)},(d=(e=l("easing.RoughEase",function(t){for(var e,i,r,s,n,a,o=(t=t||{}).taper||"none",l=[],h=0,u=0|(t.points||20),_=u,c=!1!==t.randomize,f=!0===t.clamp,p=t.template instanceof m?t.template:null,d="number"==typeof t.strength?.4*t.strength:.4;-1<--_;)e=c?Math.random():1/u*_,i=p?p.getRatio(e):e,r="none"===o?d:"out"===o?(s=1-e)*s*d:"in"===o?e*e*d:e<.5?(s=2*e)*s*.5*d:(s=2*(1-e))*s*.5*d,c?i+=Math.random()*r-.5*r:_%2?i+=.5*r:i-=.5*r,f&&(1<i?i=1:i<0&&(i=0)),l[h++]={x:e,y:i};for(l.sort(function(t,e){return t.x-e.x}),a=new g(1,1,null),_=u;-1<--_;)n=l[_],a=new g(n.x,n.y,a);this._prev=new g(0,0,0!==a.t?a:a.next)},!0)).prototype=new m).constructor=e,d.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return(this._prev=e).v+(t-e.t)/e.gap*e.c},d.config=function(t){return new e(t)},e.ease=new e,_("Bounce",h("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),h("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),h("BounceInOut",function(t){var e=t<.5;return(t=e?1-2*t:2*t-1)<1/2.75?t*=7.5625*t:t=t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),_("Circ",h("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),h("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),h("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),_("Elastic",(t=function(t,e,i){var r=l("easing."+t,function(t,e){this._p1=1<=t?t:1,this._p2=(e||i)/(t<1?t:1),this._p3=this._p2/a*(Math.asin(1/this._p1)||0),this._p2=a/this._p2},!0),s=r.prototype=new m;return s.constructor=r,s.getRatio=e,s.config=function(t,e){return new r(t,e)},r})("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),t("ElasticIn",function(t){return-this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)},.3),t("ElasticInOut",function(t){return(t*=2)<1?this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)*-.5:this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),_("Expo",h("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),h("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),h("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),_("Sine",h("SineOut",function(t){return Math.sin(t*o)}),h("SineIn",function(t){return 1-Math.cos(t*o)}),h("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),l("easing.EaseLookup",{find:function(t){return m.map[t]}},!0),u(s.SlowMo,"SlowMo","ease,"),u(e,"RoughEase","ease,"),u(i,"SteppedEase","ease,"),f},!0)}),se._gsDefine&&se._gsQueue.pop()(),function(f,p){var d={},s=f.document,m=f.GreenSockGlobals=f.GreenSockGlobals||f,t=m[p];if(t)return void 0!==st&&st.exports&&(st.exports=t);var e,i,r,g,y,n,a,v=function(t){var e,i=t.split("."),r=m;for(e=0;e<i.length;e++)r[i[e]]=r=r[i[e]]||{};return r},_=v("com.greensock"),T=1e-10,l=function(t){var e,i=[],r=t.length;for(e=0;e!==r;i.push(t[e++]));return i},x=function(){},w=(n=Object.prototype.toString,a=n.call([]),function(t){return null!=t&&(t instanceof Array||"object"===(void 0===t?"undefined":re(t))&&!!t.push&&n.call(t)===a)}),b={},o=function o(l,h,u,_){this.sc=b[l]?b[l].sc:[],(b[l]=this).gsClass=null,this.func=u;var c=[];this.check=function(t){for(var e,i,r,s,n=h.length,a=n;-1<--n;)(e=b[h[n]]||new o(h[n],[])).gsClass?(c[n]=e.gsClass,a--):t&&e.sc.push(this);if(0===a&&u){if(r=(i=("com.greensock."+l).split(".")).pop(),s=v(i.join("."))[r]=this.gsClass=u.apply(u,c),_)if(m[r]=d[r]=s,void 0!==st&&st.exports)if(l===p)for(n in st.exports=d[p]=s,d)s[n]=d[n];else d[p]&&(d[p][r]=s);else"function"==typeof define&&define.amd&&define((f.GreenSockAMDPath?f.GreenSockAMDPath+"/":"")+l.split(".").pop(),[],function(){return s});for(n=0;n<this.sc.length;n++)this.sc[n].check()}},this.check(!0)},h=f._gsDefine=function(t,e,i,r){return new o(t,e,i,r)},c=_._class=function(t,e,i){return e=e||function(){},h(t,[],function(){return e},i),e};h.globals=m;var u=[0,0,1,1],P=c("easing.Ease",function(t,e,i,r){this._func=t,this._type=i||0,this._power=r||0,this._params=e?u.concat(e):u},!0),O=P.map={},S=P.register=function(t,e,i,r){for(var s,n,a,o,l=e.split(","),h=l.length,u=(i||"easeIn,easeOut,easeInOut").split(",");-1<--h;)for(n=l[h],s=r?c("easing."+n,null,!0):_.easing[n]||{},a=u.length;-1<--a;)o=u[a],O[n+"."+o]=O[o+n]=s[o]=t.getRatio?t:t[o]||new t};for((r=P.prototype)._calcEnd=!1,r.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,r=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?r*=r:2===i?r*=r*r:3===i?r*=r*r*r:4===i&&(r*=r*r*r*r),1===e?1-r:2===e?r:t<.5?r/2:1-r/2},i=(e=["Linear","Quad","Cubic","Quart","Quint,Strong"]).length;-1<--i;)r=e[i]+",Power"+i,S(new P(null,null,1,i),r,"easeOut",!0),S(new P(null,null,2,i),r,"easeIn"+(0===i?",easeNone":"")),S(new P(null,null,3,i),r,"easeInOut");O.linear=_.easing.Linear.easeIn,O.swing=_.easing.Quad.easeInOut;var k=c("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});(r=k.prototype).addEventListener=function(t,e,i,r,s){s=s||0;var n,a,o=this._listeners[t],l=0;for(this!==g||y||g.wake(),null==o&&(this._listeners[t]=o=[]),a=o.length;-1<--a;)(n=o[a]).c===e&&n.s===i?o.splice(a,1):0===l&&n.pr<s&&(l=a+1);o.splice(l,0,{c:e,s:i,up:r,pr:s})},r.removeEventListener=function(t,e){var i,r=this._listeners[t];if(r)for(i=r.length;-1<--i;)if(r[i].c===e)return void r.splice(i,1)},r.dispatchEvent=function(t){var e,i,r,s=this._listeners[t];if(s)for(1<(e=s.length)&&(s=s.slice(0)),i=this._eventTarget;-1<--e;)(r=s[e])&&(r.up?r.c.call(r.s||i,{type:t,target:i}):r.c.call(r.s||i))};var A=f.requestAnimationFrame,R=f.cancelAnimationFrame,C=Date.now||function(){return(new Date).getTime()},M=C();for(i=(e=["ms","moz","webkit","o"]).length;-1<--i&&!A;)A=f[e[i]+"RequestAnimationFrame"],R=f[e[i]+"CancelAnimationFrame"]||f[e[i]+"CancelRequestAnimationFrame"];c("Ticker",function(t,e){var n,a,o,l,h,u=this,_=C(),i=!(!1===e||!A)&&"auto",c=500,f=33,r=function t(e){var i,r,s=C()-M;c<s&&(_+=s-f),M+=s,u.time=(M-_)/1e3,i=u.time-h,(!n||0<i||!0===e)&&(u.frame++,h+=i+(l<=i?.004:l-i),r=!0),!0!==e&&(o=a(t)),r&&u.dispatchEvent("tick")};k.call(u),u.time=u.frame=0,u.tick=function(){r(!0)},u.lagSmoothing=function(t,e){if(!arguments.length)return c<1e10;c=t||1e10,f=Math.min(e,c,0)},u.sleep=function(){null!=o&&(i&&R?R(o):clearTimeout(o),a=x,o=null,u===g&&(y=!1))},u.wake=function(t){null!==o?u.sleep():t?_+=-M+(M=C()):10<u.frame&&(M=C()-c+5),a=0===n?x:i&&A?A:function(t){return setTimeout(t,1e3*(h-u.time)+1|0)},u===g&&(y=!0),r(2)},u.fps=function(t){if(!arguments.length)return n;l=1/((n=t)||60),h=this.time+l,u.wake()},u.useRAF=function(t){if(!arguments.length)return i;u.sleep(),i=t,u.fps(n)},u.fps(t),setTimeout(function(){"auto"===i&&u.frame<5&&"hidden"!==(s||{}).visibilityState&&u.useRAF(!1)},1500)}),(r=_.Ticker.prototype=new _.events.EventDispatcher).constructor=_.Ticker;var D=c("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=!0===e.immediateRender,this.data=e.data,this._reversed=!0===e.reversed,Z){y||g.wake();var i=this.vars.useFrames?$:Z;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});g=D.ticker=new _.Ticker,(r=D.prototype)._dirty=r._gc=r._initted=r._paused=!1,r._totalTime=r._time=0,r._rawPrevTime=-1,r._next=r._last=r._onUpdate=r._timeline=r.timeline=null,r._paused=!1;!function t(){y&&2e3<C()-M&&("hidden"!==(s||{}).visibilityState||!g.lagSmoothing())&&g.wake();var e=setTimeout(t,2e3);e.unref&&e.unref()}(),r.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},r.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},r.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},r.seek=function(t,e){return this.totalTime(Number(t),!1!==e)},r.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,!1!==e,!0)},r.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},r.render=function(t,e,i){},r.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},r.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<i+this.totalDuration()/this._timeScale-1e-7},r._enabled=function(t,e){return y||g.wake(),this._gc=!t,this._active=this.isActive(),!0!==e&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},r._kill=function(t,e){return this._enabled(!1,!1)},r.kill=function(t,e){return this._kill(t,e),this},r._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},r._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();-1<--e;)"{self}"===t[e]&&(i[e]=this);return i},r._callback=function(t){var e=this.vars,i=e[t],r=e[t+"Params"],s=e[t+"Scope"]||e.callbackScope||this;switch(r?r.length:0){case 0:i.call(s);break;case 1:i.call(s,r[0]);break;case 2:i.call(s,r[0],r[1]);break;default:i.apply(s,r)}},r.eventCallback=function(t,e,i,r){if("on"===(t||"").substr(0,2)){var s=this.vars;if(1===arguments.length)return s[t];null==e?delete s[t]:(s[t]=e,s[t+"Params"]=w(i)&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,s[t+"Scope"]=r),"onUpdate"===t&&(this._onUpdate=e)}return this},r.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},r.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&0<this._time&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},r.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},r.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},r.totalTime=function(t,e,i){if(y||g.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var r=this._totalDuration,s=this._timeline;if(r<t&&!i&&(t=r),this._startTime=(this._paused?this._pauseTime:s._time)-(this._reversed?r-t:t)/this._timeScale,s._dirty||this._uncache(!1),s._timeline)for(;s._timeline;)s._timeline._time!==(s._startTime+s._totalTime)/s._timeScale&&s.totalTime(s._totalTime,!0),s=s._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(q.length&&J(),this.render(t,e,!1),q.length&&J())}return this},r.progress=r.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},r.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},r.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},r.timeScale=function(t){if(!arguments.length)return this._timeScale;var e,i;for(t=t||T,this._timeline&&this._timeline.smoothChildTiming&&(i=(e=this._pauseTime)||0===e?e:this._timeline.totalTime(),this._startTime=i-(i-this._startTime)*this._timeScale/t),this._timeScale=t,i=this.timeline;i&&i.timeline;)i._dirty=!0,i.totalDuration(),i=i.timeline;return this},r.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},r.paused=function(t){if(!arguments.length)return this._paused;var e,i,r=this._timeline;return t!=this._paused&&r&&(y||t||g.wake(),i=(e=r.rawTime())-this._pauseTime,!t&&r.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=r.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var z=c("core.SimpleTimeline",function(t){D.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});(r=z.prototype=new D).constructor=z,r.kill()._gc=!1,r._first=r._last=r._recent=null,r._sortChildren=!1,r.add=r.insert=function(t,e,i,r){var s,n;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=this.rawTime()-(t._timeline.rawTime()-t._pauseTime)),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),s=this._last,this._sortChildren)for(n=t._startTime;s&&s._startTime>n;)s=s._prev;return s?(t._next=s._next,s._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=s,this._recent=t,this._timeline&&this._uncache(!0),this},r._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},r.render=function(t,e,i){var r,s=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;s;)r=s._next,(s._active||t>=s._startTime&&!s._paused&&!s._gc)&&(s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,i):s.render((t-s._startTime)*s._timeScale,e,i)),s=r},r.rawTime=function(){return y||g.wake(),this._totalTime};var F=c("TweenLite",function(t,e,i){if(D.call(this,e,i),this.render=F.prototype.render,null==t)throw"Cannot tween a null target.";this.target=t="string"!=typeof t?t:F.selector(t)||t;var r,s,n,a=t.jquery||t.length&&t!==f&&t[0]&&(t[0]===f||t[0].nodeType&&t[0].style&&!t.nodeType),o=this.vars.overwrite;if(this._overwrite=o=null==o?W[F.defaultOverwrite]:"number"==typeof o?o>>0:W[o],(a||t instanceof Array||t.push&&w(t))&&"number"!=typeof t[0])for(this._targets=n=l(t),this._propLookup=[],this._siblings=[],r=0;r<n.length;r++)(s=n[r])?"string"!=typeof s?s.length&&s!==f&&s[0]&&(s[0]===f||s[0].nodeType&&s[0].style&&!s.nodeType)?(n.splice(r--,1),this._targets=n=n.concat(l(s))):(this._siblings[r]=K(s,this,!1),1===o&&1<this._siblings[r].length&&et(s,this,null,1,this._siblings[r])):"string"==typeof(s=n[r--]=F.selector(s))&&n.splice(r+1,1):n.splice(r--,1);else this._propLookup={},this._siblings=K(t,this,!1),1===o&&1<this._siblings.length&&et(t,this,null,1,this._siblings);(this.vars.immediateRender||0===e&&0===this._delay&&!1!==this.vars.immediateRender)&&(this._time=-T,this.render(Math.min(0,-this._delay)))},!0),E=function(t){return t&&t.length&&t!==f&&t[0]&&(t[0]===f||t[0].nodeType&&t[0].style&&!t.nodeType)};(r=F.prototype=new D).constructor=F,r.kill()._gc=!1,r.ratio=0,r._firstPT=r._targets=r._overwrittenProps=r._startAt=null,r._notifyPluginsOfEnabled=r._lazy=!1,F.version="2.0.2",F.defaultEase=r._ease=new P(null,null,1,1),F.defaultOverwrite="auto",F.ticker=g,F.autoSleep=120,F.lagSmoothing=function(t,e){g.lagSmoothing(t,e)},F.selector=f.$||f.jQuery||function(t){var e=f.$||f.jQuery;return e?(F.selector=e)(t):(s||(s=f.document),s?s.querySelectorAll?s.querySelectorAll(t):s.getElementById("#"===t.charAt(0)?t.substr(1):t):t)};var q=[],I={},L=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,X=/[\+-]=-?[\.\d]/,N=function(t){for(var e,i=this._firstPT;i;)e=i.blob?1===t&&null!=this.end?this.end:t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m.call(this._tween,e,this._target||i.t,this._tween):e<1e-6&&-1e-6<e&&!i.blob&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},B=function(t,e,i,r){var s,n,a,o,l,h,u,_=[],c=0,f="",p=0;for(_.start=t,_.end=e,t=_[0]=t+"",e=_[1]=e+"",i&&(i(_),t=_[0],e=_[1]),_.length=0,s=t.match(L)||[],n=e.match(L)||[],r&&(r._next=null,r.blob=1,_._firstPT=_._applyPT=r),l=n.length,o=0;o<l;o++)u=n[o],f+=(h=e.substr(c,e.indexOf(u,c)-c))||!o?h:",",c+=h.length,p?p=(p+1)%5:"rgba("===h.substr(-5)&&(p=1),u===s[o]||s.length<=o?f+=u:(f&&(_.push(f),f=""),a=parseFloat(s[o]),_.push(a),_._firstPT={_next:_._firstPT,t:_,p:_.length-1,s:a,c:("="===u.charAt(1)?parseInt(u.charAt(0)+"1",10)*parseFloat(u.substr(2)):parseFloat(u)-a)||0,f:0,m:p&&p<4?Math.round:0}),c+=u.length;return(f+=e.substr(c))&&_.push(f),_.setRatio=N,X.test(e)&&(_.end=null),_},Y=function(t,e,i,r,s,n,a,o,l){"function"==typeof r&&(r=r(l||0,t));var h=re(t[e]),u="function"!==h?"":e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),_="get"!==i?i:u?a?t[u](a):t[u]():t[e],c="string"==typeof r&&"="===r.charAt(1),f={t:t,p:e,s:_,f:"function"===h,pg:0,n:s||e,m:n?"function"==typeof n?n:Math.round:0,pr:0,c:c?parseInt(r.charAt(0)+"1",10)*parseFloat(r.substr(2)):parseFloat(r)-_||0};if(("number"!=typeof _||"number"!=typeof r&&!c)&&(a||isNaN(_)||!c&&isNaN(r)||"boolean"==typeof _||"boolean"==typeof r?(f.fp=a,f={t:B(_,c?parseFloat(f.s)+f.c+(f.s+"").replace(/[0-9\-\.]/g,""):r,o||F.defaultStringFilter,f),p:"setRatio",s:0,c:1,f:2,pg:0,n:s||e,pr:0,m:0}):(f.s=parseFloat(_),c||(f.c=parseFloat(r)-f.s||0))),f.c)return(f._next=this._firstPT)&&(f._next._prev=f),this._firstPT=f},j=F._internals={isArray:w,isSelector:E,lazyTweens:q,blobDif:B},U=F._plugins={},V=j.tweenLookup={},H=0,G=j.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1,yoyoEase:1},W={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},$=D._rootFramesTimeline=new z,Z=D._rootTimeline=new z,Q=30,J=j.lazyRender=function(){var t,e=q.length;for(I={};-1<--e;)(t=q[e])&&!1!==t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);q.length=0};Z._startTime=g.time,$._startTime=g.frame,Z._active=$._active=!0,setTimeout(J,1),D._updateRoot=F.render=function(){var t,e,i;if(q.length&&J(),Z.render((g.time-Z._startTime)*Z._timeScale,!1,!1),$.render((g.frame-$._startTime)*$._timeScale,!1,!1),q.length&&J(),g.frame>=Q){for(i in Q=g.frame+(parseInt(F.autoSleep,10)||120),V){for(t=(e=V[i].tweens).length;-1<--t;)e[t]._gc&&e.splice(t,1);0===e.length&&delete V[i]}if((!(i=Z._first)||i._paused)&&F.autoSleep&&!$._first&&1===g._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||g.sleep()}}},g.addEventListener("tick",D._updateRoot);var K=function(t,e,i){var r,s,n=t._gsTweenID;if(V[n||(t._gsTweenID=n="t"+H++)]||(V[n]={target:t,tweens:[]}),e&&((r=V[n].tweens)[s=r.length]=e,i))for(;-1<--s;)r[s]===e&&r.splice(s,1);return V[n].tweens},tt=function(t,e,i,r){var s,n,a=t.vars.onOverwrite;return a&&(s=a(t,e,i,r)),(a=F.onOverwrite)&&(n=a(t,e,i,r)),!1!==s&&!1!==n},et=function(t,e,i,r,s){var n,a,o,l;if(1===r||4<=r){for(l=s.length,n=0;n<l;n++)if((o=s[n])!==e)o._gc||o._kill(null,t,e)&&(a=!0);else if(5===r)break;return a}var h,u=e._startTime+T,_=[],c=0,f=0===e._duration;for(n=s.length;-1<--n;)(o=s[n])===e||o._gc||o._paused||(o._timeline!==e._timeline?(h=h||it(e,0,f),0===it(o,h,f)&&(_[c++]=o)):o._startTime<=u&&o._startTime+o.totalDuration()/o._timeScale>u&&((f||!o._initted)&&u-o._startTime<=2e-10||(_[c++]=o)));for(n=c;-1<--n;)if(l=(o=_[n])._firstPT,2===r&&o._kill(i,t,e)&&(a=!0),2!==r||!o._firstPT&&o._initted&&l){if(2!==r&&!tt(o,e))continue;o._enabled(!1,!1)&&(a=!0)}return a},it=function(t,e,i){for(var r=t._timeline,s=r._timeScale,n=t._startTime;r._timeline;){if(n+=r._startTime,s*=r._timeScale,r._paused)return-100;r=r._timeline}return e<(n/=s)?n-e:i&&n===e||!t._initted&&n-e<2*T?T:(n+=t.totalDuration()/t._timeScale/s)>e+T?0:n-e-T};r._init=function(){var t,e,i,r,s,n,a=this.vars,o=this._overwrittenProps,l=this._duration,h=!!a.immediateRender,u=a.ease;if(a.startAt){for(r in this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),s={},a.startAt)s[r]=a.startAt[r];if(s.data="isStart",s.overwrite=!1,s.immediateRender=!0,s.lazy=h&&!1!==a.lazy,s.startAt=s.delay=null,s.onUpdate=a.onUpdate,s.onUpdateParams=a.onUpdateParams,s.onUpdateScope=a.onUpdateScope||a.callbackScope||this,this._startAt=F.to(this.target||{},0,s),h)if(0<this._time)this._startAt=null;else if(0!==l)return}else if(a.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{for(r in 0!==this._time&&(h=!1),i={},a)G[r]&&"autoCSS"!==r||(i[r]=a[r]);if(i.overwrite=0,i.data="isFromStart",i.lazy=h&&!1!==a.lazy,i.immediateRender=h,this._startAt=F.to(this.target,0,i),h){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=u=u?u instanceof P?u:"function"==typeof u?new P(u,a.easeParams):O[u]||F.defaultEase:F.defaultEase,a.easeParams instanceof Array&&u.config&&(this._ease=u.config.apply(u,a.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(n=this._targets.length,t=0;t<n;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],o?o[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,o,0);if(e&&F._onPluginEvent("_onInitAllProps",this),o&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),a.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=a.onUpdate,this._initted=!0},r._initProps=function(t,e,i,r,s){var n,a,o,l,h,u;if(null==t)return!1;for(n in I[t._gsTweenID]&&J(),this.vars.css||t.style&&t!==f&&t.nodeType&&U.css&&!1!==this.vars.autoCSS&&function(t,e){var i,r={};for(i in t)G[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!U[i]||U[i]&&U[i]._autoCSS)||(r[i]=t[i],delete t[i]);t.css=r}(this.vars,t),this.vars)if(u=this.vars[n],G[n])u&&(u instanceof Array||u.push&&w(u))&&-1!==u.join("").indexOf("{self}")&&(this.vars[n]=u=this._swapSelfInParams(u,this));else if(U[n]&&(l=new U[n])._onInitTween(t,this.vars[n],this,s)){for(this._firstPT=h={_next:this._firstPT,t:l,p:"setRatio",s:0,c:1,f:1,n:n,pg:1,pr:l._priority,m:0},a=l._overwriteProps.length;-1<--a;)e[l._overwriteProps[a]]=this._firstPT;(l._priority||l._onInitAllProps)&&(o=!0),(l._onDisable||l._onEnable)&&(this._notifyPluginsOfEnabled=!0),h._next&&(h._next._prev=h)}else e[n]=Y.call(this,t,n,"get",u,n,0,null,this.vars.stringFilter,s);return r&&this._kill(r,t)?this._initProps(t,e,i,r,s):1<this._overwrite&&this._firstPT&&1<i.length&&et(t,this,e,this._overwrite,i)?(this._kill(e,t),this._initProps(t,e,i,r,s)):(this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration)&&(I[t._gsTweenID]=!0),o)},r.render=function(t,e,i){var r,s,n,a,o=this._time,l=this._duration,h=this._rawPrevTime;if(l-1e-7<=t&&0<=t)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(r=!0,s="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(h<0||t<=0&&-1e-7<=t||h===T&&"isPause"!==this.data)&&h!==t&&(i=!0,T<h&&(s="onReverseComplete")),this._rawPrevTime=a=!e||t||h===t?t:T);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==o||0===l&&0<h)&&(s="onReverseComplete",r=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(0<=h&&(h!==T||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=a=!e||t||h===t?t:T)),(!this._initted||this._startAt&&this._startAt.progress())&&(i=!0);else if(this._totalTime=this._time=t,this._easeType){var u=t/l,_=this._easeType,c=this._easePower;(1===_||3===_&&.5<=u)&&(u=1-u),3===_&&(u*=2),1===c?u*=u:2===c?u*=u*u:3===c?u*=u*u*u:4===c&&(u*=u*u*u*u),this.ratio=1===_?1-u:2===_?u:t/l<.5?u/2:1-u/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==o||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=o,this._rawPrevTime=h,q.push(this),void(this._lazy=[t,e]);this._time&&!r?this.ratio=this._ease.getRatio(this._time/l):r&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==o&&0<=t&&(this._active=!0),0===o&&(this._startAt&&(0<=t?this._startAt.render(t,!0,i):s||(s="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),n=this._firstPT;n;)n.f?n.t[n.p](n.c*this.ratio+n.s):n.t[n.p]=n.c*this.ratio+n.s,n=n._next;this._onUpdate&&(t<0&&this._startAt&&-1e-4!==t&&this._startAt.render(t,!0,i),e||(this._time!==o||r||i)&&this._callback("onUpdate")),s&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&-1e-4!==t&&this._startAt.render(t,!0,i),r&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[s]&&this._callback(s),0===l&&this._rawPrevTime===T&&a!==T&&(this._rawPrevTime=0)))}},r._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:F.selector(e)||e;var r,s,n,a,o,l,h,u,_,c=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline,f=this._firstPT;if((w(e)||E(e))&&"number"!=typeof e[0])for(r=e.length;-1<--r;)this._kill(t,e[r],i)&&(l=!0);else{if(this._targets){for(r=this._targets.length;-1<--r;)if(e===this._targets[r]){o=this._propLookup[r]||{},this._overwrittenProps=this._overwrittenProps||[],s=this._overwrittenProps[r]=t?this._overwrittenProps[r]||{}:"all";break}}else{if(e!==this.target)return!1;o=this._propLookup,s=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(o){if(h=t||o,u=t!==s&&"all"!==s&&t!==o&&("object"!==(void 0===t?"undefined":re(t))||!t._tempKill),i&&(F.onOverwrite||this.vars.onOverwrite)){for(n in h)o[n]&&(_||(_=[]),_.push(n));if((_||!t)&&!tt(this,i,e,_))return!1}for(n in h)(a=o[n])&&(c&&(a.f?a.t[a.p](a.s):a.t[a.p]=a.s,l=!0),a.pg&&a.t._kill(h)&&(l=!0),a.pg&&0!==a.t._overwriteProps.length||(a._prev?a._prev._next=a._next:a===this._firstPT&&(this._firstPT=a._next),a._next&&(a._next._prev=a._prev),a._next=a._prev=null),delete o[n]),u&&(s[n]=1);!this._firstPT&&this._initted&&f&&this._enabled(!1,!1)}}return l},r.invalidate=function(){return this._notifyPluginsOfEnabled&&F._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],D.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-T,this.render(Math.min(0,-this._delay))),this},r._enabled=function(t,e){if(y||g.wake(),t&&this._gc){var i,r=this._targets;if(r)for(i=r.length;-1<--i;)this._siblings[i]=K(r[i],this,!0);else this._siblings=K(this.target,this,!0)}return D.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&F._onPluginEvent(t?"_onEnable":"_onDisable",this)},F.to=function(t,e,i){return new F(t,e,i)},F.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new F(t,e,i)},F.fromTo=function(t,e,i,r){return r.startAt=i,r.immediateRender=0!=r.immediateRender&&0!=i.immediateRender,new F(t,e,r)},F.delayedCall=function(t,e,i,r,s){return new F(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:r,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:s,overwrite:0})},F.set=function(t,e){return new F(t,0,e)},F.getTweensOf=function(t,e){if(null==t)return[];var i,r,s,n;if(t="string"!=typeof t?t:F.selector(t)||t,(w(t)||E(t))&&"number"!=typeof t[0]){for(i=t.length,r=[];-1<--i;)r=r.concat(F.getTweensOf(t[i],e));for(i=r.length;-1<--i;)for(n=r[i],s=i;-1<--s;)n===r[s]&&r.splice(i,1)}else if(t._gsTweenID)for(i=(r=K(t).concat()).length;-1<--i;)(r[i]._gc||e&&!r[i].isActive())&&r.splice(i,1);return r||[]},F.killTweensOf=F.killDelayedCallsTo=function(t,e,i){"object"===(void 0===e?"undefined":re(e))&&(i=e,e=!1);for(var r=F.getTweensOf(t,e),s=r.length;-1<--s;)r[s]._kill(i,t)};var rt=c("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=rt.prototype},!0);if(r=rt.prototype,rt.version="1.19.0",rt.API=2,r._firstPT=null,r._addTween=Y,r.setRatio=N,r._kill=function(t){var e,i=this._overwriteProps,r=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;-1<--e;)null!=t[i[e]]&&i.splice(e,1);for(;r;)null!=t[r.n]&&(r._next&&(r._next._prev=r._prev),r._prev?(r._prev._next=r._next,r._prev=null):this._firstPT===r&&(this._firstPT=r._next)),r=r._next;return!1},r._mod=r._roundProps=function(t){for(var e,i=this._firstPT;i;)(e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")])&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},F._onPluginEvent=function(t,e){var i,r,s,n,a,o=e._firstPT;if("_onInitAllProps"===t){for(;o;){for(a=o._next,r=s;r&&r.pr>o.pr;)r=r._next;(o._prev=r?r._prev:n)?o._prev._next=o:s=o,(o._next=r)?r._prev=o:n=o,o=a}o=e._firstPT=s}for(;o;)o.pg&&"function"==typeof o.t[t]&&o.t[t]()&&(i=!0),o=o._next;return i},rt.activate=function(t){for(var e=t.length;-1<--e;)t[e].API===rt.API&&(U[(new t[e])._propName]=t[e]);return!0},h.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,r=t.priority||0,s=t.overwriteProps,n={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},a=c("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){rt.call(this,i,r),this._overwriteProps=s||[]},!0===t.global),o=a.prototype=new rt(i);for(e in(o.constructor=a).API=t.API,n)"function"==typeof t[e]&&(o[n[e]]=t[e]);return a.version=t.version,rt.activate([a]),a},e=f._gsQueue){for(i=0;i<e.length;i++)e[i]();for(r in b)b[r].func||f.console.log("GSAP encountered missing dependency: "+r)}y=!1}(void 0!==st&&st.exports&&void 0!==t?t:window,"TweenMax")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
