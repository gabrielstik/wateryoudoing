!function n(a,o,l){function h(e,t){if(!o[e]){if(!a[e]){var i="function"==typeof require&&require;if(!t&&i)return i(e,!0);if(_)return _(e,!0);var s=new Error("Cannot find module '"+e+"'");throw s.code="MODULE_NOT_FOUND",s}var r=o[e]={exports:{}};a[e][0].call(r.exports,function(t){return h(a[e][1][t]||t)},r,r.exports,n,a,o,l)}return o[e].exports}for(var _="function"==typeof require&&require,t=0;t<l.length;t++)h(l[t]);return h}({1:[function(t,e,i){"use strict";var s,r=t("./controllers/QuizzController"),n=(s=r)&&s.__esModule?s:{default:s};window.onload=function(){document.querySelector(".quizz")&&new n.default}},{"./controllers/QuizzController":2}],2:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var s=function(){function s(t,e){for(var i=0;i<e.length;i++){var s=e[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}return function(t,e,i){return e&&s(t.prototype,e),i&&s(t,i),t}}(),h=t("../vendor/TweenMax");var r=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.$={quizz:document.querySelector(".quizz")},this._eventListeners()}return s(t,[{key:"_eventListeners",value:function(){for(var e=this,i=this._getAnswers(),t=function(t){i[t].addEventListener("mouseenter",function(){e._handleEnterAnswer(t)}),i[t].addEventListener("mouseleave",function(){e._handleLeaveAnswer(t)}),i[t].addEventListener("click",function(){e._handleClickAnswer(t)})},s=0;s<i.length;s++)t(s)}},{key:"_handleEnterAnswer",value:function(t){h.TweenMax.to(this._getIllustrations()[t],.2,{scale:1,opacity:1,ease:Power1.easeOut})}},{key:"_handleLeaveAnswer",value:function(t){h.TweenMax.to(this._getIllustrations()[t],.2,{scale:0,opacity:0,ease:Power1.easeOut})}},{key:"_handleClickAnswer",value:function(t){var e=this.$.quizz.querySelector(".quizz__questions__title"),i=this.$.quizz.querySelector(".quizz__questions__desc"),s=this._getAnswers();(new h.TimelineMax).to(e,.2,{y:"100%",ease:Power1.easeOut}).to(i,.2,{opacity:0,ease:Power1.easeOut}).staggerTo(s,.5,{x:"100%",opacity:0,ease:Power1.easeOut},.2),this._getData(t)}},{key:"_getAnswers",value:function(){return this.$.quizz.querySelectorAll(".ref-answer")}},{key:"_getIllustrations",value:function(){return this.$.quizz.querySelectorAll(".ref-illustration")}},{key:"_getData",value:function(u){var f=this;this.isRequesting=!0;var c=new XMLHttpRequest;c.onreadystatechange=function(){if(4==c.readyState&&200==c.status){var t=document.querySelector(".ref-energy"),e=document.querySelector(".ref-hunger"),i=document.querySelector(".ref-bladder"),s=f._getAnswers()[u].getAttribute("delta-energy"),r=f._getAnswers()[u].getAttribute("delta-hunger"),n=f._getAnswers()[u].getAttribute("delta-bladder"),a=JSON.parse(c.responseText),o=f._getAnswers()[u].getAttribute("next");console.log("delta",s,r,n);var l=parseInt(a.energy)+parseInt(s),h=parseInt(a.hunger)+parseInt(r),_=parseInt(a.bladder)+parseInt(n);t.setAttribute("energy",l),e.setAttribute("hunger",h),i.setAttribute("bladder",_),f._postData(o,l,h,_),f._updateFills(l,h,_)}},c.open("GET","/wp-content/themes/watertheme/api/get-data.php",!0),c.send()}},{key:"_postData",value:function(t,e,i,s){var r=this;console.log("before post",e,i,s),this.isRequesting=!0;var n="/wp-content/themes/watertheme/api/post-data.php?next="+t+"&energy="+e+"&hunger="+i+"&bladder"+s,a=new XMLHttpRequest;a.onreadystatechange=function(){4==a.readyState&&200==a.status&&r._domAjaxRequest()},a.open("POST",n,!0),a.send()}},{key:"_domAjaxRequest",value:function(){var e=this;this.isRequesting=!0;var i=new XMLHttpRequest;i.onreadystatechange=function(){if(4==i.readyState&&200==i.status){var t=document.createElement("div");t.innerHTML=i.responseText;e._pushText(t,[".quizz__time",".quizz__questions__title",".quizz__questions__desc",[".quizz__questions__list__item"],[".quizz__illus__images"]]),e._pushAttributes(t,["next"])}},i.open("GET","/quizz",!0),i.send()}},{key:"_pushText",value:function(t,e){for(var i=0;i<e.length;i++)if(e[i].constructor===Array)for(var s=document.querySelectorAll(e[i]),r=t.querySelectorAll(e[i]),n=0;n<s.length;n++)s[n].innerHTML=r[n].innerHTML;else document.querySelector(e[i]).innerHTML=t.querySelector(e[i]).innerHTML;var a=this.$.quizz.querySelector(".quizz__questions__title"),o=this.$.quizz.querySelector(".quizz__questions__desc"),l=this._getAnswers();(new h.TimelineMax).fromTo(a,.2,{y:"-100%"},{y:"0%",ease:Power1.easeOut}).to(o,.2,{opacity:1,ease:Power1.easeOut}).staggerFromTo(l,.5,{x:"-100%",opacity:0},{x:"0%",opacity:1,ease:Power1.easeOut},.2)}},{key:"_pushAttributes",value:function(t,e){for(var i=this._getAnswers(),s=t.querySelectorAll(".ref-answer"),r=0;r<e.length;r++)for(var n=0;n<i.length;n++)i[n].setAttribute(e[r],s[n].getAttribute(e[r]))}},{key:"_updateFills",value:function(t,e,i){var s=document.querySelector(".ref-energy-fill"),r=document.querySelector(".ref-hunger-fill"),n=document.querySelector(".ref-bladder-fill");s.style.transform="scaleX("+t/100+")",r.style.transform="scaleX("+e/100+")",n.style.transform="scaleX("+i/100+")"}}]),t}();i.default=r},{"../vendor/TweenMax":3}],3:[function(t,rt,e){(function(t){"use strict";var se="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},re=void 0!==rt&&rt.exports&&void 0!==t?t:window;(re._gsQueue||(re._gsQueue=[])).push(function(){var b,x,w,P,g,i,y,O,v,T,c,p,m,t,e,l,h,s;re._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(s,_,y){var m=function(t){var e,i=[],s=t.length;for(e=0;e!==s;i.push(t[e++]));return i},g=function(t,e,i){var s,r,n=t.cycle;for(s in n)r=n[s],t[s]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},v=function t(e,i,s){y.call(this,e,i,s),this._cycle=0,this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._repeat&&this._uncache(!0),this.render=t.prototype.render},T=1e-10,x=y._internals,w=x.isSelector,b=x.isArray,t=v.prototype=y.to({},.1,{}),P=[];v.version="2.0.2",t.constructor=v,t.kill()._gc=!1,v.killTweensOf=v.killDelayedCallsTo=y.killTweensOf,v.getTweensOf=y.getTweensOf,v.lagSmoothing=y.lagSmoothing,v.ticker=y.ticker,v.render=y.render,t.invalidate=function(){return this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._yoyoEase=null,this._uncache(!0),y.prototype.invalidate.call(this)},t.updateTo=function(t,e){var i,s=this.ratio,r=this.vars.immediateRender||t.immediateRender;for(i in e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay)),t)this.vars[i]=t[i];if(this._initted||r)if(e)this._initted=!1,r&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&y._onPluginEvent("_onDisable",this),.998<this._time/this._duration){var n=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(n,!0,!1)}else if(this._initted=!1,this._init(),0<this._time||r)for(var a,o=1/(1-s),l=this._firstPT;l;)a=l.s+l.c,l.c*=o,l.s=a-l.c,l=l._next;return this},t.render=function(t,e,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var s,r,n,a,o,l,h,_,u,f=this._dirty?this.totalDuration():this._totalDuration,c=this._time,p=this._totalTime,d=this._cycle,m=this._duration,g=this._rawPrevTime;if(f-1e-7<=t&&0<=t?(this._totalTime=f,this._cycle=this._repeat,this._yoyo&&0!=(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=m,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(s=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===m&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(g<0||t<=0&&-1e-7<=t||g===T&&"isPause"!==this.data)&&g!==t&&(i=!0,T<g&&(r="onReverseComplete")),this._rawPrevTime=_=!e||t||g===t?t:T)):t<1e-7?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==p||0===m&&0<g)&&(r="onReverseComplete",s=this._reversed),t<0&&(this._active=!1,0===m&&(this._initted||!this.vars.lazy||i)&&(0<=g&&(i=!0),this._rawPrevTime=_=!e||t||g===t?t:T)),this._initted||(i=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(a=m+this._repeatDelay,this._cycle=this._totalTime/a>>0,0!==this._cycle&&this._cycle===this._totalTime/a&&p<=t&&this._cycle--,this._time=this._totalTime-this._cycle*a,this._yoyo&&0!=(1&this._cycle)&&(this._time=m-this._time,(u=this._yoyoEase||this.vars.yoyoEase)&&(this._yoyoEase||(!0!==u||this._initted?this._yoyoEase=u=!0===u?this._ease:u instanceof Ease?u:Ease.map[u]:(u=this.vars.ease,this._yoyoEase=u=u?u instanceof Ease?u:"function"==typeof u?new Ease(u,this.vars.easeParams):Ease.map[u]||y.defaultEase:y.defaultEase)),this.ratio=u?1-u.getRatio((m-this._time)/m):0)),this._time>m?this._time=m:this._time<0&&(this._time=0)),this._easeType&&!u?(o=this._time/m,(1===(l=this._easeType)||3===l&&.5<=o)&&(o=1-o),3===l&&(o*=2),1===(h=this._easePower)?o*=o:2===h?o*=o*o:3===h?o*=o*o*o:4===h&&(o*=o*o*o*o),1===l?this.ratio=1-o:2===l?this.ratio=o:this._time/m<.5?this.ratio=o/2:this.ratio=1-o/2):u||(this.ratio=this._ease.getRatio(this._time/m))),c!==this._time||i||d!==this._cycle){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=c,this._totalTime=p,this._rawPrevTime=g,this._cycle=d,x.lazyTweens.push(this),void(this._lazy=[t,e]);!this._time||s||u?s&&this._ease._calcEnd&&!u&&(this.ratio=this._ease.getRatio(0===this._time?0:1)):this.ratio=this._ease.getRatio(this._time/m)}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==c&&0<=t&&(this._active=!0),0===p&&(2===this._initted&&0<t&&this._init(),this._startAt&&(0<=t?this._startAt.render(t,!0,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._totalTime&&0!==m||e||this._callback("onStart"))),n=this._firstPT;n;)n.f?n.t[n.p](n.c*this.ratio+n.s):n.t[n.p]=n.c*this.ratio+n.s,n=n._next;this._onUpdate&&(t<0&&this._startAt&&this._startTime&&this._startAt.render(t,!0,i),e||(this._totalTime!==p||r)&&this._callback("onUpdate")),this._cycle!==d&&(e||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,!0,i),s&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===m&&this._rawPrevTime===T&&_!==T&&(this._rawPrevTime=0)))}else p!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},v.to=function(t,e,i){return new v(t,e,i)},v.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new v(t,e,i)},v.fromTo=function(t,e,i,s){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,new v(t,e,s)},v.staggerTo=v.allTo=function(t,e,i,s,r,n,a){s=s||0;var o,l,h,_,u=0,f=[],c=function(){i.onComplete&&i.onComplete.apply(i.onCompleteScope||this,arguments),r.apply(a||i.callbackScope||this,n||P)},p=i.cycle,d=i.startAt&&i.startAt.cycle;for(b(t)||("string"==typeof t&&(t=y.selector(t)||t),w(t)&&(t=m(t))),t=t||[],s<0&&((t=m(t)).reverse(),s*=-1),o=t.length-1,h=0;h<=o;h++){for(_ in l={},i)l[_]=i[_];if(p&&(g(l,t,h),null!=l.duration&&(e=l.duration,delete l.duration)),d){for(_ in d=l.startAt={},i.startAt)d[_]=i.startAt[_];g(l.startAt,t,h)}l.delay=u+(l.delay||0),h===o&&r&&(l.onComplete=c),f[h]=new v(t[h],e,l),u+=s}return f},v.staggerFrom=v.allFrom=function(t,e,i,s,r,n,a){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,v.staggerTo(t,e,i,s,r,n,a)},v.staggerFromTo=v.allFromTo=function(t,e,i,s,r,n,a,o){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,v.staggerTo(t,e,s,r,n,a,o)},v.delayedCall=function(t,e,i,s,r){return new v(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:s,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,useFrames:r,overwrite:0})},v.set=function(t,e){return new v(t,0,e)},v.isTweening=function(t){return 0<y.getTweensOf(t,!0).length};var e=function t(e,i){for(var s=[],r=0,n=e._first;n;)n instanceof y?s[r++]=n:(i&&(s[r++]=n),r=(s=s.concat(t(n,i))).length),n=n._next;return s},u=v.getAllTweens=function(t){return e(s._rootTimeline,t).concat(e(s._rootFramesTimeline,t))};v.killAll=function(t,e,i,s){null==e&&(e=!0),null==i&&(i=!0);var r,n,a,o=u(0!=s),l=o.length,h=e&&i&&s;for(a=0;a<l;a++)n=o[a],(h||n instanceof _||(r=n.target===n.vars.onComplete)&&i||e&&!r)&&(t?n.totalTime(n._reversed?0:n.totalDuration()):n._enabled(!1,!1))},v.killChildTweensOf=function(t,e){if(null!=t){var i,s,r,n,a,o=x.tweenLookup;if("string"==typeof t&&(t=y.selector(t)||t),w(t)&&(t=m(t)),b(t))for(n=t.length;-1<--n;)v.killChildTweensOf(t[n],e);else{for(r in i=[],o)for(s=o[r].target.parentNode;s;)s===t&&(i=i.concat(o[r].tweens)),s=s.parentNode;for(a=i.length,n=0;n<a;n++)e&&i[n].totalTime(i[n].totalDuration()),i[n]._enabled(!1,!1)}}};var r=function(t,e,i,s){e=!1!==e,i=!1!==i;for(var r,n,a=u(s=!1!==s),o=e&&i&&s,l=a.length;-1<--l;)n=a[l],(o||n instanceof _||(r=n.target===n.vars.onComplete)&&i||e&&!r)&&n.paused(t)};return v.pauseAll=function(t,e,i){r(!0,t,e,i)},v.resumeAll=function(t,e,i){r(!1,t,e,i)},v.globalTimeScale=function(t){var e=s._rootTimeline,i=y.ticker.time;return arguments.length?(t=t||T,e._startTime=i-(i-e._startTime)*e._timeScale/t,e=s._rootFramesTimeline,i=y.ticker.frame,e._startTime=i-(i-e._startTime)*e._timeScale/t,e._timeScale=s._rootTimeline._timeScale=t,t):e._timeScale},t.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},t.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},t.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},t.duration=function(t){return arguments.length?s.prototype.duration.call(this,t):this._duration},t.totalDuration=function(t){return arguments.length?-1===this._repeat?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},t.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},t.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},t.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},v},!0),re._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(_,u,f){var c=function(t){u.call(this,t),this._labels={},this.autoRemoveChildren=!0===this.vars.autoRemoveChildren,this.smoothChildTiming=!0===this.vars.smoothChildTiming,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var e,i,s=this.vars;for(i in s)e=s[i],m(e)&&-1!==e.join("").indexOf("{self}")&&(s[i]=this._swapSelfInParams(e));m(s.tweens)&&this.add(s.tweens,0,s.align,s.stagger)},d=1e-10,t=f._internals,e=c._internals={},p=t.isSelector,m=t.isArray,g=t.lazyTweens,y=t.lazyRender,a=re._gsDefine.globals,v=function(t){var e,i={};for(e in t)i[e]=t[e];return i},T=function(t,e,i){var s,r,n=t.cycle;for(s in n)r=n[s],t[s]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},n=e.pauseCallback=function(){},x=function(t){var e,i=[],s=t.length;for(e=0;e!==s;i.push(t[e++]));return i},i=c.prototype=new u;return c.version="2.0.2",i.constructor=c,i.kill()._gc=i._forcingPlayhead=i._hasPause=!1,i.to=function(t,e,i,s){var r=i.repeat&&a.TweenMax||f;return e?this.add(new r(t,e,i),s):this.set(t,i,s)},i.from=function(t,e,i,s){return this.add((i.repeat&&a.TweenMax||f).from(t,e,i),s)},i.fromTo=function(t,e,i,s,r){var n=s.repeat&&a.TweenMax||f;return e?this.add(n.fromTo(t,e,i,s),r):this.set(t,s,r)},i.staggerTo=function(t,e,i,s,r,n,a,o){var l,h,_=new c({onComplete:n,onCompleteParams:a,callbackScope:o,smoothChildTiming:this.smoothChildTiming}),u=i.cycle;for("string"==typeof t&&(t=f.selector(t)||t),p(t=t||[])&&(t=x(t)),(s=s||0)<0&&((t=x(t)).reverse(),s*=-1),h=0;h<t.length;h++)(l=v(i)).startAt&&(l.startAt=v(l.startAt),l.startAt.cycle&&T(l.startAt,t,h)),u&&(T(l,t,h),null!=l.duration&&(e=l.duration,delete l.duration)),_.to(t[h],e,l,h*s);return this.add(_,r)},i.staggerFrom=function(t,e,i,s,r,n,a,o){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,s,r,n,a,o)},i.staggerFromTo=function(t,e,i,s,r,n,a,o,l){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,s,r,n,a,o,l)},i.call=function(t,e,i,s){return this.add(f.delayedCall(0,t,e,i),s)},i.set=function(t,e,i){return i=this._parseTimeOrLabel(i,0,!0),null==e.immediateRender&&(e.immediateRender=i===this._time&&!this._paused),this.add(new f(t,0,e),i)},c.exportRoot=function(t,e){null==(t=t||{}).smoothChildTiming&&(t.smoothChildTiming=!0);var i,s,r,n,a=new c(t),o=a._timeline;for(null==e&&(e=!0),o._remove(a,!0),a._startTime=0,a._rawPrevTime=a._time=a._totalTime=o._time,r=o._first;r;)n=r._next,e&&r instanceof f&&r.target===r.vars.onComplete||((s=r._startTime-r._delay)<0&&(i=1),a.add(r,s)),r=n;return o.add(a,0),i&&a.totalDuration(),a},i.add=function(t,e,i,s){var r,n,a,o,l,h;if("number"!=typeof e&&(e=this._parseTimeOrLabel(e,0,!0,t)),!(t instanceof _)){if(t instanceof Array||t&&t.push&&m(t)){for(i=i||"normal",s=s||0,r=e,n=t.length,a=0;a<n;a++)m(o=t[a])&&(o=new c({tweens:o})),this.add(o,r),"string"!=typeof o&&"function"!=typeof o&&("sequence"===i?r=o._startTime+o.totalDuration()/o._timeScale:"start"===i&&(o._startTime-=o.delay())),r+=s;return this._uncache(!0)}if("string"==typeof t)return this.addLabel(t,e);if("function"!=typeof t)throw"Cannot add "+t+" into the timeline; it is not a tween, timeline, function, or string.";t=f.delayedCall(0,t)}if(u.prototype.add.call(this,t,e),t._time&&(r=Math.max(0,Math.min(t.totalDuration(),(this.rawTime()-t._startTime)*t._timeScale)),1e-5<Math.abs(r-t._totalTime)&&t.render(r,!1,!1)),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(h=(l=this).rawTime()>t._startTime;l._timeline;)h&&l._timeline.smoothChildTiming?l.totalTime(l._totalTime,!0):l._gc&&l._enabled(!0,!1),l=l._timeline;return this},i.remove=function(t){if(t instanceof _){this._remove(t,!1);var e=t._timeline=t.vars.useFrames?_._rootFramesTimeline:_._rootTimeline;return t._startTime=(t._paused?t._pauseTime:e._time)-(t._reversed?t.totalDuration()-t._totalTime:t._totalTime)/t._timeScale,this}if(t instanceof Array||t&&t.push&&m(t)){for(var i=t.length;-1<--i;)this.remove(t[i]);return this}return"string"==typeof t?this.removeLabel(t):this.kill(null,t)},i._remove=function(t,e){return u.prototype._remove.call(this,t,e),this._last?this._time>this.duration()&&(this._time=this._duration,this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},i.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},i.insert=i.insertMultiple=function(t,e,i,s){return this.add(t,e||0,i,s)},i.appendMultiple=function(t,e,i,s){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,s)},i.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},i.addPause=function(t,e,i,s){var r=f.delayedCall(0,n,i,s||this);return r.vars.onComplete=r.vars.onReverseComplete=e,r.data="isPause",this._hasPause=!0,this.add(r,t)},i.removeLabel=function(t){return delete this._labels[t],this},i.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},i._parseTimeOrLabel=function(t,e,i,s){var r,n;if(s instanceof _&&s.timeline===this)this.remove(s);else if(s&&(s instanceof Array||s.push&&m(s)))for(n=s.length;-1<--n;)s[n]instanceof _&&s[n].timeline===this&&this.remove(s[n]);if(r="number"!=typeof t||e?99999999999<this.duration()?this.recent().endTime(!1):this._duration:0,"string"==typeof e)return this._parseTimeOrLabel(e,i&&"number"==typeof t&&null==this._labels[e]?t-r:0,i);if(e=e||0,"string"!=typeof t||!isNaN(t)&&null==this._labels[t])null==t&&(t=r);else{if(-1===(n=t.indexOf("=")))return null==this._labels[t]?i?this._labels[t]=r+e:e:this._labels[t]+e;e=parseInt(t.charAt(n-1)+"1",10)*Number(t.substr(n+1)),t=1<n?this._parseTimeOrLabel(t.substr(0,n-1),0,i):r}return Number(t)+e},i.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),!1!==e)},i.stop=function(){return this.paused(!0)},i.gotoAndPlay=function(t,e){return this.play(t,e)},i.gotoAndStop=function(t,e){return this.pause(t,e)},i.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var s,r,n,a,o,l,h,_=this._time,u=this._dirty?this.totalDuration():this._totalDuration,f=this._startTime,c=this._timeScale,p=this._paused;if(_!==this._time&&(t+=this._time-_),u-1e-7<=t&&0<=t)this._totalTime=this._time=u,this._reversed||this._hasPausedChild()||(r=!0,a="onComplete",o=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&-1e-7<=t||this._rawPrevTime<0||this._rawPrevTime===d)&&this._rawPrevTime!==t&&this._first&&(o=!0,this._rawPrevTime>d&&(a="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:d,t=u+1e-4;else if(t<1e-7)if(this._totalTime=this._time=0,(0!==_||0===this._duration&&this._rawPrevTime!==d&&(0<this._rawPrevTime||t<0&&0<=this._rawPrevTime))&&(a="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(o=r=!0,a="onReverseComplete"):0<=this._rawPrevTime&&this._first&&(o=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:d,0===t&&r)for(s=this._first;s&&0===s._startTime;)s._duration||(r=!1),s=s._next;t=0,this._initted||(o=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!e){if(_<=t)for(s=this._first;s&&s._startTime<=t&&!l;)s._duration||"isPause"!==s.data||s.ratio||0===s._startTime&&0===this._rawPrevTime||(l=s),s=s._next;else for(s=this._last;s&&s._startTime>=t&&!l;)s._duration||"isPause"===s.data&&0<s._rawPrevTime&&(l=s),s=s._prev;l&&(this._time=t=l._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=t}if(this._time!==_&&this._first||i||o||l){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==_&&0<t&&(this._active=!0),0===_&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),_<=(h=this._time))for(s=this._first;s&&(n=s._next,h===this._time&&(!this._paused||p));)(s._active||s._startTime<=h&&!s._paused&&!s._gc)&&(l===s&&this.pause(),s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,i):s.render((t-s._startTime)*s._timeScale,e,i)),s=n;else for(s=this._last;s&&(n=s._prev,h===this._time&&(!this._paused||p));){if(s._active||s._startTime<=_&&!s._paused&&!s._gc){if(l===s){for(l=s._prev;l&&l.endTime()>this._time;)l.render(l._reversed?l.totalDuration()-(t-l._startTime)*l._timeScale:(t-l._startTime)*l._timeScale,e,i),l=l._prev;l=null,this.pause()}s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,i):s.render((t-s._startTime)*s._timeScale,e,i)}s=n}this._onUpdate&&(e||(g.length&&y(),this._callback("onUpdate"))),a&&(this._gc||f!==this._startTime&&c===this._timeScale||(0===this._time||u>=this.totalDuration())&&(r&&(g.length&&y(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[a]&&this._callback(a)))}},i._hasPausedChild=function(){for(var t=this._first;t;){if(t._paused||t instanceof c&&t._hasPausedChild())return!0;t=t._next}return!1},i.getChildren=function(t,e,i,s){s=s||-9999999999;for(var r=[],n=this._first,a=0;n;)n._startTime<s||(n instanceof f?!1!==e&&(r[a++]=n):(!1!==i&&(r[a++]=n),!1!==t&&(a=(r=r.concat(n.getChildren(!0,e,i))).length))),n=n._next;return r},i.getTweensOf=function(t,e){var i,s,r=this._gc,n=[],a=0;for(r&&this._enabled(!0,!0),s=(i=f.getTweensOf(t)).length;-1<--s;)(i[s].timeline===this||e&&this._contains(i[s]))&&(n[a++]=i[s]);return r&&this._enabled(!1,!0),n},i.recent=function(){return this._recent},i._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},i.shiftChildren=function(t,e,i){i=i||0;for(var s,r=this._first,n=this._labels;r;)r._startTime>=i&&(r._startTime+=t),r=r._next;if(e)for(s in n)n[s]>=i&&(n[s]+=t);return this._uncache(!0)},i._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),s=i.length,r=!1;-1<--s;)i[s]._kill(t,e)&&(r=!0);return r},i.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;-1<--i;)e[i]._enabled(!1,!1);return!1!==t&&(this._labels={}),this._uncache(!0)},i.invalidate=function(){for(var t=this._first;t;)t.invalidate(),t=t._next;return _.prototype.invalidate.call(this)},i._enabled=function(t,e){if(t===this._gc)for(var i=this._first;i;)i._enabled(t,!0),i=i._next;return u.prototype._enabled.call(this,t,e)},i.totalTime=function(t,e,i){this._forcingPlayhead=!0;var s=_.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,s},i.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},i.totalDuration=function(t){if(arguments.length)return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this;if(this._dirty){for(var e,i,s=0,r=this._last,n=999999999999;r;)e=r._prev,r._dirty&&r.totalDuration(),r._startTime>n&&this._sortChildren&&!r._paused&&!this._calculatingDuration?(this._calculatingDuration=1,this.add(r,r._startTime-r._delay),this._calculatingDuration=0):n=r._startTime,r._startTime<0&&!r._paused&&(s-=r._startTime,this._timeline.smoothChildTiming&&(this._startTime+=r._startTime/this._timeScale,this._time-=r._startTime,this._totalTime-=r._startTime,this._rawPrevTime-=r._startTime),this.shiftChildren(-r._startTime,!1,-9999999999),n=0),s<(i=r._startTime+r._totalDuration/r._timeScale)&&(s=i),r=e;this._duration=this._totalDuration=s,this._dirty=!1}return this._totalDuration},i.paused=function(t){if(!t)for(var e=this._first,i=this._time;e;)e._startTime===i&&"isPause"===e.data&&(e._rawPrevTime=0),e=e._next;return _.prototype.paused.apply(this,arguments)},i.usesFrames=function(){for(var t=this._timeline;t._timeline;)t=t._timeline;return t===_._rootFramesTimeline},i.rawTime=function(t){return t&&(this._paused||this._repeat&&0<this.time()&&this.totalProgress()<1)?this._totalTime%(this._duration+this._repeatDelay):this._paused?this._totalTime:(this._timeline.rawTime(t)-this._startTime)*this._timeScale},c},!0),re._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(e,o,t){var i=function(t){e.call(this,t),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=!0===this.vars.yoyo,this._dirty=!0},S=1e-10,s=o._internals,k=s.lazyTweens,A=s.lazyRender,l=re._gsDefine.globals,h=new t(null,null,1,0),r=i.prototype=new e;return r.constructor=i,r.kill()._gc=!1,i.version="2.0.2",r.invalidate=function(){return this._yoyo=!0===this.vars.yoyo,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),e.prototype.invalidate.call(this)},r.addCallback=function(t,e,i,s){return this.add(o.delayedCall(0,t,i,s),e)},r.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),s=i.length,r=this._parseTimeOrLabel(e);-1<--s;)i[s]._startTime===r&&i[s]._enabled(!1,!1);return this},r.removePause=function(t){return this.removeCallback(e._internals.pauseCallback,t)},r.tweenTo=function(t,e){e=e||{};var i,s,r,n={ease:h,useFrames:this.usesFrames(),immediateRender:!1,lazy:!1},a=e.repeat&&l.TweenMax||o;for(s in e)n[s]=e[s];return n.time=this._parseTimeOrLabel(t),i=Math.abs(Number(n.time)-this._time)/this._timeScale||.001,r=new a(this,i,n),n.onStart=function(){r.target.paused(!0),r.vars.time===r.target.time()||i!==r.duration()||r.isFromTo||r.duration(Math.abs(r.vars.time-r.target.time())/r.target._timeScale).render(r.time(),!0,!0),e.onStart&&e.onStart.apply(e.onStartScope||e.callbackScope||r,e.onStartParams||[])},r},r.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=!1!==i.immediateRender;var s=this.tweenTo(e,i);return s.isFromTo=1,s.duration(Math.abs(s.vars.time-t)/this._timeScale||.001)},r.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var s,r,n,a,o,l,h,_,u=this._time,f=this._dirty?this.totalDuration():this._totalDuration,c=this._duration,p=this._totalTime,d=this._startTime,m=this._timeScale,g=this._rawPrevTime,y=this._paused,v=this._cycle;if(u!==this._time&&(t+=this._time-u),f-1e-7<=t&&0<=t)this._locked||(this._totalTime=f,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(r=!0,a="onComplete",o=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&-1e-7<=t||g<0||g===S)&&g!==t&&this._first&&(o=!0,S<g&&(a="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:S,this._yoyo&&0!=(1&this._cycle)?this._time=t=0:t=(this._time=c)+1e-4;else if(t<1e-7)if(this._locked||(this._totalTime=this._cycle=0),((this._time=0)!==u||0===c&&g!==S&&(0<g||t<0&&0<=g)&&!this._locked)&&(a="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(o=r=!0,a="onReverseComplete"):0<=g&&this._first&&(o=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=c||!e||t||this._rawPrevTime===t?t:S,0===t&&r)for(s=this._first;s&&0===s._startTime;)s._duration||(r=!1),s=s._next;t=0,this._initted||(o=!0)}else if(0===c&&g<0&&(o=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(l=c+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&p<=t&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!=(1&this._cycle)&&(this._time=c-this._time),this._time>c?t=(this._time=c)+1e-4:this._time<0?this._time=t=0:t=this._time)),this._hasPause&&!this._forcingPlayhead&&!e){if(u<=(t=this._time)||this._repeat&&v!==this._cycle)for(s=this._first;s&&s._startTime<=t&&!h;)s._duration||"isPause"!==s.data||s.ratio||0===s._startTime&&0===this._rawPrevTime||(h=s),s=s._next;else for(s=this._last;s&&s._startTime>=t&&!h;)s._duration||"isPause"===s.data&&0<s._rawPrevTime&&(h=s),s=s._prev;h&&h._startTime<c&&(this._time=t=h._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==v&&!this._locked){var T=this._yoyo&&0!=(1&v),x=T===(this._yoyo&&0!=(1&this._cycle)),w=this._totalTime,b=this._cycle,P=this._rawPrevTime,O=this._time;if(this._totalTime=v*c,this._cycle<v?T=!T:this._totalTime+=c,this._time=u,this._rawPrevTime=0===c?g-1e-4:g,this._cycle=v,this._locked=!0,u=T?0:c,this.render(u,e,0===c),e||this._gc||this.vars.onRepeat&&(this._cycle=b,this._locked=!1,this._callback("onRepeat")),u!==this._time)return;if(x&&(this._cycle=v,this._locked=!0,u=T?c+1e-4:-1e-4,this.render(u,!0,!1)),this._locked=!1,this._paused&&!y)return;this._time=O,this._totalTime=w,this._cycle=b,this._rawPrevTime=P}if(this._time!==u&&this._first||i||o||h){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==p&&0<t&&(this._active=!0),0===p&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),u<=(_=this._time))for(s=this._first;s&&(n=s._next,_===this._time&&(!this._paused||y));)(s._active||s._startTime<=this._time&&!s._paused&&!s._gc)&&(h===s&&this.pause(),s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,i):s.render((t-s._startTime)*s._timeScale,e,i)),s=n;else for(s=this._last;s&&(n=s._prev,_===this._time&&(!this._paused||y));){if(s._active||s._startTime<=u&&!s._paused&&!s._gc){if(h===s){for(h=s._prev;h&&h.endTime()>this._time;)h.render(h._reversed?h.totalDuration()-(t-h._startTime)*h._timeScale:(t-h._startTime)*h._timeScale,e,i),h=h._prev;h=null,this.pause()}s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,i):s.render((t-s._startTime)*s._timeScale,e,i)}s=n}this._onUpdate&&(e||(k.length&&A(),this._callback("onUpdate"))),a&&(this._locked||this._gc||d!==this._startTime&&m===this._timeScale||(0===this._time||f>=this.totalDuration())&&(r&&(k.length&&A(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[a]&&this._callback(a)))}else p!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},r.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var s,r,n=[],a=this.getChildren(t,e,i),o=0,l=a.length;for(s=0;s<l;s++)(r=a[s]).isActive()&&(n[o++]=r);return n},r.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),s=i.length;for(e=0;e<s;e++)if(i[e].time>t)return i[e].name;return null},r.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;-1<--i;)if(e[i].time<t)return e[i].name;return null},r.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},r.invalidate=function(){return this._locked=!1,e.prototype.invalidate.call(this)},r.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()||0},r.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()||0},r.totalDuration=function(t){return arguments.length?-1!==this._repeat&&t?this.timeScale(this.totalDuration()/t):this:(this._dirty&&(e.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},r.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},r.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},r.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},r.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},r.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},i},!0),b=180/Math.PI,x=[],w=[],P=[],g={},i=re._gsDefine.globals,y=function(t,e,i,s){i===s&&(i=s-(s-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=s,this.da=s-t,this.ca=i-t,this.ba=e-t},O=function(t,e,i,s){var r={a:t},n={},a={},o={c:s},l=(t+e)/2,h=(e+i)/2,_=(i+s)/2,u=(l+h)/2,f=(h+_)/2,c=(f-u)/8;return r.b=l+(t-l)/4,n.b=u+c,r.c=n.a=(r.b+n.b)/2,n.c=a.a=(u+f)/2,a.b=f-c,o.b=_+(s-_)/4,a.c=o.a=(a.b+o.b)/2,[r,n,a,o]},v=function(t,e,i,s,r){var n,a,o,l,h,_,u,f,c,p,d,m,g,y=t.length-1,v=0,T=t[0].a;for(n=0;n<y;n++)a=(h=t[v]).a,o=h.d,l=t[v+1].d,f=r?(d=x[n],g=((m=w[n])+d)*e*.25/(s?.5:P[n]||.5),o-((_=o-(o-a)*(s?.5*e:0!==d?g/d:0))+(((u=o+(l-o)*(s?.5*e:0!==m?g/m:0))-_)*(3*d/(d+m)+.5)/4||0))):o-((_=o-(o-a)*e*.5)+(u=o+(l-o)*e*.5))/2,_+=f,u+=f,h.c=c=_,h.b=0!==n?T:T=h.a+.6*(h.c-h.a),h.da=o-a,h.ca=c-a,h.ba=T-a,i?(p=O(a,T,c,o),t.splice(v,1,p[0],p[1],p[2],p[3]),v+=4):v++,T=u;(h=t[v]).b=T,h.c=T+.4*(h.d-T),h.da=h.d-h.a,h.ca=h.c-h.a,h.ba=T-h.a,i&&(p=O(h.a,T,h.c,h.d),t.splice(v,1,p[0],p[1],p[2],p[3]))},T=function(t,e,i,s){var r,n,a,o,l,h,_=[];if(s)for(n=(t=[s].concat(t)).length;-1<--n;)"string"==typeof(h=t[n][e])&&"="===h.charAt(1)&&(t[n][e]=s[e]+Number(h.charAt(0)+h.substr(2)));if((r=t.length-2)<0)return _[0]=new y(t[0][e],0,0,t[0][e]),_;for(n=0;n<r;n++)a=t[n][e],o=t[n+1][e],_[n]=new y(a,0,0,o),i&&(l=t[n+2][e],x[n]=(x[n]||0)+(o-a)*(o-a),w[n]=(w[n]||0)+(l-o)*(l-o));return _[n]=new y(t[n][e],0,0,t[n+1][e]),_},c=function(t,e,i,s,r,n){var a,o,l,h,_,u,f,c,p={},d=[],m=n||t[0];for(o in r="string"==typeof r?","+r+",":",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",null==e&&(e=1),t[0])d.push(o);if(1<t.length){for(c=t[t.length-1],f=!0,a=d.length;-1<--a;)if(o=d[a],.05<Math.abs(m[o]-c[o])){f=!1;break}f&&(t=t.concat(),n&&t.unshift(n),t.push(t[1]),n=t[t.length-3])}for(x.length=w.length=P.length=0,a=d.length;-1<--a;)o=d[a],g[o]=-1!==r.indexOf(","+o+","),p[o]=T(t,o,g[o],n);for(a=x.length;-1<--a;)x[a]=Math.sqrt(x[a]),w[a]=Math.sqrt(w[a]);if(!s){for(a=d.length;-1<--a;)if(g[o])for(u=(l=p[d[a]]).length-1,h=0;h<u;h++)_=l[h+1].da/w[h]+l[h].da/x[h]||0,P[h]=(P[h]||0)+_*_;for(a=P.length;-1<--a;)P[a]=Math.sqrt(P[a])}for(a=d.length,h=i?4:1;-1<--a;)l=p[o=d[a]],v(l,e,i,s,g[o]),f&&(l.splice(0,h),l.splice(l.length-h,h));return p},p=function(t,e,i){for(var s,r,n,a,o,l,h,_,u,f,c,p=1/i,d=t.length;-1<--d;)for(n=(f=t[d]).a,a=f.d-n,o=f.c-n,l=f.b-n,s=r=0,_=1;_<=i;_++)s=r-(r=((h=p*_)*h*a+3*(u=1-h)*(h*o+u*l))*h),e[c=d*i+_-1]=(e[c]||0)+s*s},m=re._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.8",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._mod={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var s,r,n,a,o,l=e.values||[],h={},_=l[0],u=e.autoRotate||i.vars.orientToBezier;for(s in this._autoRotate=u?u instanceof Array?u:[["x","y","rotation",!0===u?0:Number(u)||0]]:null,_)this._props.push(s);for(n=this._props.length;-1<--n;)s=this._props[n],this._overwriteProps.push(s),r=this._func[s]="function"==typeof t[s],h[s]=r?t[s.indexOf("set")||"function"!=typeof t["get"+s.substr(3)]?s:"get"+s.substr(3)]():parseFloat(t[s]),o||h[s]!==l[0][s]&&(o=h);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?c(l,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,o):function(t,e,i){var s,r,n,a,o,l,h,_,u,f,c,p={},d="cubic"===(e=e||"soft")?3:2,m="soft"===e,g=[];if(m&&i&&(t=[i].concat(t)),null==t||t.length<d+1)throw"invalid Bezier data";for(u in t[0])g.push(u);for(l=g.length;-1<--l;){for(p[u=g[l]]=o=[],f=0,_=t.length,h=0;h<_;h++)s=null==i?t[h][u]:"string"==typeof(c=t[h][u])&&"="===c.charAt(1)?i[u]+Number(c.charAt(0)+c.substr(2)):Number(c),m&&1<h&&h<_-1&&(o[f++]=(s+o[f-2])/2),o[f++]=s;for(_=f-d+1,h=f=0;h<_;h+=d)s=o[h],r=o[h+1],n=o[h+2],a=2===d?0:o[h+3],o[f++]=c=3===d?new y(s,r,n,a):new y(s,(2*r+s)/3,(2*r+n)/3,n);o.length=f}return p}(l,e.type,h),this._segCount=this._beziers[s].length,this._timeRes){var f=function(t,e){var i,s,r,n,a=[],o=[],l=0,h=0,_=(e=e>>0||6)-1,u=[],f=[];for(i in t)p(t[i],a,e);for(r=a.length,s=0;s<r;s++)l+=Math.sqrt(a[s]),f[n=s%e]=l,n===_&&(h+=l,u[n=s/e>>0]=f,o[n]=h,l=0,f=[]);return{length:h,lengths:o,segments:u}}(this._beziers,this._timeRes);this._length=f.length,this._lengths=f.lengths,this._segments=f.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(u=this._autoRotate)for(this._initialRotations=[],u[0]instanceof Array||(this._autoRotate=u=[u]),n=u.length;-1<--n;){for(a=0;a<3;a++)s=u[n][a],this._func[s]="function"==typeof t[s]&&t[s.indexOf("set")||"function"!=typeof t["get"+s.substr(3)]?s:"get"+s.substr(3)];s=u[n][2],this._initialRotations[n]=(this._func[s]?this._func[s].call(this._target):this._target[s])||0,this._overwriteProps.push(s)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(t){var e,i,s,r,n,a,o,l,h,_,u=this._segCount,f=this._func,c=this._target,p=t!==this._startRatio;if(this._timeRes){if(h=this._lengths,_=this._curSeg,t*=this._length,s=this._li,t>this._l2&&s<u-1){for(l=u-1;s<l&&(this._l2=h[++s])<=t;);this._l1=h[s-1],this._li=s,this._curSeg=_=this._segments[s],this._s2=_[this._s1=this._si=0]}else if(t<this._l1&&0<s){for(;0<s&&(this._l1=h[--s])>=t;);0===s&&t<this._l1?this._l1=0:s++,this._l2=h[s],this._li=s,this._curSeg=_=this._segments[s],this._s1=_[(this._si=_.length-1)-1]||0,this._s2=_[this._si]}if(e=s,t-=this._l1,s=this._si,t>this._s2&&s<_.length-1){for(l=_.length-1;s<l&&(this._s2=_[++s])<=t;);this._s1=_[s-1],this._si=s}else if(t<this._s1&&0<s){for(;0<s&&(this._s1=_[--s])>=t;);0===s&&t<this._s1?this._s1=0:s++,this._s2=_[s],this._si=s}a=(s+(t-this._s1)/(this._s2-this._s1))*this._prec||0}else a=(t-(e=t<0?0:1<=t?u-1:u*t>>0)*(1/u))*u;for(i=1-a,s=this._props.length;-1<--s;)r=this._props[s],o=(a*a*(n=this._beziers[r][e]).da+3*i*(a*n.ca+i*n.ba))*a+n.a,this._mod[r]&&(o=this._mod[r](o,c)),f[r]?c[r](o):c[r]=o;if(this._autoRotate){var d,m,g,y,v,T,x,w=this._autoRotate;for(s=w.length;-1<--s;)r=w[s][2],T=w[s][3]||0,x=!0===w[s][4]?1:b,n=this._beziers[w[s][0]],d=this._beziers[w[s][1]],n&&d&&(n=n[e],d=d[e],m=n.a+(n.b-n.a)*a,m+=((y=n.b+(n.c-n.b)*a)-m)*a,y+=(n.c+(n.d-n.c)*a-y)*a,g=d.a+(d.b-d.a)*a,g+=((v=d.b+(d.c-d.b)*a)-g)*a,v+=(d.c+(d.d-d.c)*a-v)*a,o=p?Math.atan2(v-g,y-m)*x+T:this._initialRotations[s],this._mod[r]&&(o=this._mod[r](o,c)),f[r]?c[r](o):c[r]=o)}}}),t=m.prototype,m.bezierThrough=c,m.cubicToQuadratic=O,m._autoCSS=!0,m.quadraticToCubic=function(t,e,i){return new y(t,(2*e+t)/3,(2*e+i)/3,i)},m._cssRegister=function(){var t=i.CSSPlugin;if(t){var e=t._internals,c=e._parseToProxy,p=e._setPluginRatio,d=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,i,s,r,n){e instanceof Array&&(e={values:e}),n=new m;var a,o,l,h=e.values,_=h.length-1,u=[],f={};if(_<0)return r;for(a=0;a<=_;a++)l=c(t,h[a],s,r,n,_!==a),u[a]=l.end;for(o in e)f[o]=e[o];return f.values=u,(r=new d(t,"bezier",0,0,l.pt,2)).data=l,r.plugin=n,r.setRatio=p,0===f.autoRotate&&(f.autoRotate=!0),!f.autoRotate||f.autoRotate instanceof Array||(a=!0===f.autoRotate?0:Number(f.autoRotate),f.autoRotate=null!=l.end.left?[["left","top","rotation",a,!1]]:null!=l.end.x&&[["x","y","rotation",a,!1]]),f.autoRotate&&(s._transform||s._enableTransforms(!1),l.autoRotate=s._target._gsTransform,l.proxy.rotation=l.autoRotate.rotation||0,s._overwriteProps.push("rotation")),n._onInitTween(l.proxy,f,s._tween),r}})}},t._mod=function(t){for(var e,i=this._overwriteProps,s=i.length;-1<--s;)(e=t[i[s]])&&"function"==typeof e&&(this._mod[i[s]]=e)},t._kill=function(t){var e,i,s=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=s.length;-1<--i;)s[i]===e&&s.splice(i,1);if(s=this._autoRotate)for(i=s.length;-1<--i;)t[s[i][2]]&&s.splice(i,1);return this._super._kill.call(this,t)},re._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(n,N){var p,P,S,d,B=function t(){n.call(this,"css"),this._overwriteProps.length=0,this.setRatio=t.prototype.setRatio},h=re._gsDefine.globals,m={},t=B.prototype=new n("css");(t.constructor=B).version="2.0.2",B.API=2,B.defaultTransformPerspective=0,B.defaultSkewType="compensated",B.defaultSmoothOrigin=!0,B.suffixMap={top:t="px",right:t,bottom:t,left:t,width:t,height:t,fontSize:t,padding:t,margin:t,perspective:t,lineHeight:""};var k,g,y,Y,v,O,A,R,e,i,C=/(?:\-|\.|\b)(\d|\.|e\-)+/g,M=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,T=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,_=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,D=/(?:\d|\-|\+|=|#|\.)*/g,z=/opacity *= *([^)]*)/i,x=/opacity:([^;]*)/i,a=/alpha\(opacity *=.+?\)/i,w=/^(rgb|hsl)/,o=/([A-Z])/g,l=/-([a-z])/gi,b=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,u=function(t,e){return e.toUpperCase()},c=/(?:Left|Right|Width)/i,f=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,F=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,E=/,(?=[^\)]*(?:\(|$))/gi,I=/[\s,\(]/i,j=Math.PI/180,U=180/Math.PI,L={},s={style:{}},X=re.document||{createElement:function(){return s}},q=function(t,e){return X.createElementNS?X.createElementNS(e||"http://www.w3.org/1999/xhtml",t):X.createElement(t)},V=q("div"),H=q("img"),r=B._internals={_specialProps:m},G=(re.navigator||{}).userAgent||"",W=(e=G.indexOf("Android"),i=q("a"),y=-1!==G.indexOf("Safari")&&-1===G.indexOf("Chrome")&&(-1===e||3<parseFloat(G.substr(e+8,2))),v=y&&parseFloat(G.substr(G.indexOf("Version/")+8,2))<6,Y=-1!==G.indexOf("Firefox"),(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(G)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(G))&&(O=parseFloat(RegExp.$1)),!!i&&(i.style.cssText="top:1px;opacity:.55;",/^0.55/.test(i.style.opacity))),$=function(t){return z.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},Z=function(t){re.console&&console.log(t)},Q="",J="",K=function(t,e){var i,s,r=(e=e||V).style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],s=5;-1<--s&&void 0===r[i[s]+t];);return 0<=s?(Q="-"+(J=3===s?"ms":i[s]).toLowerCase()+"-",J+t):null},tt=("undefined"!=typeof window?window:X.defaultView||{getComputedStyle:function(){}}).getComputedStyle,et=B.getStyle=function(t,e,i,s,r){var n;return W||"opacity"!==e?(!s&&t.style[e]?n=t.style[e]:(i=i||tt(t))?n=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(o,"-$1").toLowerCase()):t.currentStyle&&(n=t.currentStyle[e]),null==r||n&&"none"!==n&&"auto"!==n&&"auto auto"!==n?n:r):$(t)},it=r.convertToPixels=function(t,e,i,s,r){if("px"===s||!s&&"lineHeight"!==e)return i;if("auto"===s||!i)return 0;var n,a,o,l=c.test(e),h=t,_=V.style,u=i<0,f=1===i;if(u&&(i=-i),f&&(i*=100),"lineHeight"!==e||s)if("%"===s&&-1!==e.indexOf("border"))n=i/100*(l?t.clientWidth:t.clientHeight);else{if(_.cssText="border:0 solid red;position:"+et(t,"position")+";line-height:0;","%"!==s&&h.appendChild&&"v"!==s.charAt(0)&&"rem"!==s)_[l?"borderLeftWidth":"borderTopWidth"]=i+s;else{if(h=t.parentNode||X.body,-1!==et(h,"display").indexOf("flex")&&(_.position="absolute"),a=h._gsCache,o=N.ticker.frame,a&&l&&a.time===o)return a.width*i/100;_[l?"width":"height"]=i+s}h.appendChild(V),n=parseFloat(V[l?"offsetWidth":"offsetHeight"]),h.removeChild(V),l&&"%"===s&&!1!==B.cacheWidths&&((a=h._gsCache=h._gsCache||{}).time=o,a.width=n/i*100),0!==n||r||(n=it(t,e,i,s,!0))}else a=tt(t).lineHeight,t.style.lineHeight=i,n=parseFloat(tt(t).lineHeight),t.style.lineHeight=a;return f&&(n/=100),u?-n:n},st=r.calculateOffset=function(t,e,i){if("absolute"!==et(t,"position",i))return 0;var s="left"===e?"Left":"Top",r=et(t,"margin"+s,i);return t["offset"+s]-(it(t,e,parseFloat(r),r.replace(D,""))||0)},rt=function(t,e){var i,s,r,n={};if(e=e||tt(t,null))if(i=e.length)for(;-1<--i;)-1!==(r=e[i]).indexOf("-transform")&&Et!==r||(n[r.replace(l,u)]=e.getPropertyValue(r));else for(i in e)-1!==i.indexOf("Transform")&&Ft!==i||(n[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===n[i]&&(n[i.replace(l,u)]=e[i]);return W||(n.opacity=$(t)),s=Wt(t,e,!1),n.rotation=s.rotation,n.skewX=s.skewX,n.scaleX=s.scaleX,n.scaleY=s.scaleY,n.x=s.x,n.y=s.y,Lt&&(n.z=s.z,n.rotationX=s.rotationX,n.rotationY=s.rotationY,n.scaleZ=s.scaleZ),n.filters&&delete n.filters,n},nt=function(t,e,i,s,r){var n,a,o,l={},h=t.style;for(a in i)"cssText"!==a&&"length"!==a&&isNaN(a)&&(e[a]!==(n=i[a])||r&&r[a])&&-1===a.indexOf("Origin")&&("number"!=typeof n&&"string"!=typeof n||(l[a]="auto"!==n||"left"!==a&&"top"!==a?""!==n&&"auto"!==n&&"none"!==n||"string"!=typeof e[a]||""===e[a].replace(_,"")?n:0:st(t,a),void 0!==h[a]&&(o=new Tt(h,a,h[a],o))));if(s)for(a in s)"className"!==a&&(l[a]=s[a]);return{difs:l,firstMPT:o}},at={width:["Left","Right"],height:["Top","Bottom"]},ot=["marginLeft","marginRight","marginTop","marginBottom"],lt=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||tt(t))[e]||0;if(t.getCTM&&Vt(t))return t.getBBox()[e]||0;var s=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=at[e],n=r.length;for(i=i||tt(t,null);-1<--n;)s-=parseFloat(et(t,"padding"+r[n],i,!0))||0,s-=parseFloat(et(t,"border"+r[n]+"Width",i,!0))||0;return s},ht=function t(e,i){if("contain"===e||"auto"===e||"auto auto"===e)return e+" ";null!=e&&""!==e||(e="0 0");var s,r=e.split(" "),n=-1!==e.indexOf("left")?"0%":-1!==e.indexOf("right")?"100%":r[0],a=-1!==e.indexOf("top")?"0%":-1!==e.indexOf("bottom")?"100%":r[1];if(3<r.length&&!i){for(r=e.split(", ").join(",").split(","),e=[],s=0;s<r.length;s++)e.push(t(r[s]));return e.join(",")}return null==a?a="center"===n?"50%":"0":"center"===a&&(a="50%"),("center"===n||isNaN(parseFloat(n))&&-1===(n+"").indexOf("="))&&(n="50%"),e=n+" "+a+(2<r.length?" "+r[2]:""),i&&(i.oxp=-1!==n.indexOf("%"),i.oyp=-1!==a.indexOf("%"),i.oxr="="===n.charAt(1),i.oyr="="===a.charAt(1),i.ox=parseFloat(n.replace(_,"")),i.oy=parseFloat(a.replace(_,"")),i.v=e),i||e},_t=function(t,e){return"function"==typeof t&&(t=t(R,A)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},ut=function(t,e){"function"==typeof t&&(t=t(R,A));var i="string"==typeof t&&"="===t.charAt(1);return"string"==typeof t&&"v"===t.charAt(t.length-2)&&(t=(i?t.substr(0,2):0)+window["inner"+("vh"===t.substr(-2)?"Height":"Width")]*(parseFloat(i?t.substr(2):t)/100)),null==t?e:i?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ft=function(t,e,i,s){var r,n,a,o,l;return"function"==typeof t&&(t=t(R,A)),(o=null==t?e:"number"==typeof t?t:(r=360,n=t.split("_"),a=((l="="===t.charAt(1))?parseInt(t.charAt(0)+"1",10)*parseFloat(n[0].substr(2)):parseFloat(n[0]))*(-1===t.indexOf("rad")?1:U)-(l?0:e),n.length&&(s&&(s[i]=e+a),-1!==t.indexOf("short")&&(a%=r)!==a%180&&(a=a<0?a+r:a-r),-1!==t.indexOf("_cw")&&a<0?a=(a+3599999999640)%r-(a/r|0)*r:-1!==t.indexOf("ccw")&&0<a&&(a=(a-3599999999640)%r-(a/r|0)*r)),e+a))<1e-6&&-1e-6<o&&(o=0),o},ct={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},pt=function(t,e,i){return 255*(6*(t=t<0?t+1:1<t?t-1:t)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},dt=B.parseColor=function(t,e){var i,s,r,n,a,o,l,h,_,u,f;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ct[t])i=ct[t];else if("#"===t.charAt(0))4===t.length&&(t="#"+(s=t.charAt(1))+s+(r=t.charAt(2))+r+(n=t.charAt(3))+n),i=[(t=parseInt(t.substr(1),16))>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=f=t.match(C),e){if(-1!==t.indexOf("="))return t.match(M)}else a=Number(i[0])%360/360,o=Number(i[1])/100,s=2*(l=Number(i[2])/100)-(r=l<=.5?l*(o+1):l+o-l*o),3<i.length&&(i[3]=Number(i[3])),i[0]=pt(a+1/3,s,r),i[1]=pt(a,s,r),i[2]=pt(a-1/3,s,r);else i=t.match(C)||ct.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),3<i.length&&(i[3]=Number(i[3]))}else i=ct.black;return e&&!f&&(s=i[0]/255,r=i[1]/255,n=i[2]/255,l=((h=Math.max(s,r,n))+(_=Math.min(s,r,n)))/2,h===_?a=o=0:(u=h-_,o=.5<l?u/(2-h-_):u/(h+_),a=h===s?(r-n)/u+(r<n?6:0):h===r?(n-s)/u+2:(s-r)/u+4,a*=60),i[0]=a+.5|0,i[1]=100*o+.5|0,i[2]=100*l+.5|0),i},mt=function(t,e){var i,s,r,n=t.match(gt)||[],a=0,o="";if(!n.length)return t;for(i=0;i<n.length;i++)s=n[i],a+=(r=t.substr(a,t.indexOf(s,a)-a)).length+s.length,3===(s=dt(s,e)).length&&s.push(1),o+=r+(e?"hsla("+s[0]+","+s[1]+"%,"+s[2]+"%,"+s[3]:"rgba("+s.join(","))+")";return o+t.substr(a)},gt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(t in ct)gt+="|"+t+"\\b";gt=new RegExp(gt+")","gi"),B.colorStringFilter=function(t){var e,i=t[0]+" "+t[1];gt.test(i)&&(e=-1!==i.indexOf("hsl(")||-1!==i.indexOf("hsla("),t[0]=mt(t[0],e),t[1]=mt(t[1],e)),gt.lastIndex=0},N.defaultStringFilter||(N.defaultStringFilter=B.colorStringFilter);var yt=function(t,e,n,a){if(null==t)return function(t){return t};var o,l=e?(t.match(gt)||[""])[0]:"",h=t.split(l).join("").match(T)||[],_=t.substr(0,t.indexOf(h[0])),u=")"===t.charAt(t.length-1)?")":"",f=-1!==t.indexOf(" ")?" ":",",c=h.length,p=0<c?h[0].replace(C,""):"";return c?o=e?function(t){var e,i,s,r;if("number"==typeof t)t+=p;else if(a&&E.test(t)){for(r=t.replace(E,"|").split("|"),s=0;s<r.length;s++)r[s]=o(r[s]);return r.join(",")}if(e=(t.match(gt)||[l])[0],s=(i=t.split(e).join("").match(T)||[]).length,c>s--)for(;++s<c;)i[s]=n?i[(s-1)/2|0]:h[s];return _+i.join(f)+f+e+u+(-1!==t.indexOf("inset")?" inset":"")}:function(t){var e,i,s;if("number"==typeof t)t+=p;else if(a&&E.test(t)){for(i=t.replace(E,"|").split("|"),s=0;s<i.length;s++)i[s]=o(i[s]);return i.join(",")}if(s=(e=t.match(T)||[]).length,c>s--)for(;++s<c;)e[s]=n?e[(s-1)/2|0]:h[s];return _+e.join(f)+u}:function(t){return t}},vt=function(h){return h=h.split(","),function(t,e,i,s,r,n,a){var o,l=(e+"").split(" ");for(a={},o=0;o<4;o++)a[h[o]]=l[o]=l[o]||l[(o-1)/2>>0];return s.parse(t,a,r,n)}},Tt=(r._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,s,r,n,a=this.data,o=a.proxy,l=a.firstMPT;l;)e=o[l.v],l.r?e=l.r(e):e<1e-6&&-1e-6<e&&(e=0),l.t[l.p]=e,l=l._next;if(a.autoRotate&&(a.autoRotate.rotation=a.mod?a.mod.call(this._tween,o.rotation,this.t,this._tween):o.rotation),1===t||0===t)for(l=a.firstMPT,n=1===t?"e":"b";l;){if((i=l.t).type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,s=1;s<i.l;s++)r+=i["xn"+s]+i["xs"+(s+1)];i[n]=r}}else i[n]=i.s+i.xs0;l=l._next}},function(t,e,i,s,r){this.t=t,this.p=e,this.v=i,this.r=r,s&&((s._prev=this)._next=s)}),xt=(r._parseToProxy=function(t,e,i,s,r,n){var a,o,l,h,_,u=s,f={},c={},p=i._transform,d=L;for(i._transform=null,L=e,s=_=i.parse(t,e,s,r),L=d,n&&(i._transform=p,u&&(u._prev=null,u._prev&&(u._prev._next=null)));s&&s!==u;){if(s.type<=1&&(c[o=s.p]=s.s+s.c,f[o]=s.s,n||(h=new Tt(s,"s",o,h,s.r),s.c=0),1===s.type))for(a=s.l;0<--a;)l="xn"+a,c[o=s.p+"_"+l]=s.data[l],f[o]=s[l],n||(h=new Tt(s,l,o,h,s.rxp[l]));s=s._next}return{proxy:f,end:c,firstMPT:h,pt:_}},r.CSSPropTween=function(t,e,i,s,r,n,a,o,l,h,_){this.t=t,this.p=e,this.s=i,this.c=s,this.n=a||e,t instanceof xt||d.push(this.n),this.r=o?"function"==typeof o?o:Math.round:o,this.type=n||0,l&&(this.pr=l,p=!0),this.b=void 0===h?i:h,this.e=void 0===_?i+s:_,r&&((this._next=r)._prev=this)}),wt=function(t,e,i,s,r,n){var a=new xt(t,e,i,s-i,r,-1,n);return a.b=i,a.e=a.xs0=s,a},bt=B.parseComplex=function(t,e,i,s,r,n,a,o,l,h){i=i||n||"","function"==typeof s&&(s=s(R,A)),a=new xt(t,e,0,0,a,h?2:1,null,!1,o,i,s),s+="",r&&gt.test(s+i)&&(B.colorStringFilter(s=[i,s]),i=s[0],s=s[1]);var _,u,f,c,p,d,m,g,y,v,T,x,w,b=i.split(", ").join(",").split(" "),P=s.split(", ").join(",").split(" "),O=b.length,S=!1!==k;for(-1===s.indexOf(",")&&-1===i.indexOf(",")||(P=-1!==(s+i).indexOf("rgb")||-1!==(s+i).indexOf("hsl")?(b=b.join(" ").replace(E,", ").split(" "),P.join(" ").replace(E,", ").split(" ")):(b=b.join(" ").split(",").join(", ").split(" "),P.join(" ").split(",").join(", ").split(" ")),O=b.length),O!==P.length&&(O=(b=(n||"").split(" ")).length),a.plugin=l,a.setRatio=h,_=gt.lastIndex=0;_<O;_++)if(c=b[_],p=P[_]+"",(g=parseFloat(c))||0===g)a.appendXtra("",g,_t(p,g),p.replace(M,""),!(!S||-1===p.indexOf("px"))&&Math.round,!0);else if(r&&gt.test(c))x=")"+((x=p.indexOf(")")+1)?p.substr(x):""),w=-1!==p.indexOf("hsl")&&W,v=p,c=dt(c,w),p=dt(p,w),(y=6<c.length+p.length)&&!W&&0===p[3]?(a["xs"+a.l]+=a.l?" transparent":"transparent",a.e=a.e.split(P[_]).join("transparent")):(W||(y=!1),w?a.appendXtra(v.substr(0,v.indexOf("hsl"))+(y?"hsla(":"hsl("),c[0],_t(p[0],c[0]),",",!1,!0).appendXtra("",c[1],_t(p[1],c[1]),"%,",!1).appendXtra("",c[2],_t(p[2],c[2]),y?"%,":"%"+x,!1):a.appendXtra(v.substr(0,v.indexOf("rgb"))+(y?"rgba(":"rgb("),c[0],p[0]-c[0],",",Math.round,!0).appendXtra("",c[1],p[1]-c[1],",",Math.round).appendXtra("",c[2],p[2]-c[2],y?",":x,Math.round),y&&(c=c.length<4?1:c[3],a.appendXtra("",c,(p.length<4?1:p[3])-c,x,!1))),gt.lastIndex=0;else if(d=c.match(C)){if(!(m=p.match(M))||m.length!==d.length)return a;for(u=f=0;u<d.length;u++)T=d[u],v=c.indexOf(T,f),a.appendXtra(c.substr(f,v-f),Number(T),_t(m[u],T),"",!(!S||"px"!==c.substr(v+T.length,2))&&Math.round,0===u),f=v+T.length;a["xs"+a.l]+=c.substr(f)}else a["xs"+a.l]+=a.l||a["xs"+a.l]?" "+p:p;if(-1!==s.indexOf("=")&&a.data){for(x=a.xs0+a.data.s,_=1;_<a.l;_++)x+=a["xs"+_]+a.data["xn"+_];a.e=x+a["xs"+_]}return a.l||(a.type=-1,a.xs0=a.e),a.xfirst||a},Pt=9;for((t=xt.prototype).l=t.pr=0;0<--Pt;)t["xn"+Pt]=0,t["xs"+Pt]="";t.xs0="",t._next=t._prev=t.xfirst=t.data=t.plugin=t.setRatio=t.rxp=null,t.appendXtra=function(t,e,i,s,r,n){var a=this,o=a.l;return a["xs"+o]+=n&&(o||a["xs"+o])?" "+t:t||"",i||0===o||a.plugin?(a.l++,a.type=a.setRatio?2:1,a["xs"+a.l]=s||"",0<o?(a.data["xn"+o]=e+i,a.rxp["xn"+o]=r,a["xn"+o]=e,a.plugin||(a.xfirst=new xt(a,"xn"+o,e,i,a.xfirst||a,0,a.n,r,a.pr),a.xfirst.xs0=0)):(a.data={s:e+i},a.rxp={},a.s=e,a.c=i,a.r=r),a):(a["xs"+o]+=e+(s||""),a)};var Ot=function(t,e){e=e||{},this.p=e.prefix&&K(t)||t,m[t]=m[this.p]=this,this.format=e.formatter||yt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},St=r._registerComplexSpecialProp=function(t,e,i){"object"!==(void 0===e?"undefined":se(e))&&(e={parser:i});var s,r=t.split(","),n=e.defaultValue;for(i=i||[n],s=0;s<r.length;s++)e.prefix=0===s&&e.prefix,e.defaultValue=i[s]||n,new Ot(r[s],e)},kt=r._registerPluginProp=function(t){if(!m[t]){var l=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";St(t,{parser:function(t,e,i,s,r,n,a){var o=h.com.greensock.plugins[l];return o?(o._cssRegister(),m[i].parse(t,e,i,s,r,n,a)):(Z("Error: "+l+" js file not loaded."),r)}})}};(t=Ot.prototype).parseComplex=function(t,e,i,s,r,n){var a,o,l,h,_,u,f=this.keyword;if(this.multi&&(E.test(i)||E.test(e)?(o=e.replace(E,"|").split("|"),l=i.replace(E,"|").split("|")):f&&(o=[e],l=[i])),l){for(h=l.length>o.length?l.length:o.length,a=0;a<h;a++)e=o[a]=o[a]||this.dflt,i=l[a]=l[a]||this.dflt,f&&(_=e.indexOf(f))!==(u=i.indexOf(f))&&(-1===u?o[a]=o[a].split(f).join(""):-1===_&&(o[a]+=" "+f));e=o.join(", "),i=l.join(", ")}return bt(t,this.p,e,i,this.clrs,this.dflt,s,this.pr,r,n)},t.parse=function(t,e,i,s,r,n,a){return this.parseComplex(t.style,this.format(et(t,this.p,S,!1,this.dflt)),this.format(e),r,n)},B.registerSpecialProp=function(t,l,h){St(t,{parser:function(t,e,i,s,r,n,a){var o=new xt(t,i,0,0,r,2,i,!1,h);return o.plugin=n,o.setRatio=l(t,e,s._tween,i),o},priority:h})},B.useSVGTransformAttr=!0;var At,Rt,Ct,Mt,Dt,zt="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Ft=K("transform"),Et=Q+"transform",It=K("transformOrigin"),Lt=null!==K("perspective"),Xt=r.Transform=function(){this.perspective=parseFloat(B.defaultTransformPerspective)||0,this.force3D=!(!1===B.defaultForce3D||!Lt)&&(B.defaultForce3D||"auto")},qt=re.SVGElement,Nt=function(t,e,i){var s,r=X.createElementNS("http://www.w3.org/2000/svg",t),n=/([a-z])([A-Z])/g;for(s in i)r.setAttributeNS(null,s.replace(n,"$1-$2").toLowerCase(),i[s]);return e.appendChild(r),r},Bt=X.documentElement||{},Yt=(Dt=O||/Android/i.test(G)&&!re.chrome,X.createElementNS&&!Dt&&(Rt=Nt("svg",Bt),Mt=(Ct=Nt("rect",Rt,{width:100,height:50,x:100})).getBoundingClientRect().width,Ct.style[It]="50% 50%",Ct.style[Ft]="scaleX(0.5)",Dt=Mt===Ct.getBoundingClientRect().width&&!(Y&&Lt),Bt.removeChild(Rt)),Dt),jt=function(t,e,i,s,r,n){var a,o,l,h,_,u,f,c,p,d,m,g,y,v,T=t._gsTransform,x=Gt(t,!0);T&&(y=T.xOrigin,v=T.yOrigin),(!s||(a=s.split(" ")).length<2)&&(0===(f=t.getBBox()).x&&0===f.y&&f.width+f.height===0&&(f={x:parseFloat(t.hasAttribute("x")?t.getAttribute("x"):t.hasAttribute("cx")?t.getAttribute("cx"):0)||0,y:parseFloat(t.hasAttribute("y")?t.getAttribute("y"):t.hasAttribute("cy")?t.getAttribute("cy"):0)||0,width:0,height:0}),a=[(-1!==(e=ht(e).split(" "))[0].indexOf("%")?parseFloat(e[0])/100*f.width:parseFloat(e[0]))+f.x,(-1!==e[1].indexOf("%")?parseFloat(e[1])/100*f.height:parseFloat(e[1]))+f.y]),i.xOrigin=h=parseFloat(a[0]),i.yOrigin=_=parseFloat(a[1]),s&&x!==Ht&&(u=x[0],f=x[1],c=x[2],p=x[3],d=x[4],m=x[5],(g=u*p-f*c)&&(o=h*(p/g)+_*(-c/g)+(c*m-p*d)/g,l=h*(-f/g)+_*(u/g)-(u*m-f*d)/g,h=i.xOrigin=a[0]=o,_=i.yOrigin=a[1]=l)),T&&(n&&(i.xOffset=T.xOffset,i.yOffset=T.yOffset,T=i),r||!1!==r&&!1!==B.defaultSmoothOrigin?(o=h-y,l=_-v,T.xOffset+=o*x[0]+l*x[2]-o,T.yOffset+=o*x[1]+l*x[3]-l):T.xOffset=T.yOffset=0),n||t.setAttribute("data-svg-origin",a.join(" "))},Ut=function(e){try{return e.getBBox()}catch(t){return function t(e){var i,s=q("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),r=this.parentNode,n=this.nextSibling,a=this.style.cssText;if(Bt.appendChild(s),s.appendChild(this),this.style.display="block",e)try{i=this.getBBox(),this._originalGetBBox=this.getBBox,this.getBBox=t}catch(t){}else this._originalGetBBox&&(i=this._originalGetBBox());return n?r.insertBefore(this,n):r.appendChild(this),Bt.removeChild(s),this.style.cssText=a,i}.call(e,!0)}},Vt=function(t){return!(!qt||!t.getCTM||t.parentNode&&!t.ownerSVGElement||!Ut(t))},Ht=[1,0,0,1,0,0],Gt=function(t,e){var i,s,r,n,a,o,l=t._gsTransform||new Xt,h=t.style;if(Ft?s=et(t,Et,null,!0):t.currentStyle&&(s=(s=t.currentStyle.filter.match(f))&&4===s.length?[s[0].substr(4),Number(s[2].substr(4)),Number(s[1].substr(4)),s[3].substr(4),l.x||0,l.y||0].join(","):""),i=!s||"none"===s||"matrix(1, 0, 0, 1, 0, 0)"===s,!Ft||!(o=!tt(t)||"none"===tt(t).display)&&t.parentNode||(o&&(n=h.display,h.display="block"),t.parentNode||(a=1,Bt.appendChild(t)),i=!(s=et(t,Et,null,!0))||"none"===s||"matrix(1, 0, 0, 1, 0, 0)"===s,n?h.display=n:o&&Jt(h,"display"),a&&Bt.removeChild(t)),(l.svg||t.getCTM&&Vt(t))&&(i&&-1!==(h[Ft]+"").indexOf("matrix")&&(s=h[Ft],i=0),r=t.getAttribute("transform"),i&&r&&(s="matrix("+(r=t.transform.baseVal.consolidate().matrix).a+","+r.b+","+r.c+","+r.d+","+r.e+","+r.f+")",i=0)),i)return Ht;for(r=(s||"").match(C)||[],Pt=r.length;-1<--Pt;)n=Number(r[Pt]),r[Pt]=(a=n-(n|=0))?(1e5*a+(a<0?-.5:.5)|0)/1e5+n:n;return e&&6<r.length?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},Wt=r.getTransform=function(t,e,i,s){if(t._gsTransform&&i&&!s)return t._gsTransform;var r,n,a,o,l,h,_=i&&t._gsTransform||new Xt,u=_.scaleX<0,f=Lt&&(parseFloat(et(t,It,e,!1,"0 0 0").split(" ")[2])||_.zOrigin)||0,c=parseFloat(B.defaultTransformPerspective)||0;if(_.svg=!(!t.getCTM||!Vt(t)),_.svg&&(jt(t,et(t,It,e,!1,"50% 50%")+"",_,t.getAttribute("data-svg-origin")),At=B.useSVGTransformAttr||Yt),(r=Gt(t))!==Ht){if(16===r.length){var p,d,m,g,y,v=r[0],T=r[1],x=r[2],w=r[3],b=r[4],P=r[5],O=r[6],S=r[7],k=r[8],A=r[9],R=r[10],C=r[12],M=r[13],D=r[14],z=r[11],F=Math.atan2(O,R);_.zOrigin&&(C=k*(D=-_.zOrigin)-r[12],M=A*D-r[13],D=R*D+_.zOrigin-r[14]),_.rotationX=F*U,F&&(p=b*(g=Math.cos(-F))+k*(y=Math.sin(-F)),d=P*g+A*y,m=O*g+R*y,k=b*-y+k*g,A=P*-y+A*g,R=O*-y+R*g,z=S*-y+z*g,b=p,P=d,O=m),F=Math.atan2(-x,R),_.rotationY=F*U,F&&(d=T*(g=Math.cos(-F))-A*(y=Math.sin(-F)),m=x*g-R*y,A=T*y+A*g,R=x*y+R*g,z=w*y+z*g,v=p=v*g-k*y,T=d,x=m),F=Math.atan2(T,v),_.rotation=F*U,F&&(p=v*(g=Math.cos(F))+T*(y=Math.sin(F)),d=b*g+P*y,m=k*g+A*y,T=T*g-v*y,P=P*g-b*y,A=A*g-k*y,v=p,b=d,k=m),_.rotationX&&359.9<Math.abs(_.rotationX)+Math.abs(_.rotation)&&(_.rotationX=_.rotation=0,_.rotationY=180-_.rotationY),F=Math.atan2(b,P),_.scaleX=(1e5*Math.sqrt(v*v+T*T+x*x)+.5|0)/1e5,_.scaleY=(1e5*Math.sqrt(P*P+O*O)+.5|0)/1e5,_.scaleZ=(1e5*Math.sqrt(k*k+A*A+R*R)+.5|0)/1e5,v/=_.scaleX,b/=_.scaleY,T/=_.scaleX,P/=_.scaleY,2e-5<Math.abs(F)?(_.skewX=F*U,b=0,"simple"!==_.skewType&&(_.scaleY*=1/Math.cos(F))):_.skewX=0,_.perspective=z?1/(z<0?-z:z):0,_.x=C,_.y=M,_.z=D,_.svg&&(_.x-=_.xOrigin-(_.xOrigin*v-_.yOrigin*b),_.y-=_.yOrigin-(_.yOrigin*T-_.xOrigin*P))}else if(!Lt||s||!r.length||_.x!==r[4]||_.y!==r[5]||!_.rotationX&&!_.rotationY){var E=6<=r.length,I=E?r[0]:1,L=r[1]||0,X=r[2]||0,q=E?r[3]:1;_.x=r[4]||0,_.y=r[5]||0,a=Math.sqrt(I*I+L*L),o=Math.sqrt(q*q+X*X),l=I||L?Math.atan2(L,I)*U:_.rotation||0,h=X||q?Math.atan2(X,q)*U+l:_.skewX||0,_.scaleX=a,_.scaleY=o,_.rotation=l,_.skewX=h,Lt&&(_.rotationX=_.rotationY=_.z=0,_.perspective=c,_.scaleZ=1),_.svg&&(_.x-=_.xOrigin-(_.xOrigin*I+_.yOrigin*X),_.y-=_.yOrigin-(_.xOrigin*L+_.yOrigin*q))}for(n in 90<Math.abs(_.skewX)&&Math.abs(_.skewX)<270&&(u?(_.scaleX*=-1,_.skewX+=_.rotation<=0?180:-180,_.rotation+=_.rotation<=0?180:-180):(_.scaleY*=-1,_.skewX+=_.skewX<=0?180:-180)),_.zOrigin=f,_)_[n]<2e-5&&-2e-5<_[n]&&(_[n]=0)}return i&&(t._gsTransform=_).svg&&(At&&t.style[Ft]?N.delayedCall(.001,function(){Jt(t.style,Ft)}):!At&&t.getAttribute("transform")&&N.delayedCall(.001,function(){t.removeAttribute("transform")})),_},$t=function(t){var e,i,s=this.data,r=-s.rotation*j,n=r+s.skewX*j,a=1e5,o=(Math.cos(r)*s.scaleX*a|0)/a,l=(Math.sin(r)*s.scaleX*a|0)/a,h=(Math.sin(n)*-s.scaleY*a|0)/a,_=(Math.cos(n)*s.scaleY*a|0)/a,u=this.t.style,f=this.t.currentStyle;if(f){i=l,l=-h,h=-i,e=f.filter,u.filter="";var c,p,d=this.t.offsetWidth,m=this.t.offsetHeight,g="absolute"!==f.position,y="progid:DXImageTransform.Microsoft.Matrix(M11="+o+", M12="+l+", M21="+h+", M22="+_,v=s.x+d*s.xPercent/100,T=s.y+m*s.yPercent/100;if(null!=s.ox&&(v+=(c=(s.oxp?d*s.ox*.01:s.ox)-d/2)-(c*o+(p=(s.oyp?m*s.oy*.01:s.oy)-m/2)*l),T+=p-(c*h+p*_)),y+=g?", Dx="+((c=d/2)-(c*o+(p=m/2)*l)+v)+", Dy="+(p-(c*h+p*_)+T)+")":", sizingMethod='auto expand')",-1!==e.indexOf("DXImageTransform.Microsoft.Matrix(")?u.filter=e.replace(F,y):u.filter=y+" "+e,0!==t&&1!==t||1===o&&0===l&&0===h&&1===_&&(g&&-1===y.indexOf("Dx=0, Dy=0")||z.test(e)&&100!==parseFloat(RegExp.$1)||-1===e.indexOf(e.indexOf("Alpha"))&&u.removeAttribute("filter")),!g){var x,w,b,P=O<8?1:-1;for(c=s.ieOffsetX||0,p=s.ieOffsetY||0,s.ieOffsetX=Math.round((d-((o<0?-o:o)*d+(l<0?-l:l)*m))/2+v),s.ieOffsetY=Math.round((m-((_<0?-_:_)*m+(h<0?-h:h)*d))/2+T),Pt=0;Pt<4;Pt++)b=(i=-1!==(x=f[w=ot[Pt]]).indexOf("px")?parseFloat(x):it(this.t,w,parseFloat(x),x.replace(D,""))||0)!==s[w]?Pt<2?-s.ieOffsetX:-s.ieOffsetY:Pt<2?c-s.ieOffsetX:p-s.ieOffsetY,u[w]=(s[w]=Math.round(i-b*(0===Pt||2===Pt?1:P)))+"px"}}},Zt=r.set3DTransformRatio=r.setTransformRatio=function(t){var e,i,s,r,n,a,o,l,h,_,u,f,c,p,d,m,g,y,v,T,x,w,b,P=this.data,O=this.t.style,S=P.rotation,k=P.rotationX,A=P.rotationY,R=P.scaleX,C=P.scaleY,M=P.scaleZ,D=P.x,z=P.y,F=P.z,E=P.svg,I=P.perspective,L=P.force3D,X=P.skewY,q=P.skewX;if(X&&(q+=X,S+=X),!((1!==t&&0!==t||"auto"!==L||this.tween._totalTime!==this.tween._totalDuration&&this.tween._totalTime)&&L||F||I||A||k||1!==M)||At&&E||!Lt)S||q||E?(S*=j,w=q*j,b=1e5,i=Math.cos(S)*R,n=Math.sin(S)*R,s=Math.sin(S-w)*-C,a=Math.cos(S-w)*C,w&&"simple"===P.skewType&&(e=Math.tan(w-X*j),s*=e=Math.sqrt(1+e*e),a*=e,X&&(e=Math.tan(X*j),i*=e=Math.sqrt(1+e*e),n*=e)),E&&(D+=P.xOrigin-(P.xOrigin*i+P.yOrigin*s)+P.xOffset,z+=P.yOrigin-(P.xOrigin*n+P.yOrigin*a)+P.yOffset,At&&(P.xPercent||P.yPercent)&&(d=this.t.getBBox(),D+=.01*P.xPercent*d.width,z+=.01*P.yPercent*d.height),D<(d=1e-6)&&-d<D&&(D=0),z<d&&-d<z&&(z=0)),v=(i*b|0)/b+","+(n*b|0)/b+","+(s*b|0)/b+","+(a*b|0)/b+","+D+","+z+")",E&&At?this.t.setAttribute("transform","matrix("+v):O[Ft]=(P.xPercent||P.yPercent?"translate("+P.xPercent+"%,"+P.yPercent+"%) matrix(":"matrix(")+v):O[Ft]=(P.xPercent||P.yPercent?"translate("+P.xPercent+"%,"+P.yPercent+"%) matrix(":"matrix(")+R+",0,0,"+C+","+D+","+z+")";else{if(Y&&(R<(d=1e-4)&&-d<R&&(R=M=2e-5),C<d&&-d<C&&(C=M=2e-5),!I||P.z||P.rotationX||P.rotationY||(I=0)),S||q)S*=j,m=i=Math.cos(S),g=n=Math.sin(S),q&&(S-=q*j,m=Math.cos(S),g=Math.sin(S),"simple"===P.skewType&&(e=Math.tan((q-X)*j),m*=e=Math.sqrt(1+e*e),g*=e,P.skewY&&(e=Math.tan(X*j),i*=e=Math.sqrt(1+e*e),n*=e))),s=-g,a=m;else{if(!(A||k||1!==M||I||E))return void(O[Ft]=(P.xPercent||P.yPercent?"translate("+P.xPercent+"%,"+P.yPercent+"%) translate3d(":"translate3d(")+D+"px,"+z+"px,"+F+"px)"+(1!==R||1!==C?" scale("+R+","+C+")":""));i=a=1,s=n=0}_=1,r=o=l=h=u=f=0,c=I?-1/I:0,p=P.zOrigin,d=1e-6,T=",",x="0",(S=A*j)&&(m=Math.cos(S),u=c*(l=-(g=Math.sin(S))),r=i*g,o=n*g,c*=_=m,i*=m,n*=m),(S=k*j)&&(e=s*(m=Math.cos(S))+r*(g=Math.sin(S)),y=a*m+o*g,h=_*g,f=c*g,r=s*-g+r*m,o=a*-g+o*m,_*=m,c*=m,s=e,a=y),1!==M&&(r*=M,o*=M,_*=M,c*=M),1!==C&&(s*=C,a*=C,h*=C,f*=C),1!==R&&(i*=R,n*=R,l*=R,u*=R),(p||E)&&(p&&(D+=r*-p,z+=o*-p,F+=_*-p+p),E&&(D+=P.xOrigin-(P.xOrigin*i+P.yOrigin*s)+P.xOffset,z+=P.yOrigin-(P.xOrigin*n+P.yOrigin*a)+P.yOffset),D<d&&-d<D&&(D=x),z<d&&-d<z&&(z=x),F<d&&-d<F&&(F=0)),v=P.xPercent||P.yPercent?"translate("+P.xPercent+"%,"+P.yPercent+"%) matrix3d(":"matrix3d(",v+=(i<d&&-d<i?x:i)+T+(n<d&&-d<n?x:n)+T+(l<d&&-d<l?x:l),v+=T+(u<d&&-d<u?x:u)+T+(s<d&&-d<s?x:s)+T+(a<d&&-d<a?x:a),k||A||1!==M?(v+=T+(h<d&&-d<h?x:h)+T+(f<d&&-d<f?x:f)+T+(r<d&&-d<r?x:r),v+=T+(o<d&&-d<o?x:o)+T+(_<d&&-d<_?x:_)+T+(c<d&&-d<c?x:c)+T):v+=",0,0,0,0,1,0,",v+=D+T+z+T+F+T+(I?1+-F/I:1)+")",O[Ft]=v}};(t=Xt.prototype).x=t.y=t.z=t.skewX=t.skewY=t.rotation=t.rotationX=t.rotationY=t.zOrigin=t.xPercent=t.yPercent=t.xOffset=t.yOffset=0,t.scaleX=t.scaleY=t.scaleZ=1,St("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,i,s,r,n,a){if(s._lastParsedTransform===a)return r;var o,l=(s._lastParsedTransform=a).scale&&"function"==typeof a.scale?a.scale:0;"function"==typeof a[i]&&(o=a[i],a[i]=e),l&&(a.scale=l(R,t));var h,_,u,f,c,p,d,m,g,y=t._gsTransform,v=t.style,T=zt.length,x=a,w={},b="transformOrigin",P=Wt(t,S,!0,x.parseTransform),O=x.transform&&("function"==typeof x.transform?x.transform(R,A):x.transform);if(P.skewType=x.skewType||P.skewType||B.defaultSkewType,s._transform=P,"rotationZ"in x&&(x.rotation=x.rotationZ),O&&"string"==typeof O&&Ft)(_=V.style)[Ft]=O,_.display="block",_.position="absolute",-1!==O.indexOf("%")&&(_.width=et(t,"width"),_.height=et(t,"height")),X.body.appendChild(V),h=Wt(V,null,!1),"simple"===P.skewType&&(h.scaleY*=Math.cos(h.skewX*j)),P.svg&&(p=P.xOrigin,d=P.yOrigin,h.x-=P.xOffset,h.y-=P.yOffset,(x.transformOrigin||x.svgOrigin)&&(O={},jt(t,ht(x.transformOrigin),O,x.svgOrigin,x.smoothOrigin,!0),p=O.xOrigin,d=O.yOrigin,h.x-=O.xOffset-P.xOffset,h.y-=O.yOffset-P.yOffset),(p||d)&&(m=Gt(V,!0),h.x-=p-(p*m[0]+d*m[2]),h.y-=d-(p*m[1]+d*m[3]))),X.body.removeChild(V),h.perspective||(h.perspective=P.perspective),null!=x.xPercent&&(h.xPercent=ut(x.xPercent,P.xPercent)),null!=x.yPercent&&(h.yPercent=ut(x.yPercent,P.yPercent));else if("object"===(void 0===x?"undefined":se(x))){if(h={scaleX:ut(null!=x.scaleX?x.scaleX:x.scale,P.scaleX),scaleY:ut(null!=x.scaleY?x.scaleY:x.scale,P.scaleY),scaleZ:ut(x.scaleZ,P.scaleZ),x:ut(x.x,P.x),y:ut(x.y,P.y),z:ut(x.z,P.z),xPercent:ut(x.xPercent,P.xPercent),yPercent:ut(x.yPercent,P.yPercent),perspective:ut(x.transformPerspective,P.perspective)},null!=(c=x.directionalRotation))if("object"===(void 0===c?"undefined":se(c)))for(_ in c)x[_]=c[_];else x.rotation=c;"string"==typeof x.x&&-1!==x.x.indexOf("%")&&(h.x=0,h.xPercent=ut(x.x,P.xPercent)),"string"==typeof x.y&&-1!==x.y.indexOf("%")&&(h.y=0,h.yPercent=ut(x.y,P.yPercent)),h.rotation=ft("rotation"in x?x.rotation:"shortRotation"in x?x.shortRotation+"_short":P.rotation,P.rotation,"rotation",w),Lt&&(h.rotationX=ft("rotationX"in x?x.rotationX:"shortRotationX"in x?x.shortRotationX+"_short":P.rotationX||0,P.rotationX,"rotationX",w),h.rotationY=ft("rotationY"in x?x.rotationY:"shortRotationY"in x?x.shortRotationY+"_short":P.rotationY||0,P.rotationY,"rotationY",w)),h.skewX=ft(x.skewX,P.skewX),h.skewY=ft(x.skewY,P.skewY)}for(Lt&&null!=x.force3D&&(P.force3D=x.force3D,f=!0),(u=P.force3D||P.z||P.rotationX||P.rotationY||h.z||h.rotationX||h.rotationY||h.perspective)||null==x.scale||(h.scaleZ=1);-1<--T;)(1e-6<(O=h[g=zt[T]]-P[g])||O<-1e-6||null!=x[g]||null!=L[g])&&(f=!0,r=new xt(P,g,P[g],O,r),g in w&&(r.e=w[g]),r.xs0=0,r.plugin=n,s._overwriteProps.push(r.n));return O=x.transformOrigin,P.svg&&(O||x.svgOrigin)&&(p=P.xOffset,d=P.yOffset,jt(t,ht(O),h,x.svgOrigin,x.smoothOrigin),r=wt(P,"xOrigin",(y?P:h).xOrigin,h.xOrigin,r,b),r=wt(P,"yOrigin",(y?P:h).yOrigin,h.yOrigin,r,b),p===P.xOffset&&d===P.yOffset||(r=wt(P,"xOffset",y?p:P.xOffset,P.xOffset,r,b),r=wt(P,"yOffset",y?d:P.yOffset,P.yOffset,r,b)),O="0px 0px"),(O||Lt&&u&&P.zOrigin)&&(Ft?(f=!0,g=It,O=(O||et(t,g,S,!1,"50% 50%"))+"",(r=new xt(v,g,0,0,r,-1,b)).b=v[g],r.plugin=n,r.xs0=r.e=Lt?(_=P.zOrigin,O=O.split(" "),P.zOrigin=(2<O.length&&(0===_||"0px"!==O[2])?parseFloat(O[2]):_)||0,r.xs0=r.e=O[0]+" "+(O[1]||"50%")+" 0px",(r=new xt(P,"zOrigin",0,0,r,-1,r.n)).b=_,P.zOrigin):O):ht(O+"",P)),f&&(s._transformType=P.svg&&At||!u&&3!==this._transformType?2:3),o&&(a[i]=o),l&&(a.scale=l),r},prefix:!0}),St("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),St("borderRadius",{defaultValue:"0px",parser:function(t,e,i,s,r,n){e=this.format(e);var a,o,l,h,_,u,f,c,p,d,m,g,y,v,T,x,w=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],b=t.style;for(p=parseFloat(t.offsetWidth),d=parseFloat(t.offsetHeight),a=e.split(" "),o=0;o<w.length;o++)this.p.indexOf("border")&&(w[o]=K(w[o])),-1!==(_=h=et(t,w[o],S,!1,"0px")).indexOf(" ")&&(_=(h=_.split(" "))[0],h=h[1]),u=l=a[o],f=parseFloat(_),g=_.substr((f+"").length),""===(m=(y="="===u.charAt(1))?(c=parseInt(u.charAt(0)+"1",10),u=u.substr(2),c*=parseFloat(u),u.substr((c+"").length-(c<0?1:0))||""):(c=parseFloat(u),u.substr((c+"").length)))&&(m=P[i]||g),m!==g&&(v=it(t,"borderLeft",f,g),T=it(t,"borderTop",f,g),h="%"===m?(_=v/p*100+"%",T/d*100+"%"):"em"===m?(_=v/(x=it(t,"borderLeft",1,"em"))+"em",T/x+"em"):(_=v+"px",T+"px"),y&&(u=parseFloat(_)+c+m,l=parseFloat(h)+c+m)),r=bt(b,w[o],_+" "+h,u+" "+l,!1,"0px",r);return r},prefix:!0,formatter:yt("0px 0px 0px 0px",!1,!0)}),St("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,i,s,r,n){return bt(t.style,i,this.format(et(t,i,S,!1,"0px 0px")),this.format(e),!1,"0px",r)},prefix:!0,formatter:yt("0px 0px",!1,!0)}),St("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,s,r,n){var a,o,l,h,_,u,f="background-position",c=S||tt(t,null),p=this.format((c?O?c.getPropertyValue(f+"-x")+" "+c.getPropertyValue(f+"-y"):c.getPropertyValue(f):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),d=this.format(e);if(-1!==p.indexOf("%")!=(-1!==d.indexOf("%"))&&d.split(",").length<2&&(u=et(t,"backgroundImage").replace(b,""))&&"none"!==u){for(a=p.split(" "),o=d.split(" "),H.setAttribute("src",u),l=2;-1<--l;)(h=-1!==(p=a[l]).indexOf("%"))!==(-1!==o[l].indexOf("%"))&&(_=0===l?t.offsetWidth-H.width:t.offsetHeight-H.height,a[l]=h?parseFloat(p)/100*_+"px":parseFloat(p)/_*100+"%");p=a.join(" ")}return this.parseComplex(t.style,p,d,r,n)},formatter:ht}),St("backgroundSize",{defaultValue:"0 0",formatter:function(t){return"co"===(t+="").substr(0,2)?t:ht(-1===t.indexOf(" ")?t+" "+t:t)}}),St("perspective",{defaultValue:"0px",prefix:!0}),St("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),St("transformStyle",{prefix:!0}),St("backfaceVisibility",{prefix:!0}),St("userSelect",{prefix:!0}),St("margin",{parser:vt("marginTop,marginRight,marginBottom,marginLeft")}),St("padding",{parser:vt("paddingTop,paddingRight,paddingBottom,paddingLeft")}),St("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,s,r,n){var a,o,l;return e=O<9?(o=t.currentStyle,l=O<8?" ":",",a="rect("+o.clipTop+l+o.clipRight+l+o.clipBottom+l+o.clipLeft+")",this.format(e).split(",").join(l)):(a=this.format(et(t,this.p,S,!1,this.dflt)),this.format(e)),this.parseComplex(t.style,a,e,r,n)}}),St("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),St("autoRound,strictUnits",{parser:function(t,e,i,s,r){return r}}),St("border",{defaultValue:"0px solid #000",parser:function(t,e,i,s,r,n){var a=et(t,"borderTopWidth",S,!1,"0px"),o=this.format(e).split(" "),l=o[0].replace(D,"");return"px"!==l&&(a=parseFloat(a)/it(t,"borderTopWidth",1,l)+l),this.parseComplex(t.style,this.format(a+" "+et(t,"borderTopStyle",S,!1,"solid")+" "+et(t,"borderTopColor",S,!1,"#000")),o.join(" "),r,n)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(gt)||["#000"])[0]}}),St("borderWidth",{parser:vt("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),St("float,cssFloat,styleFloat",{parser:function(t,e,i,s,r,n){var a=t.style,o="cssFloat"in a?"cssFloat":"styleFloat";return new xt(a,o,0,0,r,-1,i,!1,0,a[o],e)}});var Qt=function(t){var e,i=this.t,s=i.filter||et(this.data,"filter")||"",r=this.s+this.c*t|0;100===r&&(e=-1===s.indexOf("atrix(")&&-1===s.indexOf("radient(")&&-1===s.indexOf("oader(")?(i.removeAttribute("filter"),!et(this.data,"filter")):(i.filter=s.replace(a,""),!0)),e||(this.xn1&&(i.filter=s=s||"alpha(opacity="+r+")"),-1===s.indexOf("pacity")?0===r&&this.xn1||(i.filter=s+" alpha(opacity="+r+")"):i.filter=s.replace(z,"opacity="+r))};St("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,s,r,n){var a=parseFloat(et(t,"opacity",S,!1,"1")),o=t.style,l="autoAlpha"===i;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),l&&1===a&&"hidden"===et(t,"visibility",S)&&0!==e&&(a=0),W?r=new xt(o,"opacity",a,e-a,r):((r=new xt(o,"opacity",100*a,100*(e-a),r)).xn1=l?1:0,o.zoom=1,r.type=2,r.b="alpha(opacity="+r.s+")",r.e="alpha(opacity="+(r.s+r.c)+")",r.data=t,r.plugin=n,r.setRatio=Qt),l&&((r=new xt(o,"visibility",0,0,r,-1,null,!1,0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit")).xs0="inherit",s._overwriteProps.push(r.n),s._overwriteProps.push(i)),r}});var Jt=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(o,"-$1").toLowerCase())):t.removeAttribute(e))},Kt=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Jt(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};St("className",{parser:function(t,e,i,s,r,n,a){var o,l,h,_,u,f=t.getAttribute("class")||"",c=t.style.cssText;if((r=s._classNamePT=new xt(t,i,0,0,r,2)).setRatio=Kt,r.pr=-11,p=!0,r.b=f,l=rt(t,S),h=t._gsClassPT){for(_={},u=h.data;u;)_[u.p]=1,u=u._next;h.setRatio(1)}return(t._gsClassPT=r).e="="!==e.charAt(1)?e:f.replace(new RegExp("(?:\\s|^)"+e.substr(2)+"(?![\\w-])"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),t.setAttribute("class",r.e),o=nt(t,l,rt(t),a,_),t.setAttribute("class",f),r.data=o.firstMPT,t.style.cssText=c,r=r.xfirst=s.parse(t,o.difs,r,n)}});var te=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,s,r,n,a=this.t.style,o=m.transform.parse;if("all"===this.e)r=!(a.cssText="");else for(s=(e=this.e.split(" ").join("").split(",")).length;-1<--s;)i=e[s],m[i]&&(m[i].parse===o?r=!0:i="transformOrigin"===i?It:m[i].p),Jt(a,i);r&&(Jt(a,Ft),(n=this.t._gsTransform)&&(n.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(St("clearProps",{parser:function(t,e,i,s,r){return(r=new xt(t,i,0,0,r,2)).setRatio=te,r.e=e,r.pr=-10,r.data=s._tween,p=!0,r}}),t="bezier,throwProps,physicsProps,physics2D".split(","),Pt=t.length;Pt--;)kt(t[Pt]);(t=B.prototype)._firstPT=t._lastParsedTransform=t._transform=null,t._onInitTween=function(t,e,i,s){if(!t.nodeType)return!1;this._target=A=t,this._tween=i,this._vars=e,R=s,k=e.autoRound,p=!1,P=e.suffixMap||B.suffixMap,S=tt(t,""),d=this._overwriteProps;var r,n,a,o,l,h,_,u,f,c=t.style;if(g&&""===c.zIndex&&("auto"!==(r=et(t,"zIndex",S))&&""!==r||this._addLazySet(c,"zIndex",0)),"string"==typeof e&&(o=c.cssText,r=rt(t,S),c.cssText=o+";"+e,r=nt(t,r,rt(t)).difs,!W&&x.test(e)&&(r.opacity=parseFloat(RegExp.$1)),e=r,c.cssText=o),e.className?this._firstPT=n=m.className.parse(t,e.className,"className",this,null,null,e):this._firstPT=n=this.parse(t,e,null),this._transformType){for(f=3===this._transformType,Ft?y&&(g=!0,""===c.zIndex&&("auto"!==(_=et(t,"zIndex",S))&&""!==_||this._addLazySet(c,"zIndex",0)),v&&this._addLazySet(c,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(f?"visible":"hidden"))):c.zoom=1,a=n;a&&a._next;)a=a._next;u=new xt(t,"transform",0,0,null,2),this._linkCSSP(u,null,a),u.setRatio=Ft?Zt:$t,u.data=this._transform||Wt(t,S,!0),u.tween=i,u.pr=-1,d.pop()}if(p){for(;n;){for(h=n._next,a=o;a&&a.pr>n.pr;)a=a._next;(n._prev=a?a._prev:l)?n._prev._next=n:o=n,(n._next=a)?a._prev=n:l=n,n=h}this._firstPT=o}return!0},t.parse=function(t,e,i,s){var r,n,a,o,l,h,_,u,f,c,p=t.style;for(r in e){if("function"==typeof(h=e[r])&&(h=h(R,A)),n=m[r])i=n.parse(t,h,r,this,i,s,e);else{if("--"===r.substr(0,2)){this._tween._propLookup[r]=this._addTween.call(this._tween,t.style,"setProperty",tt(t).getPropertyValue(r)+"",h+"",r,!1,r);continue}l=et(t,r,S)+"",f="string"==typeof h,"color"===r||"fill"===r||"stroke"===r||-1!==r.indexOf("Color")||f&&w.test(h)?(f||(h=(3<(h=dt(h)).length?"rgba(":"rgb(")+h.join(",")+")"),i=bt(p,r,l,h,!0,"transparent",i,0,s)):f&&I.test(h)?i=bt(p,r,l,h,!0,null,i,0,s):(_=(a=parseFloat(l))||0===a?l.substr((a+"").length):"",""!==l&&"auto"!==l||(_="width"===r||"height"===r?(a=lt(t,r,S),"px"):"left"===r||"top"===r?(a=st(t,r,S),"px"):(a="opacity"!==r?0:1,"")),""===(u=(c=f&&"="===h.charAt(1))?(o=parseInt(h.charAt(0)+"1",10),h=h.substr(2),o*=parseFloat(h),h.replace(D,"")):(o=parseFloat(h),f?h.replace(D,""):""))&&(u=r in P?P[r]:_),h=o||0===o?(c?o+a:o)+u:e[r],_!==u&&(""===u&&"lineHeight"!==r||(o||0===o)&&a&&(a=it(t,r,a,_),"%"===u?(a/=it(t,r,100,"%")/100,!0!==e.strictUnits&&(l=a+"%")):"em"===u||"rem"===u||"vw"===u||"vh"===u?a/=it(t,r,1,u):"px"!==u&&(o=it(t,r,o,u),u="px"),c&&(o||0===o)&&(h=o+a+u))),c&&(o+=a),!a&&0!==a||!o&&0!==o?void 0!==p[r]&&(h||h+""!="NaN"&&null!=h)?(i=new xt(p,r,o||a||0,0,i,-1,r,!1,0,l,h)).xs0="none"!==h||"display"!==r&&-1===r.indexOf("Style")?h:l:Z("invalid "+r+" tween value: "+e[r]):(i=new xt(p,r,a,o-a,i,0,r,!1!==k&&("px"===u||"zIndex"===r),0,l,h)).xs0=u)}s&&i&&!i.plugin&&(i.plugin=s)}return i},t.setRatio=function(t){var e,i,s,r=this._firstPT;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||-1e-6===this._tween._rawPrevTime)for(;r;){if(e=r.c*t+r.s,r.r?e=r.r(e):e<1e-6&&-1e-6<e&&(e=0),r.type)if(1===r.type)if(2===(s=r.l))r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,s=1;s<r.l;s++)i+=r["xn"+s]+r["xs"+(s+1)];r.t[r.p]=i}else-1===r.type?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&-1!==r.type)if(e=r.r(r.s+r.c),r.type){if(1===r.type){for(s=r.l,i=r.xs0+e+r.xs1,s=1;s<r.l;s++)i+=r["xn"+s]+r["xs"+(s+1)];r.t[r.p]=i}}else r.t[r.p]=e+r.xs0;else r.t[r.p]=r.e;else r.setRatio(t);r=r._next}},t._enableTransforms=function(t){this._transform=this._transform||Wt(this._target,S,!0),this._transformType=this._transform.svg&&At||!t&&3!==this._transformType?2:3};var ee=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};t._addLazySet=function(t,e,i){var s=this._firstPT=new xt(t,e,0,0,this._firstPT,2);s.e=i,s.setRatio=ee,s.data=this},t._linkCSSP=function(t,e,i,s){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,s=!0),i?i._next=t:s||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},t._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&(e.r=t[e.p]),e=e._next},t._kill=function(t){var e,i,s,r=t;if(t.autoAlpha||t.alpha){for(i in r={},t)r[i]=t[i];r.opacity=1,r.autoAlpha&&(r.visibility=1)}for(t.className&&(e=this._classNamePT)&&((s=e.xfirst)&&s._prev?this._linkCSSP(s._prev,e._next,s._prev._prev):s===this._firstPT&&(this._firstPT=e._next),e._next&&this._linkCSSP(e._next,e._next._next,s._prev),this._classNamePT=null),e=this._firstPT;e;)e.plugin&&e.plugin!==i&&e.plugin._kill&&(e.plugin._kill(t),i=e.plugin),e=e._next;return n.prototype._kill.call(this,r)};var ie=function t(e,i,s){var r,n,a,o;if(e.slice)for(n=e.length;-1<--n;)t(e[n],i,s);else for(n=(r=e.childNodes).length;-1<--n;)o=(a=r[n]).type,a.style&&(i.push(rt(a)),s&&s.push(a)),1!==o&&9!==o&&11!==o||!a.childNodes.length||t(a,i,s)};return B.cascadeTo=function(t,e,i){var s,r,n,a,o=N.to(t,e,i),l=[o],h=[],_=[],u=[],f=N._internals.reservedProps;for(t=o._targets||o.target,ie(t,h,u),o.render(e,!0,!0),ie(t,_),o.render(0,!0,!0),o._enabled(!0),s=u.length;-1<--s;)if((r=nt(u[s],h[s],_[s])).firstMPT){for(n in r=r.difs,i)f[n]&&(r[n]=i[n]);for(n in a={},r)a[n]=h[s][n];l.push(N.fromTo(u[s],e,a,r))}return l},n.activate([B]),B},!0),e=re._gsDefine.plugin({propName:"roundProps",version:"1.7.0",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}),l=function(e){var i=e<1?Math.pow(10,(e+"").length-2):1;return function(t){return(Math.round(t/e)*e*i|0)/i}},h=function(t,e){for(;t;)t.f||t.blob||(t.m=e||Math.round),t=t._next},(s=e.prototype)._onInitAllProps=function(){var t,e,i,s,r=this._tween,n=r.vars.roundProps,a={},o=r._propLookup.roundProps;if("object"!==(void 0===n?"undefined":se(n))||n.push)for("string"==typeof n&&(n=n.split(",")),i=n.length;-1<--i;)a[n[i]]=Math.round;else for(s in n)a[s]=l(n[s]);for(s in a)for(t=r._firstPT;t;)e=t._next,t.pg?t.t._mod(a):t.n===s&&(2===t.f&&t.t?h(t.t._firstPT,a[s]):(this._add(t.t,s,t.s,t.c,a[s]),e&&(e._prev=t._prev),t._prev?t._prev._next=e:r._firstPT===t&&(r._firstPT=e),t._next=t._prev=null,r._propLookup[s]=o)),t=e;return!1},s._add=function(t,e,i,s,r){this._addTween(t,e,i,i+s,e,r||Math.round),this._overwriteProps.push(e)},re._gsDefine.plugin({propName:"attr",API:2,version:"0.6.1",init:function(t,e,i,s){var r,n;if("function"!=typeof t.setAttribute)return!1;for(r in e)"function"==typeof(n=e[r])&&(n=n(s,t)),this._addTween(t,"setAttribute",t.getAttribute(r)+"",n+"",r,!1,r),this._overwriteProps.push(r);return!0}}),re._gsDefine.plugin({propName:"directionalRotation",version:"0.3.1",API:2,init:function(t,e,i,s){"object"!==(void 0===e?"undefined":se(e))&&(e={rotation:e}),this.finals={};var r,n,a,o,l,h,_=!0===e.useRadians?2*Math.PI:360;for(r in e)"useRadians"!==r&&("function"==typeof(o=e[r])&&(o=o(s,t)),n=(h=(o+"").split("_"))[0],a=parseFloat("function"!=typeof t[r]?t[r]:t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]()),l=(o=this.finals[r]="string"==typeof n&&"="===n.charAt(1)?a+parseInt(n.charAt(0)+"1",10)*Number(n.substr(2)):Number(n)||0)-a,h.length&&(-1!==(n=h.join("_")).indexOf("short")&&(l%=_)!==l%(_/2)&&(l=l<0?l+_:l-_),-1!==n.indexOf("_cw")&&l<0?l=(l+9999999999*_)%_-(l/_|0)*_:-1!==n.indexOf("ccw")&&0<l&&(l=(l-9999999999*_)%_-(l/_|0)*_)),(1e-6<l||l<-1e-6)&&(this._addTween(t,r,a,a+l,r),this._overwriteProps.push(r)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}})._autoCSS=!0,re._gsDefine("easing.Back",["easing.Ease"],function(m){var i,s,e,t,r=re.GreenSockGlobals||re,n=r.com.greensock,a=2*Math.PI,o=Math.PI/2,l=n._class,h=function(t,e){var i=l("easing."+t,function(){},!0),s=i.prototype=new m;return s.constructor=i,s.getRatio=e,i},_=m.register||function(){},u=function(t,e,i,s,r){var n=l("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new s},!0);return _(n,t),n},g=function(t,e,i){this.t=t,this.v=e,i&&(((this.next=i).prev=this).c=i.v-e,this.gap=i.t-t)},f=function(t,e){var i=l("easing."+t,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),s=i.prototype=new m;return s.constructor=i,s.getRatio=e,s.config=function(t){return new i(t)},i},c=u("Back",f("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),f("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),f("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),p=l("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:1<t&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=!0===i},!0),d=p.prototype=new m;return d.constructor=p,d.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1===t?0:1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},p.ease=new p(.7,.7),d.config=p.config=function(t,e,i){return new p(t,e,i)},(d=(i=l("easing.SteppedEase",function(t,e){t=t||1,this._p1=1/t,this._p2=t+(e?0:1),this._p3=e?1:0},!0)).prototype=new m).constructor=i,d.getRatio=function(t){return t<0?t=0:1<=t&&(t=.999999999),((this._p2*t|0)+this._p3)*this._p1},d.config=i.config=function(t,e){return new i(t,e)},(d=(s=l("easing.ExpoScaleEase",function(t,e,i){this._p1=Math.log(e/t),this._p2=e-t,this._p3=t,this._ease=i},!0)).prototype=new m).constructor=s,d.getRatio=function(t){return this._ease&&(t=this._ease.getRatio(t)),(this._p3*Math.exp(this._p1*t)-this._p3)/this._p2},d.config=s.config=function(t,e,i){return new s(t,e,i)},(d=(e=l("easing.RoughEase",function(t){for(var e,i,s,r,n,a,o=(t=t||{}).taper||"none",l=[],h=0,_=0|(t.points||20),u=_,f=!1!==t.randomize,c=!0===t.clamp,p=t.template instanceof m?t.template:null,d="number"==typeof t.strength?.4*t.strength:.4;-1<--u;)e=f?Math.random():1/_*u,i=p?p.getRatio(e):e,s="none"===o?d:"out"===o?(r=1-e)*r*d:"in"===o?e*e*d:e<.5?(r=2*e)*r*.5*d:(r=2*(1-e))*r*.5*d,f?i+=Math.random()*s-.5*s:u%2?i+=.5*s:i-=.5*s,c&&(1<i?i=1:i<0&&(i=0)),l[h++]={x:e,y:i};for(l.sort(function(t,e){return t.x-e.x}),a=new g(1,1,null),u=_;-1<--u;)n=l[u],a=new g(n.x,n.y,a);this._prev=new g(0,0,0!==a.t?a:a.next)},!0)).prototype=new m).constructor=e,d.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return(this._prev=e).v+(t-e.t)/e.gap*e.c},d.config=function(t){return new e(t)},e.ease=new e,u("Bounce",h("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),h("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),h("BounceInOut",function(t){var e=t<.5;return(t=e?1-2*t:2*t-1)<1/2.75?t*=7.5625*t:t=t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),u("Circ",h("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),h("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),h("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),u("Elastic",(t=function(t,e,i){var s=l("easing."+t,function(t,e){this._p1=1<=t?t:1,this._p2=(e||i)/(t<1?t:1),this._p3=this._p2/a*(Math.asin(1/this._p1)||0),this._p2=a/this._p2},!0),r=s.prototype=new m;return r.constructor=s,r.getRatio=e,r.config=function(t,e){return new s(t,e)},s})("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),t("ElasticIn",function(t){return-this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)},.3),t("ElasticInOut",function(t){return(t*=2)<1?this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)*-.5:this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),u("Expo",h("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),h("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),h("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),u("Sine",h("SineOut",function(t){return Math.sin(t*o)}),h("SineIn",function(t){return 1-Math.cos(t*o)}),h("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),l("easing.EaseLookup",{find:function(t){return m.map[t]}},!0),_(r.SlowMo,"SlowMo","ease,"),_(e,"RoughEase","ease,"),_(i,"SteppedEase","ease,"),c},!0)}),re._gsDefine&&re._gsQueue.pop()(),function(c,p){var d={},r=c.document,m=c.GreenSockGlobals=c.GreenSockGlobals||c,t=m[p];if(t)return void 0!==rt&&rt.exports&&(rt.exports=t);var e,i,s,g,y,n,a,v=function(t){var e,i=t.split("."),s=m;for(e=0;e<i.length;e++)s[i[e]]=s=s[i[e]]||{};return s},u=v("com.greensock"),T=1e-10,l=function(t){var e,i=[],s=t.length;for(e=0;e!==s;i.push(t[e++]));return i},x=function(){},w=(n=Object.prototype.toString,a=n.call([]),function(t){return null!=t&&(t instanceof Array||"object"===(void 0===t?"undefined":se(t))&&!!t.push&&n.call(t)===a)}),b={},o=function o(l,h,_,u){this.sc=b[l]?b[l].sc:[],(b[l]=this).gsClass=null,this.func=_;var f=[];this.check=function(t){for(var e,i,s,r,n=h.length,a=n;-1<--n;)(e=b[h[n]]||new o(h[n],[])).gsClass?(f[n]=e.gsClass,a--):t&&e.sc.push(this);if(0===a&&_){if(s=(i=("com.greensock."+l).split(".")).pop(),r=v(i.join("."))[s]=this.gsClass=_.apply(_,f),u)if(m[s]=d[s]=r,void 0!==rt&&rt.exports)if(l===p)for(n in rt.exports=d[p]=r,d)r[n]=d[n];else d[p]&&(d[p][s]=r);else"function"==typeof define&&define.amd&&define((c.GreenSockAMDPath?c.GreenSockAMDPath+"/":"")+l.split(".").pop(),[],function(){return r});for(n=0;n<this.sc.length;n++)this.sc[n].check()}},this.check(!0)},h=c._gsDefine=function(t,e,i,s){return new o(t,e,i,s)},f=u._class=function(t,e,i){return e=e||function(){},h(t,[],function(){return e},i),e};h.globals=m;var _=[0,0,1,1],P=f("easing.Ease",function(t,e,i,s){this._func=t,this._type=i||0,this._power=s||0,this._params=e?_.concat(e):_},!0),O=P.map={},S=P.register=function(t,e,i,s){for(var r,n,a,o,l=e.split(","),h=l.length,_=(i||"easeIn,easeOut,easeInOut").split(",");-1<--h;)for(n=l[h],r=s?f("easing."+n,null,!0):u.easing[n]||{},a=_.length;-1<--a;)o=_[a],O[n+"."+o]=O[o+n]=r[o]=t.getRatio?t:t[o]||new t};for((s=P.prototype)._calcEnd=!1,s.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,s=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?s*=s:2===i?s*=s*s:3===i?s*=s*s*s:4===i&&(s*=s*s*s*s),1===e?1-s:2===e?s:t<.5?s/2:1-s/2},i=(e=["Linear","Quad","Cubic","Quart","Quint,Strong"]).length;-1<--i;)s=e[i]+",Power"+i,S(new P(null,null,1,i),s,"easeOut",!0),S(new P(null,null,2,i),s,"easeIn"+(0===i?",easeNone":"")),S(new P(null,null,3,i),s,"easeInOut");O.linear=u.easing.Linear.easeIn,O.swing=u.easing.Quad.easeInOut;var k=f("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});(s=k.prototype).addEventListener=function(t,e,i,s,r){r=r||0;var n,a,o=this._listeners[t],l=0;for(this!==g||y||g.wake(),null==o&&(this._listeners[t]=o=[]),a=o.length;-1<--a;)(n=o[a]).c===e&&n.s===i?o.splice(a,1):0===l&&n.pr<r&&(l=a+1);o.splice(l,0,{c:e,s:i,up:s,pr:r})},s.removeEventListener=function(t,e){var i,s=this._listeners[t];if(s)for(i=s.length;-1<--i;)if(s[i].c===e)return void s.splice(i,1)},s.dispatchEvent=function(t){var e,i,s,r=this._listeners[t];if(r)for(1<(e=r.length)&&(r=r.slice(0)),i=this._eventTarget;-1<--e;)(s=r[e])&&(s.up?s.c.call(s.s||i,{type:t,target:i}):s.c.call(s.s||i))};var A=c.requestAnimationFrame,R=c.cancelAnimationFrame,C=Date.now||function(){return(new Date).getTime()},M=C();for(i=(e=["ms","moz","webkit","o"]).length;-1<--i&&!A;)A=c[e[i]+"RequestAnimationFrame"],R=c[e[i]+"CancelAnimationFrame"]||c[e[i]+"CancelRequestAnimationFrame"];f("Ticker",function(t,e){var n,a,o,l,h,_=this,u=C(),i=!(!1===e||!A)&&"auto",f=500,c=33,s=function t(e){var i,s,r=C()-M;f<r&&(u+=r-c),M+=r,_.time=(M-u)/1e3,i=_.time-h,(!n||0<i||!0===e)&&(_.frame++,h+=i+(l<=i?.004:l-i),s=!0),!0!==e&&(o=a(t)),s&&_.dispatchEvent("tick")};k.call(_),_.time=_.frame=0,_.tick=function(){s(!0)},_.lagSmoothing=function(t,e){if(!arguments.length)return f<1e10;f=t||1e10,c=Math.min(e,f,0)},_.sleep=function(){null!=o&&(i&&R?R(o):clearTimeout(o),a=x,o=null,_===g&&(y=!1))},_.wake=function(t){null!==o?_.sleep():t?u+=-M+(M=C()):10<_.frame&&(M=C()-f+5),a=0===n?x:i&&A?A:function(t){return setTimeout(t,1e3*(h-_.time)+1|0)},_===g&&(y=!0),s(2)},_.fps=function(t){if(!arguments.length)return n;l=1/((n=t)||60),h=this.time+l,_.wake()},_.useRAF=function(t){if(!arguments.length)return i;_.sleep(),i=t,_.fps(n)},_.fps(t),setTimeout(function(){"auto"===i&&_.frame<5&&"hidden"!==(r||{}).visibilityState&&_.useRAF(!1)},1500)}),(s=u.Ticker.prototype=new u.events.EventDispatcher).constructor=u.Ticker;var D=f("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=!0===e.immediateRender,this.data=e.data,this._reversed=!0===e.reversed,Z){y||g.wake();var i=this.vars.useFrames?$:Z;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});g=D.ticker=new u.Ticker,(s=D.prototype)._dirty=s._gc=s._initted=s._paused=!1,s._totalTime=s._time=0,s._rawPrevTime=-1,s._next=s._last=s._onUpdate=s._timeline=s.timeline=null,s._paused=!1;!function t(){y&&2e3<C()-M&&("hidden"!==(r||{}).visibilityState||!g.lagSmoothing())&&g.wake();var e=setTimeout(t,2e3);e.unref&&e.unref()}(),s.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},s.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},s.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},s.seek=function(t,e){return this.totalTime(Number(t),!1!==e)},s.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,!1!==e,!0)},s.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},s.render=function(t,e,i){},s.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},s.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<i+this.totalDuration()/this._timeScale-1e-7},s._enabled=function(t,e){return y||g.wake(),this._gc=!t,this._active=this.isActive(),!0!==e&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},s._kill=function(t,e){return this._enabled(!1,!1)},s.kill=function(t,e){return this._kill(t,e),this},s._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},s._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();-1<--e;)"{self}"===t[e]&&(i[e]=this);return i},s._callback=function(t){var e=this.vars,i=e[t],s=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this;switch(s?s.length:0){case 0:i.call(r);break;case 1:i.call(r,s[0]);break;case 2:i.call(r,s[0],s[1]);break;default:i.apply(r,s)}},s.eventCallback=function(t,e,i,s){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=w(i)&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,r[t+"Scope"]=s),"onUpdate"===t&&(this._onUpdate=e)}return this},s.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},s.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&0<this._time&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},s.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},s.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},s.totalTime=function(t,e,i){if(y||g.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var s=this._totalDuration,r=this._timeline;if(s<t&&!i&&(t=s),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?s-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(I.length&&J(),this.render(t,e,!1),I.length&&J())}return this},s.progress=s.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},s.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},s.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},s.timeScale=function(t){if(!arguments.length)return this._timeScale;var e,i;for(t=t||T,this._timeline&&this._timeline.smoothChildTiming&&(i=(e=this._pauseTime)||0===e?e:this._timeline.totalTime(),this._startTime=i-(i-this._startTime)*this._timeScale/t),this._timeScale=t,i=this.timeline;i&&i.timeline;)i._dirty=!0,i.totalDuration(),i=i.timeline;return this},s.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},s.paused=function(t){if(!arguments.length)return this._paused;var e,i,s=this._timeline;return t!=this._paused&&s&&(y||t||g.wake(),i=(e=s.rawTime())-this._pauseTime,!t&&s.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=s.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var z=f("core.SimpleTimeline",function(t){D.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});(s=z.prototype=new D).constructor=z,s.kill()._gc=!1,s._first=s._last=s._recent=null,s._sortChildren=!1,s.add=s.insert=function(t,e,i,s){var r,n;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=this.rawTime()-(t._timeline.rawTime()-t._pauseTime)),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(n=t._startTime;r&&r._startTime>n;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},s._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},s.render=function(t,e,i){var s,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)s=r._next,(r._active||t>=r._startTime&&!r._paused&&!r._gc)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=s},s.rawTime=function(){return y||g.wake(),this._totalTime};var F=f("TweenLite",function(t,e,i){if(D.call(this,e,i),this.render=F.prototype.render,null==t)throw"Cannot tween a null target.";this.target=t="string"!=typeof t?t:F.selector(t)||t;var s,r,n,a=t.jquery||t.length&&t!==c&&t[0]&&(t[0]===c||t[0].nodeType&&t[0].style&&!t.nodeType),o=this.vars.overwrite;if(this._overwrite=o=null==o?W[F.defaultOverwrite]:"number"==typeof o?o>>0:W[o],(a||t instanceof Array||t.push&&w(t))&&"number"!=typeof t[0])for(this._targets=n=l(t),this._propLookup=[],this._siblings=[],s=0;s<n.length;s++)(r=n[s])?"string"!=typeof r?r.length&&r!==c&&r[0]&&(r[0]===c||r[0].nodeType&&r[0].style&&!r.nodeType)?(n.splice(s--,1),this._targets=n=n.concat(l(r))):(this._siblings[s]=K(r,this,!1),1===o&&1<this._siblings[s].length&&et(r,this,null,1,this._siblings[s])):"string"==typeof(r=n[s--]=F.selector(r))&&n.splice(s+1,1):n.splice(s--,1);else this._propLookup={},this._siblings=K(t,this,!1),1===o&&1<this._siblings.length&&et(t,this,null,1,this._siblings);(this.vars.immediateRender||0===e&&0===this._delay&&!1!==this.vars.immediateRender)&&(this._time=-T,this.render(Math.min(0,-this._delay)))},!0),E=function(t){return t&&t.length&&t!==c&&t[0]&&(t[0]===c||t[0].nodeType&&t[0].style&&!t.nodeType)};(s=F.prototype=new D).constructor=F,s.kill()._gc=!1,s.ratio=0,s._firstPT=s._targets=s._overwrittenProps=s._startAt=null,s._notifyPluginsOfEnabled=s._lazy=!1,F.version="2.0.2",F.defaultEase=s._ease=new P(null,null,1,1),F.defaultOverwrite="auto",F.ticker=g,F.autoSleep=120,F.lagSmoothing=function(t,e){g.lagSmoothing(t,e)},F.selector=c.$||c.jQuery||function(t){var e=c.$||c.jQuery;return e?(F.selector=e)(t):(r||(r=c.document),r?r.querySelectorAll?r.querySelectorAll(t):r.getElementById("#"===t.charAt(0)?t.substr(1):t):t)};var I=[],L={},X=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,q=/[\+-]=-?[\.\d]/,N=function(t){for(var e,i=this._firstPT;i;)e=i.blob?1===t&&null!=this.end?this.end:t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m.call(this._tween,e,this._target||i.t,this._tween):e<1e-6&&-1e-6<e&&!i.blob&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},B=function(t,e,i,s){var r,n,a,o,l,h,_,u=[],f=0,c="",p=0;for(u.start=t,u.end=e,t=u[0]=t+"",e=u[1]=e+"",i&&(i(u),t=u[0],e=u[1]),u.length=0,r=t.match(X)||[],n=e.match(X)||[],s&&(s._next=null,s.blob=1,u._firstPT=u._applyPT=s),l=n.length,o=0;o<l;o++)_=n[o],c+=(h=e.substr(f,e.indexOf(_,f)-f))||!o?h:",",f+=h.length,p?p=(p+1)%5:"rgba("===h.substr(-5)&&(p=1),_===r[o]||r.length<=o?c+=_:(c&&(u.push(c),c=""),a=parseFloat(r[o]),u.push(a),u._firstPT={_next:u._firstPT,t:u,p:u.length-1,s:a,c:("="===_.charAt(1)?parseInt(_.charAt(0)+"1",10)*parseFloat(_.substr(2)):parseFloat(_)-a)||0,f:0,m:p&&p<4?Math.round:0}),f+=_.length;return(c+=e.substr(f))&&u.push(c),u.setRatio=N,q.test(e)&&(u.end=null),u},Y=function(t,e,i,s,r,n,a,o,l){"function"==typeof s&&(s=s(l||0,t));var h=se(t[e]),_="function"!==h?"":e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),u="get"!==i?i:_?a?t[_](a):t[_]():t[e],f="string"==typeof s&&"="===s.charAt(1),c={t:t,p:e,s:u,f:"function"===h,pg:0,n:r||e,m:n?"function"==typeof n?n:Math.round:0,pr:0,c:f?parseInt(s.charAt(0)+"1",10)*parseFloat(s.substr(2)):parseFloat(s)-u||0};if(("number"!=typeof u||"number"!=typeof s&&!f)&&(a||isNaN(u)||!f&&isNaN(s)||"boolean"==typeof u||"boolean"==typeof s?(c.fp=a,c={t:B(u,f?parseFloat(c.s)+c.c+(c.s+"").replace(/[0-9\-\.]/g,""):s,o||F.defaultStringFilter,c),p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):(c.s=parseFloat(u),f||(c.c=parseFloat(s)-c.s||0))),c.c)return(c._next=this._firstPT)&&(c._next._prev=c),this._firstPT=c},j=F._internals={isArray:w,isSelector:E,lazyTweens:I,blobDif:B},U=F._plugins={},V=j.tweenLookup={},H=0,G=j.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1,yoyoEase:1},W={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},$=D._rootFramesTimeline=new z,Z=D._rootTimeline=new z,Q=30,J=j.lazyRender=function(){var t,e=I.length;for(L={};-1<--e;)(t=I[e])&&!1!==t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);I.length=0};Z._startTime=g.time,$._startTime=g.frame,Z._active=$._active=!0,setTimeout(J,1),D._updateRoot=F.render=function(){var t,e,i;if(I.length&&J(),Z.render((g.time-Z._startTime)*Z._timeScale,!1,!1),$.render((g.frame-$._startTime)*$._timeScale,!1,!1),I.length&&J(),g.frame>=Q){for(i in Q=g.frame+(parseInt(F.autoSleep,10)||120),V){for(t=(e=V[i].tweens).length;-1<--t;)e[t]._gc&&e.splice(t,1);0===e.length&&delete V[i]}if((!(i=Z._first)||i._paused)&&F.autoSleep&&!$._first&&1===g._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||g.sleep()}}},g.addEventListener("tick",D._updateRoot);var K=function(t,e,i){var s,r,n=t._gsTweenID;if(V[n||(t._gsTweenID=n="t"+H++)]||(V[n]={target:t,tweens:[]}),e&&((s=V[n].tweens)[r=s.length]=e,i))for(;-1<--r;)s[r]===e&&s.splice(r,1);return V[n].tweens},tt=function(t,e,i,s){var r,n,a=t.vars.onOverwrite;return a&&(r=a(t,e,i,s)),(a=F.onOverwrite)&&(n=a(t,e,i,s)),!1!==r&&!1!==n},et=function(t,e,i,s,r){var n,a,o,l;if(1===s||4<=s){for(l=r.length,n=0;n<l;n++)if((o=r[n])!==e)o._gc||o._kill(null,t,e)&&(a=!0);else if(5===s)break;return a}var h,_=e._startTime+T,u=[],f=0,c=0===e._duration;for(n=r.length;-1<--n;)(o=r[n])===e||o._gc||o._paused||(o._timeline!==e._timeline?(h=h||it(e,0,c),0===it(o,h,c)&&(u[f++]=o)):o._startTime<=_&&o._startTime+o.totalDuration()/o._timeScale>_&&((c||!o._initted)&&_-o._startTime<=2e-10||(u[f++]=o)));for(n=f;-1<--n;)if(l=(o=u[n])._firstPT,2===s&&o._kill(i,t,e)&&(a=!0),2!==s||!o._firstPT&&o._initted&&l){if(2!==s&&!tt(o,e))continue;o._enabled(!1,!1)&&(a=!0)}return a},it=function(t,e,i){for(var s=t._timeline,r=s._timeScale,n=t._startTime;s._timeline;){if(n+=s._startTime,r*=s._timeScale,s._paused)return-100;s=s._timeline}return e<(n/=r)?n-e:i&&n===e||!t._initted&&n-e<2*T?T:(n+=t.totalDuration()/t._timeScale/r)>e+T?0:n-e-T};s._init=function(){var t,e,i,s,r,n,a=this.vars,o=this._overwrittenProps,l=this._duration,h=!!a.immediateRender,_=a.ease;if(a.startAt){for(s in this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={},a.startAt)r[s]=a.startAt[s];if(r.data="isStart",r.overwrite=!1,r.immediateRender=!0,r.lazy=h&&!1!==a.lazy,r.startAt=r.delay=null,r.onUpdate=a.onUpdate,r.onUpdateParams=a.onUpdateParams,r.onUpdateScope=a.onUpdateScope||a.callbackScope||this,this._startAt=F.to(this.target||{},0,r),h)if(0<this._time)this._startAt=null;else if(0!==l)return}else if(a.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{for(s in 0!==this._time&&(h=!1),i={},a)G[s]&&"autoCSS"!==s||(i[s]=a[s]);if(i.overwrite=0,i.data="isFromStart",i.lazy=h&&!1!==a.lazy,i.immediateRender=h,this._startAt=F.to(this.target,0,i),h){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=_=_?_ instanceof P?_:"function"==typeof _?new P(_,a.easeParams):O[_]||F.defaultEase:F.defaultEase,a.easeParams instanceof Array&&_.config&&(this._ease=_.config.apply(_,a.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(n=this._targets.length,t=0;t<n;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],o?o[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,o,0);if(e&&F._onPluginEvent("_onInitAllProps",this),o&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),a.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=a.onUpdate,this._initted=!0},s._initProps=function(t,e,i,s,r){var n,a,o,l,h,_;if(null==t)return!1;for(n in L[t._gsTweenID]&&J(),this.vars.css||t.style&&t!==c&&t.nodeType&&U.css&&!1!==this.vars.autoCSS&&function(t,e){var i,s={};for(i in t)G[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!U[i]||U[i]&&U[i]._autoCSS)||(s[i]=t[i],delete t[i]);t.css=s}(this.vars,t),this.vars)if(_=this.vars[n],G[n])_&&(_ instanceof Array||_.push&&w(_))&&-1!==_.join("").indexOf("{self}")&&(this.vars[n]=_=this._swapSelfInParams(_,this));else if(U[n]&&(l=new U[n])._onInitTween(t,this.vars[n],this,r)){for(this._firstPT=h={_next:this._firstPT,t:l,p:"setRatio",s:0,c:1,f:1,n:n,pg:1,pr:l._priority,m:0},a=l._overwriteProps.length;-1<--a;)e[l._overwriteProps[a]]=this._firstPT;(l._priority||l._onInitAllProps)&&(o=!0),(l._onDisable||l._onEnable)&&(this._notifyPluginsOfEnabled=!0),h._next&&(h._next._prev=h)}else e[n]=Y.call(this,t,n,"get",_,n,0,null,this.vars.stringFilter,r);return s&&this._kill(s,t)?this._initProps(t,e,i,s,r):1<this._overwrite&&this._firstPT&&1<i.length&&et(t,this,e,this._overwrite,i)?(this._kill(e,t),this._initProps(t,e,i,s,r)):(this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration)&&(L[t._gsTweenID]=!0),o)},s.render=function(t,e,i){var s,r,n,a,o=this._time,l=this._duration,h=this._rawPrevTime;if(l-1e-7<=t&&0<=t)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(s=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(h<0||t<=0&&-1e-7<=t||h===T&&"isPause"!==this.data)&&h!==t&&(i=!0,T<h&&(r="onReverseComplete")),this._rawPrevTime=a=!e||t||h===t?t:T);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==o||0===l&&0<h)&&(r="onReverseComplete",s=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(0<=h&&(h!==T||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=a=!e||t||h===t?t:T)),(!this._initted||this._startAt&&this._startAt.progress())&&(i=!0);else if(this._totalTime=this._time=t,this._easeType){var _=t/l,u=this._easeType,f=this._easePower;(1===u||3===u&&.5<=_)&&(_=1-_),3===u&&(_*=2),1===f?_*=_:2===f?_*=_*_:3===f?_*=_*_*_:4===f&&(_*=_*_*_*_),this.ratio=1===u?1-_:2===u?_:t/l<.5?_/2:1-_/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==o||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=o,this._rawPrevTime=h,I.push(this),void(this._lazy=[t,e]);this._time&&!s?this.ratio=this._ease.getRatio(this._time/l):s&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==o&&0<=t&&(this._active=!0),0===o&&(this._startAt&&(0<=t?this._startAt.render(t,!0,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),n=this._firstPT;n;)n.f?n.t[n.p](n.c*this.ratio+n.s):n.t[n.p]=n.c*this.ratio+n.s,n=n._next;this._onUpdate&&(t<0&&this._startAt&&-1e-4!==t&&this._startAt.render(t,!0,i),e||(this._time!==o||s||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&-1e-4!==t&&this._startAt.render(t,!0,i),s&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&this._rawPrevTime===T&&a!==T&&(this._rawPrevTime=0)))}},s._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:F.selector(e)||e;var s,r,n,a,o,l,h,_,u,f=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline,c=this._firstPT;if((w(e)||E(e))&&"number"!=typeof e[0])for(s=e.length;-1<--s;)this._kill(t,e[s],i)&&(l=!0);else{if(this._targets){for(s=this._targets.length;-1<--s;)if(e===this._targets[s]){o=this._propLookup[s]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[s]=t?this._overwrittenProps[s]||{}:"all";break}}else{if(e!==this.target)return!1;o=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(o){if(h=t||o,_=t!==r&&"all"!==r&&t!==o&&("object"!==(void 0===t?"undefined":se(t))||!t._tempKill),i&&(F.onOverwrite||this.vars.onOverwrite)){for(n in h)o[n]&&(u||(u=[]),u.push(n));if((u||!t)&&!tt(this,i,e,u))return!1}for(n in h)(a=o[n])&&(f&&(a.f?a.t[a.p](a.s):a.t[a.p]=a.s,l=!0),a.pg&&a.t._kill(h)&&(l=!0),a.pg&&0!==a.t._overwriteProps.length||(a._prev?a._prev._next=a._next:a===this._firstPT&&(this._firstPT=a._next),a._next&&(a._next._prev=a._prev),a._next=a._prev=null),delete o[n]),_&&(r[n]=1);!this._firstPT&&this._initted&&c&&this._enabled(!1,!1)}}return l},s.invalidate=function(){return this._notifyPluginsOfEnabled&&F._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],D.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-T,this.render(Math.min(0,-this._delay))),this},s._enabled=function(t,e){if(y||g.wake(),t&&this._gc){var i,s=this._targets;if(s)for(i=s.length;-1<--i;)this._siblings[i]=K(s[i],this,!0);else this._siblings=K(this.target,this,!0)}return D.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&F._onPluginEvent(t?"_onEnable":"_onDisable",this)},F.to=function(t,e,i){return new F(t,e,i)},F.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new F(t,e,i)},F.fromTo=function(t,e,i,s){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,new F(t,e,s)},F.delayedCall=function(t,e,i,s,r){return new F(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:s,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},F.set=function(t,e){return new F(t,0,e)},F.getTweensOf=function(t,e){if(null==t)return[];var i,s,r,n;if(t="string"!=typeof t?t:F.selector(t)||t,(w(t)||E(t))&&"number"!=typeof t[0]){for(i=t.length,s=[];-1<--i;)s=s.concat(F.getTweensOf(t[i],e));for(i=s.length;-1<--i;)for(n=s[i],r=i;-1<--r;)n===s[r]&&s.splice(i,1)}else if(t._gsTweenID)for(i=(s=K(t).concat()).length;-1<--i;)(s[i]._gc||e&&!s[i].isActive())&&s.splice(i,1);return s||[]},F.killTweensOf=F.killDelayedCallsTo=function(t,e,i){"object"===(void 0===e?"undefined":se(e))&&(i=e,e=!1);for(var s=F.getTweensOf(t,e),r=s.length;-1<--r;)s[r]._kill(i,t)};var st=f("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=st.prototype},!0);if(s=st.prototype,st.version="1.19.0",st.API=2,s._firstPT=null,s._addTween=Y,s.setRatio=N,s._kill=function(t){var e,i=this._overwriteProps,s=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;-1<--e;)null!=t[i[e]]&&i.splice(e,1);for(;s;)null!=t[s.n]&&(s._next&&(s._next._prev=s._prev),s._prev?(s._prev._next=s._next,s._prev=null):this._firstPT===s&&(this._firstPT=s._next)),s=s._next;return!1},s._mod=s._roundProps=function(t){for(var e,i=this._firstPT;i;)(e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")])&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},F._onPluginEvent=function(t,e){var i,s,r,n,a,o=e._firstPT;if("_onInitAllProps"===t){for(;o;){for(a=o._next,s=r;s&&s.pr>o.pr;)s=s._next;(o._prev=s?s._prev:n)?o._prev._next=o:r=o,(o._next=s)?s._prev=o:n=o,o=a}o=e._firstPT=r}for(;o;)o.pg&&"function"==typeof o.t[t]&&o.t[t]()&&(i=!0),o=o._next;return i},st.activate=function(t){for(var e=t.length;-1<--e;)t[e].API===st.API&&(U[(new t[e])._propName]=t[e]);return!0},h.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,s=t.priority||0,r=t.overwriteProps,n={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},a=f("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){st.call(this,i,s),this._overwriteProps=r||[]},!0===t.global),o=a.prototype=new st(i);for(e in(o.constructor=a).API=t.API,n)"function"==typeof t[e]&&(o[n[e]]=t[e]);return a.version=t.version,st.activate([a]),a},e=c._gsQueue){for(i=0;i<e.length;i++)e[i]();for(s in b)b[s].func||c.console.log("GSAP encountered missing dependency: "+s)}y=!1}(void 0!==rt&&rt.exports&&void 0!==t?t:window,"TweenMax")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
